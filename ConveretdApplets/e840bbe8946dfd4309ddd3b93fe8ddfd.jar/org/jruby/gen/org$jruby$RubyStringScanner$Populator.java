// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyStringScanner$i$0$0$getch19;
import org.jruby.RubyStringScanner$i$0$0$getch;
import org.jruby.CompatVersion;
import org.jruby.RubyStringScanner$i$0$0$matchedsize;
import org.jruby.RubyStringScanner$i$1$0$peep;
import org.jruby.RubyStringScanner$i$1$0$check_until;
import org.jruby.RubyStringScanner$i$0$0$unscan;
import org.jruby.RubyStringScanner$i$1$0$scan_until;
import org.jruby.RubyStringScanner$i$1$0$initialize_copy;
import org.jruby.RubyStringScanner$i$1$0$set_pos;
import org.jruby.RubyStringScanner$i$0$0$pos;
import org.jruby.RubyStringScanner$i$0$0$rest_size;
import org.jruby.RubyStringScanner$i$0$0$matched;
import org.jruby.RubyStringScanner$i$1$0$peek;
import org.jruby.RubyStringScanner$i$0$0$terminate;
import org.jruby.RubyStringScanner$i$0$0$bol_p;
import org.jruby.runtime.Block;
import org.jruby.RubyStringScanner$i$0$1$initialize;
import org.jruby.RubyStringScanner$i$0$0$inspect;
import org.jruby.RubyStringScanner$i$1$0$exist_p;
import org.jruby.RubyStringScanner$i$1$0$set_string;
import org.jruby.RubyStringScanner$i$0$0$eos_p;
import org.jruby.RubyStringScanner$i$0$0$post_match;
import org.jruby.RubyStringScanner$i$1$0$op_aref;
import org.jruby.RubyStringScanner$i$0$0$getbyte;
import org.jruby.RubyStringScanner$i$0$0$matched_p;
import org.jruby.RubyStringScanner$i$3$0$scan_full;
import org.jruby.RubyStringScanner$i$0$0$clear;
import org.jruby.RubyStringScanner$i$0$0$rest;
import org.jruby.RubyStringScanner$i$0$0$empty_p;
import org.jruby.RubyStringScanner$i$1$0$concat;
import org.jruby.RubyString;
import org.jruby.RubyStringScanner$i$0$0$string;
import org.jruby.RubyStringScanner$i$1$0$scan;
import org.jruby.RubyStringScanner$i$1$0$skip;
import org.jruby.RubyStringScanner$i$0$0$pre_match;
import org.jruby.RubyStringScanner$i$1$0$skip_until;
import org.jruby.RubyStringScanner$i$3$0$search_full;
import org.jruby.RubyStringScanner$i$1$0$check;
import org.jruby.RubyStringScanner$i$0$0$matched_size;
import org.jruby.RubyFixnum;
import org.jruby.RubyStringScanner$i$0$0$restsize;
import org.jruby.RubyBoolean;
import org.jruby.RubyStringScanner$i$0$0$rest_p;
import org.jruby.runtime.ThreadContext;
import org.jruby.RubyStringScanner$i$0$0$get_byte;
import org.jruby.RubyStringScanner$i$0$0$reset;
import org.jruby.RubyStringScanner$i$1$0$match_p;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyStringScanner;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyStringScanner$s$0$0$mustCversion;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyStringScanner$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyStringScanner$s$0$0$mustCversion(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "mustCversion", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "mustCversion", IRubyObject.class, new Class[] { IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("must_C_version", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyStringScanner.mustCversion", "must_C_version");
        javaMethod = new RubyStringScanner$i$1$0$match_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "match_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "match_p", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("match?", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$reset(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "reset", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "reset", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("reset", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$get_byte(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "get_byte", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "get_byte", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("get_byte", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$rest_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rest_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "rest_p", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("rest?", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$restsize(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "restsize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "restsize", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("restsize", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$matched_size(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "matched_size", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "matched_size", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("matched_size", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$check(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "check", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "check", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("check", javaMethod);
        javaMethod = new RubyStringScanner$i$3$0$search_full(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 3, "search_full", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "search_full", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("search_full", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$skip_until(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "skip_until", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "skip_until", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("skip_until", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$pre_match(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pre_match", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "pre_match", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("pre_match", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$skip(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "skip", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "skip", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("skip", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$scan(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "scan", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "scan", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("scan", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "string", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "string", RubyString.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("string", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$concat(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "concat", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "concat", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("concat", javaMethod);
        cls.addMethodAtBootTimeOnly("<<", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$empty_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "empty_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "empty_p", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("empty?", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$rest(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rest", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "rest", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("rest", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$clear(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "clear", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "clear", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("clear", javaMethod);
        javaMethod = new RubyStringScanner$i$3$0$scan_full(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 3, "scan_full", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "scan_full", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("scan_full", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$matched_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "matched_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "matched_p", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("matched?", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$getbyte(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "getbyte", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "getbyte", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("getbyte", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$op_aref(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "op_aref", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$post_match(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "post_match", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "post_match", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("post_match", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$eos_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "eos_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "eos_p", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("eos?", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$set_string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_string", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "set_string", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("string=", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$exist_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "exist_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "exist_p", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("exist?", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "inspect", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyStringScanner$i$0$1$initialize(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "initialize", IRubyObject.class, new Class[] { IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$bol_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "bol_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "bol_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("beginning_of_line?", javaMethod);
        cls.defineAlias("bol?", "beginning_of_line?");
        javaMethod = new RubyStringScanner$i$0$0$terminate(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "terminate", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "terminate", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("terminate", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$peek(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "peek", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "peek", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("peek", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$matched(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "matched", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "matched", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("matched", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$rest_size(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rest_size", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "rest_size", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("rest_size", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$pos(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pos", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "pos", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("pos", javaMethod);
        cls.addMethodAtBootTimeOnly("pointer", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$set_pos(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_pos", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "set_pos", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("pos=", javaMethod);
        cls.addMethodAtBootTimeOnly("pointer=", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$initialize_copy(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "initialize_copy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$scan_until(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "scan_until", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "scan_until", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("scan_until", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$unscan(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "unscan", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "unscan", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("unscan", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$check_until(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "check_until", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "check_until", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("check_until", javaMethod);
        javaMethod = new RubyStringScanner$i$1$0$peep(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "peep", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "peep", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("peep", javaMethod);
        javaMethod = new RubyStringScanner$i$0$0$matchedsize(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "matchedsize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringScanner.class, "matchedsize", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("matchedsize", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyStringScanner.match_p", "match?");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.reset", "reset");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.get_byte", "get_byte");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.rest_p", "rest?");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.restsize", "restsize");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.matched_size", "matched_size");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.check", "check");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.search_full", "search_full");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.skip_until", "skip_until");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.pre_match", "pre_match");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.skip", "skip");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.scan", "scan");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.string", "string");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.concat", "concat");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.empty_p", "empty?");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.rest", "rest");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.clear", "clear");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.scan_full", "scan_full");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.matched_p", "matched?");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.getbyte", "getbyte");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.op_aref", "[]");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.post_match", "post_match");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.eos_p", "eos?");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.set_string", "string=");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.exist_p", "exist?");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.initialize", "initialize");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.bol_p", "beginning_of_line?");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.terminate", "terminate");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.peek", "peek");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.matched", "matched");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.rest_size", "rest_size");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.pos", "pos");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.set_pos", "pos=");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.initialize_copy", "initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.scan_until", "scan_until");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.unscan", "unscan");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.check_until", "check_until");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.peep", "peep");
        runtime.addBoundMethod("org.jruby.RubyStringScanner.matchedsize", "matchedsize");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyStringScanner$i$0$0$getch(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "getch", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringScanner.class, "getch", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("getch", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyStringScanner.getch", "getch");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyStringScanner$i$0$0$getch19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "getch19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringScanner.class, "getch19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("getch", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyStringScanner.getch19", "getch");
        }
    }
}
