// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyRational;
import org.jruby.RubyTime$i$0$0$subsec;
import org.jruby.RubyTime$i$1$0$op_equal;
import org.jruby.RubyTime$i$0$0$to_s19;
import org.jruby.RubyTime$i$1$0$op_plus19;
import org.jruby.RubyTime$i$0$0$nsec;
import org.jruby.RubyTime$i$0$0$to_r;
import org.jruby.RubyTime$i$1$0$op_minus19;
import org.jruby.RubyTime$i$0$0$to_s;
import org.jruby.RubyTime$i$1$0$op_plus;
import org.jruby.RubyTime$i$1$0$op_minus;
import org.jruby.RubyTime$i$0$0$gmt;
import org.jruby.RubyTime$i$1$0$initialize_copy;
import org.jruby.RubyTime$i$1$0$op_ge;
import org.jruby.RubyTime$i$0$0$year;
import org.jruby.RubyTime$i$0$0$hour;
import org.jruby.RubyTime$i$0$0$initialize;
import org.jruby.RubyTime$i$1$0$strftime;
import org.jruby.RubyFixnum;
import org.jruby.RubyTime$i$0$0$hash;
import org.jruby.RubyTime$i$0$0$getgm;
import org.jruby.RubyBoolean;
import org.jruby.RubyTime$i$0$0$isdst;
import org.jruby.RubyArray;
import org.jruby.RubyTime$i$0$0$to_a;
import org.jruby.RubyTime$i$1$0$op_eqq;
import org.jruby.RubyFloat;
import org.jruby.RubyTime$i$0$0$to_f;
import org.jruby.RubyTime$i$0$0$localtime;
import org.jruby.RubyTime$i$0$0$mday;
import org.jruby.RubyTime$i$0$0$asctime;
import org.jruby.RubyTime$i$0$0$zone;
import org.jruby.RubyTime$i$0$0$month;
import org.jruby.RubyTime$i$0$0$usec;
import org.jruby.RubyTime$i$0$0$gmtime;
import org.jruby.RubyTime$i$1$0$op_le;
import org.jruby.RubyTime$i$0$0$succ;
import org.jruby.RubyTime$i$1$0$op_lt;
import org.jruby.RubyTime$i$0$0$wday;
import org.jruby.RubyTime$i$0$0$min;
import org.jruby.RubyTime$i$0$0$to_i;
import org.jruby.RubyTime$i$1$0$eql_p;
import org.jruby.RubyTime$i$0$0$sec;
import org.jruby.RubyTime$i$1$0$op_cmp;
import org.jruby.RubyTime$i$0$0$yday;
import org.jruby.RubyInteger;
import org.jruby.RubyTime$i$0$0$gmt_offset;
import org.jruby.RubyTime$i$0$0$getlocal;
import org.jruby.RubyTime$i$1$0$op_gt;
import org.jruby.RubyString;
import org.jruby.RubyTime$i$0$1$dump;
import org.jruby.RubyTime$s$0$10$new19;
import org.jruby.RubyTime$s$0$0$times;
import org.jruby.CompatVersion;
import org.jruby.RubyTime$s$at;
import org.jruby.RubyTime$s$0$9$new_local;
import org.jruby.runtime.Block;
import org.jruby.RubyTime$s$1$0$load;
import org.jruby.runtime.ThreadContext;
import org.jruby.RubyTime$s$0$0$newInstance;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyTime;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyTime$s$0$9$new_utc;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyTime$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyTime$s$0$9$new_utc(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "new_utc", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "new_utc", RubyTime.class, new Class[] { IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("utc", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("gm", javaMethod);
        javaMethod = new RubyTime$s$0$0$newInstance(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "newInstance", true, CallConfiguration.FrameBacktraceScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "newInstance", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("now", javaMethod);
        javaMethod = new RubyTime$s$1$0$load(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "load", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "load", RubyTime.class, new Class[] { IRubyObject.class, IRubyObject.class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("_load", javaMethod);
        javaMethod = new RubyTime$s$0$9$new_local(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "new_local", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "new_local", RubyTime.class, new Class[] { IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("local", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("mktime", javaMethod);
        javaMethod = new RubyTime$s$at(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "at", true, CallConfiguration.FrameNoneScopeNone, false);
        singletonClass.addMethodAtBootTimeOnly("at", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyTime.new_utc", "utc");
        runtime.addBoundMethod("org.jruby.RubyTime.newInstance", "now");
        runtime.addBoundMethod("org.jruby.RubyTime.load", "_load");
        runtime.addBoundMethod("org.jruby.RubyTime.new_local", "local");
        runtime.addBoundMethod("org.jruby.RubyTime.at", "at");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyTime$s$0$0$times(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "times", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "times", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("times", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyTime.times", "times");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyTime$s$0$10$new19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "new19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "new19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("new", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyTime.new19", "new");
        }
        javaMethod = new RubyTime$i$0$1$dump(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "dump", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "dump", RubyString.class, new Class[] { IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("_dump", javaMethod);
        javaMethod = new RubyTime$i$1$0$op_gt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "op_gt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">", javaMethod);
        javaMethod = new RubyTime$i$0$0$getlocal(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "getlocal", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "getlocal", RubyTime.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("getlocal", javaMethod);
        javaMethod = new RubyTime$i$0$0$gmt_offset(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "gmt_offset", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "gmt_offset", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("gmt_offset", javaMethod);
        cls.addMethodAtBootTimeOnly("gmtoff", javaMethod);
        cls.addMethodAtBootTimeOnly("utc_offset", javaMethod);
        javaMethod = new RubyTime$i$0$0$yday(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "yday", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "yday", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("yday", javaMethod);
        javaMethod = new RubyTime$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "op_cmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new RubyTime$i$0$0$sec(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "sec", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "sec", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("sec", javaMethod);
        javaMethod = new RubyTime$i$1$0$eql_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "eql_p", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new RubyTime$i$0$0$to_i(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_i", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "to_i", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        cls.addMethodAtBootTimeOnly("tv_sec", javaMethod);
        javaMethod = new RubyTime$i$0$0$min(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "min", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "min", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("min", javaMethod);
        javaMethod = new RubyTime$i$0$0$wday(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "wday", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "wday", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("wday", javaMethod);
        javaMethod = new RubyTime$i$1$0$op_lt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "op_lt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<", javaMethod);
        javaMethod = new RubyTime$i$0$0$succ(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "succ", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "succ", RubyTime.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("succ", javaMethod);
        javaMethod = new RubyTime$i$1$0$op_le(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "op_le", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=", javaMethod);
        javaMethod = new RubyTime$i$0$0$gmtime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "gmtime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "gmtime", RubyTime.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("gmtime", javaMethod);
        cls.addMethodAtBootTimeOnly("utc", javaMethod);
        javaMethod = new RubyTime$i$0$0$usec(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "usec", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "usec", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("usec", javaMethod);
        cls.addMethodAtBootTimeOnly("tv_usec", javaMethod);
        javaMethod = new RubyTime$i$0$0$month(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "month", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "month", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("month", javaMethod);
        cls.addMethodAtBootTimeOnly("mon", javaMethod);
        javaMethod = new RubyTime$i$0$0$zone(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "zone", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "zone", RubyString.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("zone", javaMethod);
        javaMethod = new RubyTime$i$0$0$asctime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "asctime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "asctime", RubyString.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("asctime", javaMethod);
        cls.addMethodAtBootTimeOnly("ctime", javaMethod);
        javaMethod = new RubyTime$i$0$0$mday(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "mday", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "mday", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("mday", javaMethod);
        cls.addMethodAtBootTimeOnly("day", javaMethod);
        javaMethod = new RubyTime$i$0$0$localtime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "localtime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "localtime", RubyTime.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("localtime", javaMethod);
        javaMethod = new RubyTime$i$0$0$to_f(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "to_f", RubyFloat.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new RubyTime$i$1$0$op_eqq(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_eqq", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "op_eqq", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("===", javaMethod);
        javaMethod = new RubyTime$i$0$0$to_a(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_a", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "to_a", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_a", javaMethod);
        javaMethod = new RubyTime$i$0$0$isdst(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "isdst", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "isdst", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("isdst", javaMethod);
        cls.addMethodAtBootTimeOnly("dst?", javaMethod);
        javaMethod = new RubyTime$i$0$0$getgm(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "getgm", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "getgm", RubyTime.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("getgm", javaMethod);
        cls.addMethodAtBootTimeOnly("getutc", javaMethod);
        javaMethod = new RubyTime$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "hash", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new RubyTime$i$1$0$strftime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "strftime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "strftime", RubyString.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("strftime", javaMethod);
        javaMethod = new RubyTime$i$0$0$initialize(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "initialize", IRubyObject.class, new Class[] { Block.class }, false);
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new RubyTime$i$0$0$hour(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hour", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "hour", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("hour", javaMethod);
        javaMethod = new RubyTime$i$0$0$year(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "year", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "year", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("year", javaMethod);
        javaMethod = new RubyTime$i$1$0$op_ge(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "op_ge", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">=", javaMethod);
        javaMethod = new RubyTime$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "initialize_copy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new RubyTime$i$0$0$gmt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "gmt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyTime.class, "gmt", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("gmt?", javaMethod);
        cls.addMethodAtBootTimeOnly("utc?", javaMethod);
        cls.addMethodAtBootTimeOnly("gmtime?", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyTime.dump", "_dump");
        runtime.addBoundMethod("org.jruby.RubyTime.op_gt", ">");
        runtime.addBoundMethod("org.jruby.RubyTime.getlocal", "getlocal");
        runtime.addBoundMethod("org.jruby.RubyTime.gmt_offset", "gmt_offset");
        runtime.addBoundMethod("org.jruby.RubyTime.yday", "yday");
        runtime.addBoundMethod("org.jruby.RubyTime.op_cmp", "<=>");
        runtime.addBoundMethod("org.jruby.RubyTime.sec", "sec");
        runtime.addBoundMethod("org.jruby.RubyTime.eql_p", "eql?");
        runtime.addBoundMethod("org.jruby.RubyTime.to_i", "to_i");
        runtime.addBoundMethod("org.jruby.RubyTime.min", "min");
        runtime.addBoundMethod("org.jruby.RubyTime.wday", "wday");
        runtime.addBoundMethod("org.jruby.RubyTime.op_lt", "<");
        runtime.addBoundMethod("org.jruby.RubyTime.succ", "succ");
        runtime.addBoundMethod("org.jruby.RubyTime.op_le", "<=");
        runtime.addBoundMethod("org.jruby.RubyTime.gmtime", "gmtime");
        runtime.addBoundMethod("org.jruby.RubyTime.usec", "usec");
        runtime.addBoundMethod("org.jruby.RubyTime.month", "month");
        runtime.addBoundMethod("org.jruby.RubyTime.zone", "zone");
        runtime.addBoundMethod("org.jruby.RubyTime.asctime", "asctime");
        runtime.addBoundMethod("org.jruby.RubyTime.mday", "mday");
        runtime.addBoundMethod("org.jruby.RubyTime.localtime", "localtime");
        runtime.addBoundMethod("org.jruby.RubyTime.to_f", "to_f");
        runtime.addBoundMethod("org.jruby.RubyTime.op_eqq", "===");
        runtime.addBoundMethod("org.jruby.RubyTime.to_a", "to_a");
        runtime.addBoundMethod("org.jruby.RubyTime.isdst", "isdst");
        runtime.addBoundMethod("org.jruby.RubyTime.getgm", "getgm");
        runtime.addBoundMethod("org.jruby.RubyTime.hash", "hash");
        runtime.addBoundMethod("org.jruby.RubyTime.strftime", "strftime");
        runtime.addBoundMethod("org.jruby.RubyTime.initialize", "initialize");
        runtime.addBoundMethod("org.jruby.RubyTime.hour", "hour");
        runtime.addBoundMethod("org.jruby.RubyTime.year", "year");
        runtime.addBoundMethod("org.jruby.RubyTime.op_ge", ">=");
        runtime.addBoundMethod("org.jruby.RubyTime.initialize_copy", "initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyTime.gmt", "gmt?");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyTime$i$1$0$op_minus(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_minus", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "op_minus", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("-", javaMethod);
            javaMethod = new RubyTime$i$1$0$op_plus(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "op_plus", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("+", javaMethod);
            javaMethod = new RubyTime$i$0$0$to_s(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "to_s", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("to_s", javaMethod);
            cls.addMethodAtBootTimeOnly("inspect", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyTime.op_minus", "-");
            runtime.addBoundMethod("org.jruby.RubyTime.op_plus", "+");
            runtime.addBoundMethod("org.jruby.RubyTime.to_s", "to_s");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyTime$i$1$0$op_minus19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_minus19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "op_minus19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("-", javaMethod);
            javaMethod = new RubyTime$i$0$0$to_r(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_r", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "to_r", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("to_r", javaMethod);
            javaMethod = new RubyTime$i$0$0$nsec(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "nsec", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "nsec", RubyInteger.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("nsec", javaMethod);
            cls.addMethodAtBootTimeOnly("tv_nsec", javaMethod);
            javaMethod = new RubyTime$i$1$0$op_plus19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_plus19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "op_plus19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("+", javaMethod);
            javaMethod = new RubyTime$i$0$0$to_s19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_s19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "to_s19", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("to_s", javaMethod);
            cls.addMethodAtBootTimeOnly("inspect", javaMethod);
            javaMethod = new RubyTime$i$1$0$op_equal(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("==", javaMethod);
            javaMethod = new RubyTime$i$0$0$subsec(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "subsec", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyTime.class, "subsec", RubyRational.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("subsec", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyTime.op_minus19", "-");
            runtime.addBoundMethod("org.jruby.RubyTime.to_r", "to_r");
            runtime.addBoundMethod("org.jruby.RubyTime.nsec", "nsec");
            runtime.addBoundMethod("org.jruby.RubyTime.op_plus19", "+");
            runtime.addBoundMethod("org.jruby.RubyTime.to_s19", "to_s");
            runtime.addBoundMethod("org.jruby.RubyTime.op_equal", "==");
            runtime.addBoundMethod("org.jruby.RubyTime.subsec", "subsec");
        }
    }
}
