// 
// Decompiled by Procyon v0.5.30
// 

package webphone;

public class b8
{
    public static final int a = 8;
    private static final short[] do;
    private static final int[] if;
    public static byte[] for;
    
    public String if() {
        return "PCM (A-law)";
    }
    
    public int a() {
        return 8000;
    }
    
    public b8() {
        int n = 0;
        for (int i = 0; i < 65536; ++i) {
            if (i == b8.if[n]) {
                ++n;
            }
            if (n < 128) {
                b8.for[i] = (byte)(n ^ 0x55);
            }
            else {
                b8.for[i] = (byte)(n ^ 0x2A);
            }
        }
    }
    
    public void a(final byte[] array, final int n, final byte[] array2) {
        for (int i = 0; i < n; i += 2) {
            final short n2 = (short)(array[i] << 8 | (array[i + 1] & 0xFF));
            if (n2 < 0) {
                array2[i / 2] = b8.for[n2 + 65536];
            }
            else {
                array2[i / 2] = b8.for[n2];
            }
        }
    }
    
    public void if(final byte[] array, final int n, final byte[] array2) {
        int n2 = 0;
        for (int i = 0; i < n; ++i) {
            short n3;
            if (array[i] < 0) {
                n3 = (byte)b8.do[array[i] + 256];
            }
            else {
                n3 = (byte)b8.do[array[i]];
            }
            array2[n2] = (byte)(n3 >>> 8 & 0xFF);
            ++n2;
            array2[n2] = (byte)(n3 >>> 0 & 0xFF);
            ++n2;
        }
    }
    
    static {
        do = new short[] { -5504, -5248, -6016, -5760, -4480, -4224, -4992, -4736, -7552, -7296, -8064, -7808, -6528, -6272, -7040, -6784, -2752, -2624, -3008, -2880, -2240, -2112, -2496, -2368, -3776, -3648, -4032, -3904, -3264, -3136, -3520, -3392, -22016, -20992, -24064, -23040, -17920, -16896, -19968, -18944, -30208, -29184, -32256, -31232, -26112, -25088, -28160, -27136, -11008, -10496, -12032, -11520, -8960, -8448, -9984, -9472, -15104, -14592, -16128, -15616, -13056, -12544, -14080, -13568, -344, -328, -376, -360, -280, -264, -312, -296, -472, -456, -504, -488, -408, -392, -440, -424, -88, -72, -120, -104, -24, -8, -56, -40, -216, -200, -248, -232, -152, -136, -184, -168, -1376, -1312, -1504, -1440, -1120, -1056, -1248, -1184, -1888, -1824, -2016, -1952, -1632, -1568, -1760, -1696, -688, -656, -752, -720, -560, -528, -624, -592, -944, -912, -1008, -976, -816, -784, -880, -848, 5504, 5248, 6016, 5760, 4480, 4224, 4992, 4736, 7552, 7296, 8064, 7808, 6528, 6272, 7040, 6784, 2752, 2624, 3008, 2880, 2240, 2112, 2496, 2368, 3776, 3648, 4032, 3904, 3264, 3136, 3520, 3392, 22016, 20992, 24064, 23040, 17920, 16896, 19968, 18944, 30208, 29184, 32256, 31232, 26112, 25088, 28160, 27136, 11008, 10496, 12032, 11520, 8960, 8448, 9984, 9472, 15104, 14592, 16128, 15616, 13056, 12544, 14080, 13568, 344, 328, 376, 360, 280, 264, 312, 296, 472, 456, 504, 488, 408, 392, 440, 424, 88, 72, 120, 104, 24, 8, 56, 40, 216, 200, 248, 232, 152, 136, 184, 168, 1376, 1312, 1504, 1440, 1120, 1056, 1248, 1184, 1888, 1824, 2016, 1952, 1632, 1568, 1760, 1696, 688, 656, 752, 720, 560, 528, 624, 592, 944, 912, 1008, 976, 816, 784, 880, 848 };
        if = new int[] { 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432, 448, 464, 480, 496, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2176, 2304, 2432, 2560, 2688, 2816, 2944, 3072, 3200, 3328, 3456, 3584, 3712, 3840, 3968, 4096, 4352, 4608, 4864, 5120, 5376, 5632, 5888, 6144, 6400, 6656, 6912, 7168, 7424, 7680, 7936, 8192, 8704, 9216, 9728, 10240, 10752, 11264, 11776, 12288, 12800, 13312, 13824, 14336, 14848, 15360, 15872, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, 30720, 31744, 32768, 33792, 34816, 35840, 36864, 37888, 38912, 39936, 40960, 41984, 43008, 44032, 45056, 46080, 47104, 48128, 49152, 49664, 50176, 50688, 51200, 51712, 52224, 52736, 53248, 53760, 54272, 54784, 55296, 55808, 56320, 56832, 57344, 57600, 57856, 58112, 58368, 58624, 58880, 59136, 59392, 59648, 59904, 60160, 60416, 60672, 60928, 61184, 61440, 61568, 61696, 61824, 61952, 62080, 62208, 62336, 62464, 62592, 62720, 62848, 62976, 63104, 63232, 63360, 63488, 63552, 63616, 63680, 63744, 63808, 63872, 63936, 64000, 64064, 64128, 64192, 64256, 64320, 64384, 64448, 64512, 64544, 64576, 64608, 64640, 64672, 64704, 64736, 64768, 64800, 64832, 64864, 64896, 64928, 64960, 64992, 65024, 65040, 65056, 65072, 65088, 65104, 65120, 65136, 65152, 65168, 65184, 65200, 65216, 65232, 65248, 65264, 65280, 65296, 65312, 65328, 65344, 65360, 65376, 65392, 65408, 65424, 65440, 65456, 65472, 65488, 65504, 65520, 65536 };
        b8.for = new byte[65536];
    }
}
