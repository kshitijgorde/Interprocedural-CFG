// 
// Decompiled by Procyon v0.5.30
// 

package com.ibm.xml.b2b.util;

public final class EBCDICEncodingSupport extends SingleByteEncodingSupport
{
    public static final int CP037 = 0;
    public static final int CP273 = 1;
    public static final int CP277 = 2;
    public static final int CP278 = 3;
    public static final int CP280 = 4;
    public static final int CP284 = 5;
    public static final int CP285 = 6;
    public static final int CP297 = 7;
    public static final int CP500 = 8;
    public static final int CP871 = 9;
    public static final int CP1047 = 10;
    public static final int CP1140 = 11;
    public static final int CP1141 = 12;
    public static final int CP1142 = 13;
    public static final int CP1143 = 14;
    public static final int CP1144 = 15;
    public static final int CP1145 = 16;
    public static final int CP1146 = 17;
    public static final int CP1147 = 18;
    public static final int CP1148 = 19;
    public static final int CP1149 = 20;
    private static final int ENCODINGS_COUNT = 21;
    private int fEuroValue;
    private byte[] fByteMap;
    private static EncodingSupport[] fgSingletons;
    
    public static EncodingSupport getInstance(final int n) {
        if (n < 0 || n > 20) {
            return null;
        }
        if (EBCDICEncodingSupport.fgSingletons == null) {
            EBCDICEncodingSupport.fgSingletons = new EncodingSupport[21];
        }
        else if (EBCDICEncodingSupport.fgSingletons[n] != null) {
            return EBCDICEncodingSupport.fgSingletons[n];
        }
        EncodingSupport encodingSupport = null;
        switch (n) {
            case 0: {
                encodingSupport = CP037Mappings.createEncodingSupport();
                break;
            }
            case 1: {
                encodingSupport = CP273Mappings.createEncodingSupport();
                break;
            }
            case 2: {
                encodingSupport = CP277Mappings.createEncodingSupport();
                break;
            }
            case 3: {
                encodingSupport = CP278Mappings.createEncodingSupport();
                break;
            }
            case 4: {
                encodingSupport = CP280Mappings.createEncodingSupport();
                break;
            }
            case 5: {
                encodingSupport = CP284Mappings.createEncodingSupport();
                break;
            }
            case 6: {
                encodingSupport = CP285Mappings.createEncodingSupport();
                break;
            }
            case 7: {
                encodingSupport = CP297Mappings.createEncodingSupport();
                break;
            }
            case 8: {
                encodingSupport = CP500Mappings.createEncodingSupport();
                break;
            }
            case 9: {
                encodingSupport = CP871Mappings.createEncodingSupport();
                break;
            }
            case 10: {
                encodingSupport = CP1047Mappings.createEncodingSupport();
                break;
            }
            case 11: {
                encodingSupport = CP1140Mappings.createEncodingSupport();
                break;
            }
            case 12: {
                encodingSupport = CP1141Mappings.createEncodingSupport();
                break;
            }
            case 13: {
                encodingSupport = CP1142Mappings.createEncodingSupport();
                break;
            }
            case 14: {
                encodingSupport = CP1143Mappings.createEncodingSupport();
                break;
            }
            case 15: {
                encodingSupport = CP1144Mappings.createEncodingSupport();
                break;
            }
            case 16: {
                encodingSupport = CP1145Mappings.createEncodingSupport();
                break;
            }
            case 17: {
                encodingSupport = CP1146Mappings.createEncodingSupport();
                break;
            }
            case 18: {
                encodingSupport = CP1147Mappings.createEncodingSupport();
                break;
            }
            case 19: {
                encodingSupport = CP1148Mappings.createEncodingSupport();
                break;
            }
            case 20: {
                encodingSupport = CP1149Mappings.createEncodingSupport();
                break;
            }
            default: {
                return null;
            }
        }
        return EBCDICEncodingSupport.fgSingletons[n] = encodingSupport;
    }
    
    public boolean isASCIITransparent() {
        return false;
    }
    
    public void convertCharsToBytes(final char[] array, int n, final int n2, final byte[][] array2, final int[] array3) {
        byte[] array4 = array2[0];
        int i = array3[0];
        final int j = i + (n2 - n);
        if (j > array4.length) {
            int n3;
            for (n3 = array4.length << 1; j > n3; n3 <<= 1) {}
            array4 = new byte[n3];
            System.arraycopy(array2[0], 0, array4, 0, i);
            array2[0] = array4;
        }
        while (i < j) {
            final char c = array[n++];
            byte b;
            if (c < '\u0100') {
                b = this.fByteMap[c];
            }
            else if (c == '\u20ac' && this.fEuroValue != -1) {
                b = (byte)this.fEuroValue;
            }
            else {
                CharConversionError.unableToConvertOutOfRangeUnicodeCharacter();
                b = -1;
            }
            array4[i++] = b;
        }
        array3[0] = i;
    }
    
    public int encodeCharacter(final int n, final byte[][] array, int n2) {
        byte[] array2 = array[0];
        if (n2 == array2.length) {
            array2 = new byte[array2.length << 1];
            System.arraycopy(array[0], 0, array2, 0, n2);
            array[0] = array2;
        }
        byte b;
        if (n < 256) {
            b = this.fByteMap[n];
        }
        else if (n == 8364 && this.fEuroValue != -1) {
            b = (byte)this.fEuroValue;
        }
        else {
            CharConversionError.unableToConvertOutOfRangeUnicodeCharacter();
            b = -1;
        }
        array2[n2++] = b;
        return n2;
    }
    
    public int normalizeLineBreaks(final byte[] array, int n, final int n2, final boolean[] array2) {
        final char[] byteToCharMap = super.byteToCharMap;
        boolean b = array2[0];
        for (int i = n; i < n2; ++i) {
            byte b2 = array[i];
            final char c = byteToCharMap[b2 & 0xFF];
            if (b) {
                b = false;
                if (c == '\n') {
                    continue;
                }
                if (c == '\u0085') {
                    continue;
                }
            }
            if (c == '\r') {
                b2 = 21;
                b = true;
            }
            else if (c == '\u0085') {
                b2 = 21;
            }
            array[n++] = b2;
        }
        array2[0] = b;
        return n;
    }
    
    protected EBCDICEncodingSupport(final char[] array, final int fEuroValue, final byte[] fByteMap, final byte[] array2, final byte[] array3) {
        super(array, array2, array3);
        this.fEuroValue = fEuroValue;
        this.fByteMap = fByteMap;
    }
    
    static final class CP1149Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 159;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1149Mappings.fgCharMap, 159, CP1149Mappings.fgByteMap, CP1149Mappings.fgContentMap, CP1149Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '\u00de', '.', '<', '(', '+', '!', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '\u00c6', '$', '*', ')', ';', '\u00d6', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '\u00f0', ':', '#', '\u00d0', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '`', '\u00fd', '{', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '}', '¸', ']', '\u20ac', 'µ', '\u00f6', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '@', '\u00dd', '[', '®', '¢', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '\\', '\u00d7', '\u00fe', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '~', '\u00f2', '\u00f3', '\u00f5', '\u00e6', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '´', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '^', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 28, 3, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 8, 3, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1148Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 159;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1148Mappings.fgCharMap, 159, CP1148Mappings.fgByteMap, CP1148Mappings.fgContentMap, CP1148Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '[', '.', '<', '(', '+', '!', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', ']', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '\u20ac', 'µ', '~', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1147Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 159;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1147Mappings.fgCharMap, 159, CP1147Mappings.fgByteMap, CP1147Mappings.fgContentMap, CP1147Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '@', '\u00e1', '\u00e3', '\u00e5', '\\', '\u00f1', '°', '.', '<', '(', '+', '!', '&', '{', '\u00ea', '\u00eb', '}', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '§', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '\u00f9', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', 'µ', ':', '£', '\u00e0', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '[', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '\u20ac', '`', '¨', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '#', '¥', '·', '©', ']', '¶', '¼', '½', '¾', '¬', '|', '¯', '~', '´', '\u00d7', '\u00e9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '\u00e8', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '¦', '\u00fa', '\u00ff', '\u00e7', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 8, 3, 3, 3, 8, 3, 8, 2, 8, 8, 8, 8, 8, 8, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 3, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 8, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1146Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 159;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1146Mappings.fgCharMap, 159, CP1146Mappings.fgByteMap, CP1146Mappings.fgContentMap, CP1146Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '$', '.', '<', '(', '+', '|', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '!', '£', '*', ')', ';', '¬', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '\u20ac', 'µ', '¯', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '[', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '^', ']', '~', '¨', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1145Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 159;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1145Mappings.fgCharMap, 159, CP1145Mappings.fgByteMap, CP1145Mappings.fgContentMap, CP1145Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '¦', '[', '.', '<', '(', '+', '|', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', ']', '$', '*', ')', ';', '¬', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '#', '\u00f1', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '\u00d1', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '\u20ac', 'µ', '¨', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '^', '!', '¯', '~', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 3, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1144Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 159;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1144Mappings.fgCharMap, 159, CP1144Mappings.fgByteMap, CP1144Mappings.fgContentMap, CP1144Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '{', '\u00e1', '\u00e3', '\u00e5', '\\', '\u00f1', '°', '.', '<', '(', '+', '!', '&', ']', '\u00ea', '\u00eb', '}', '\u00ed', '\u00ee', '\u00ef', '~', '\u00df', '\u00e9', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '\u00f2', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '\u00f9', ':', '£', '§', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '[', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '\u20ac', 'µ', '\u00ec', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '#', '¥', '·', '©', '@', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '\u00e0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '¦', '\u00f3', '\u00f5', '\u00e8', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '`', '\u00fa', '\u00ff', '\u00e7', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 8, 3, 3, 3, 8, 3, 8, 2, 8, 8, 8, 8, 8, 8, 3, 3, 8, 3, 3, 3, 8, 3, 3, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 8, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1143Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 90;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1143Mappings.fgCharMap, 90, CP1143Mappings.fgByteMap, CP1143Mappings.fgContentMap, CP1143Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '{', '\u00e0', '\u00e1', '\u00e3', '}', '\u00e7', '\u00f1', '§', '.', '<', '(', '+', '!', '&', '`', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '\u20ac', '\u00c5', '*', ')', ';', '^', '-', '/', '\u00c2', '#', '\u00c0', '\u00c1', '\u00c3', '$', '\u00c7', '\u00d1', '\u00f6', ',', '%', '_', '>', '?', '\u00f8', '\\', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '\u00e9', ':', '\u00c4', '\u00d6', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', ']', 'µ', '\u00fc', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '[', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '\u00e4', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '¦', '\u00f2', '\u00f3', '\u00f5', '\u00e5', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '~', '\u00f9', '\u00fa', '\u00ff', '\u00c9', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '@', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 8, 3, 3, 3, 8, 3, 3, 8, 2, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 8, 28, 8, 2, 12, 3, 8, 3, 3, 3, 8, 3, 3, 3, 8, 8, 3, 16, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1142Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 90;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1142Mappings.fgCharMap, 90, CP1142Mappings.fgByteMap, CP1142Mappings.fgContentMap, CP1142Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '}', '\u00e7', '\u00f1', '#', '.', '<', '(', '+', '!', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '\u20ac', '\u00c5', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '$', '\u00c7', '\u00d1', '\u00f8', ',', '%', '_', '>', '?', '¦', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '\u00c6', '\u00d8', '\'', '=', '\"', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '{', '¸', '[', ']', 'µ', '\u00fc', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '\u00e6', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '\u00e5', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '~', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] { 0, 1, 2, 3, 55, 45, 46, 47, 22, 5, 21, 11, 12, 13, 14, 15, 16, 17, 18, 19, 60, 61, 50, 38, 24, 25, 63, 39, 28, 29, 30, 31, 64, 79, 127, 74, 103, 108, 80, 125, 77, 93, 92, 78, 107, 96, 75, 97, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, 122, 94, 76, 126, 110, 111, -128, -63, -62, -61, -60, -59, -58, -57, -56, -55, -47, -46, -45, -44, -43, -42, -41, -40, -39, -30, -29, -28, -27, -26, -25, -24, -23, -98, -32, -97, 95, 109, 121, -127, -126, -125, -124, -123, -122, -121, -120, -119, -111, -110, -109, -108, -107, -106, -105, -104, -103, -94, -93, -92, -91, -90, -89, -88, -87, -100, -69, 71, -36, 7, 32, 33, 34, 35, 36, 21, 6, 23, 40, 41, 42, 43, 44, 9, 10, 27, 48, 49, 26, 51, 52, 53, 54, 8, 56, 57, 58, 59, 4, 20, 62, -1, 65, -86, -80, -79, 63, -78, 112, -75, -67, -76, -102, -118, -70, -54, -81, -68, -112, -113, -22, -6, -66, -96, -74, -77, -99, -38, -101, -117, -73, -72, -71, -85, 100, 101, 98, 102, 99, 91, 123, 104, 116, 113, 114, 115, 120, 117, 118, 119, -84, 105, -19, -18, -21, -17, -20, -65, 124, -3, -2, -5, -4, -83, -82, 89, 68, 69, 66, 70, 67, -48, -64, 72, 84, 81, 82, 83, 88, 85, 86, 87, -116, 73, -51, -50, -53, -49, -52, -31, 106, -35, -34, -37, -95, -115, -114, -33 };
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 8, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 8, 3, 3, 3, 8, 8, 3, 16, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 3, 3, 8, 24, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1141Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 159;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1141Mappings.fgCharMap, 159, CP1141Mappings.fgByteMap, CP1141Mappings.fgContentMap, CP1141Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '{', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '\u00c4', '.', '<', '(', '+', '!', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '~', '\u00dc', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '[', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '\u00f6', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '§', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '\u20ac', 'µ', '\u00df', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '@', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '\u00e4', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '¦', '\u00f2', '\u00f3', '\u00f5', '\u00fc', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '}', '\u00f9', '\u00fa', '\u00ff', '\u00d6', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\\', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', ']', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 8, 8, 28, 8, 2, 12, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 8, 3, 3, 8 };
        }
    }
    
    static final class CP1140Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = 159;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1140Mappings.fgCharMap, 159, CP1140Mappings.fgByteMap, CP1140Mappings.fgContentMap, CP1140Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '¢', '.', '<', '(', '+', '|', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '!', '$', '*', ')', ';', '¬', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '\u20ac', 'µ', '~', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '^', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '[', ']', '¯', '¨', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP1047Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP1047Mappings.fgCharMap, -1, CP1047Mappings.fgByteMap, CP1047Mappings.fgContentMap, CP1047Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '¢', '.', '<', '(', '+', '|', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '!', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '¤', 'µ', '~', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '[', '\u00de', '®', '¬', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '\u00dd', '¨', '¯', ']', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP871Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP871Mappings.fgCharMap, -1, CP871Mappings.fgByteMap, CP871Mappings.fgContentMap, CP871Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '\u00de', '.', '<', '(', '+', '!', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '\u00c6', '$', '*', ')', ';', '\u00d6', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '\u00f0', ':', '#', '\u00d0', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '`', '\u00fd', '{', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '}', '¸', ']', '¤', 'µ', '\u00f6', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '@', '\u00dd', '[', '®', '¢', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '\\', '\u00d7', '\u00fe', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '~', '\u00f2', '\u00f3', '\u00f5', '\u00e6', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '´', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '^', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 28, 3, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 8, 3, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP500Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP500Mappings.fgCharMap, -1, CP500Mappings.fgByteMap, CP500Mappings.fgContentMap, CP500Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '[', '.', '<', '(', '+', '!', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', ']', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '¤', 'µ', '~', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP297Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP297Mappings.fgCharMap, -1, CP297Mappings.fgByteMap, CP297Mappings.fgContentMap, CP297Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '@', '\u00e1', '\u00e3', '\u00e5', '\\', '\u00f1', '°', '.', '<', '(', '+', '!', '&', '{', '\u00ea', '\u00eb', '}', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '§', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '\u00f9', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', 'µ', ':', '£', '\u00e0', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '[', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '¤', '`', '¨', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '#', '¥', '·', '©', ']', '¶', '¼', '½', '¾', '¬', '|', '¯', '~', '´', '\u00d7', '\u00e9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '\u00e8', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '¦', '\u00fa', '\u00ff', '\u00e7', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 8, 3, 3, 3, 8, 3, 8, 2, 8, 8, 8, 8, 8, 8, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 3, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 8, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP285Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP285Mappings.fgCharMap, -1, CP285Mappings.fgByteMap, CP285Mappings.fgContentMap, CP285Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '$', '.', '<', '(', '+', '|', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '!', '£', '*', ')', ';', '¬', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '¤', 'µ', '¯', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '[', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '^', ']', '~', '¨', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP284Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP284Mappings.fgCharMap, -1, CP284Mappings.fgByteMap, CP284Mappings.fgContentMap, CP284Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '¦', '[', '.', '<', '(', '+', '|', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', ']', '$', '*', ')', ';', '¬', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '#', '\u00f1', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '\u00d1', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '¤', 'µ', '¨', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '^', '!', '¯', '~', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 3, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP280Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP280Mappings.fgCharMap, -1, CP280Mappings.fgByteMap, CP280Mappings.fgContentMap, CP280Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '{', '\u00e1', '\u00e3', '\u00e5', '\\', '\u00f1', '°', '.', '<', '(', '+', '!', '&', ']', '\u00ea', '\u00eb', '}', '\u00ed', '\u00ee', '\u00ef', '~', '\u00df', '\u00e9', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '\u00f2', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '\u00f9', ':', '£', '§', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '[', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '¤', 'µ', '\u00ec', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '#', '¥', '·', '©', '@', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '\u00e0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '¦', '\u00f3', '\u00f5', '\u00e8', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '`', '\u00fa', '\u00ff', '\u00e7', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 8, 3, 3, 3, 8, 3, 8, 2, 8, 8, 8, 8, 8, 8, 3, 3, 8, 3, 3, 3, 8, 3, 3, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 8, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP278Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP278Mappings.fgCharMap, -1, CP278Mappings.fgByteMap, CP278Mappings.fgContentMap, CP278Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '{', '\u00e0', '\u00e1', '\u00e3', '}', '\u00e7', '\u00f1', '§', '.', '<', '(', '+', '!', '&', '`', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '¤', '\u00c5', '*', ')', ';', '^', '-', '/', '\u00c2', '#', '\u00c0', '\u00c1', '\u00c3', '$', '\u00c7', '\u00d1', '\u00f6', ',', '%', '_', '>', '?', '\u00f8', '\\', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '\u00e9', ':', '\u00c4', '\u00d6', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', ']', 'µ', '\u00fc', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '[', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '\u00e4', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '¦', '\u00f2', '\u00f3', '\u00f5', '\u00e5', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '~', '\u00f9', '\u00fa', '\u00ff', '\u00c9', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '@', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 8, 3, 3, 3, 8, 3, 3, 8, 2, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 8, 28, 8, 2, 12, 3, 8, 3, 3, 3, 8, 3, 3, 3, 8, 8, 3, 16, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP277Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP277Mappings.fgCharMap, -1, CP277Mappings.fgByteMap, CP277Mappings.fgContentMap, CP277Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '}', '\u00e7', '\u00f1', '#', '.', '<', '(', '+', '!', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '¤', '\u00c5', '*', ')', ';', '^', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '$', '\u00c7', '\u00d1', '\u00f8', ',', '%', '_', '>', '?', '¦', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '\u00c6', '\u00d8', '\'', '=', '\"', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '{', '¸', '[', ']', 'µ', '\u00fc', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '\u00e6', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '\u00e5', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '~', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] { 0, 1, 2, 3, 55, 45, 46, 47, 22, 5, 21, 11, 12, 13, 14, 15, 16, 17, 18, 19, 60, 61, 50, 38, 24, 25, 63, 39, 28, 29, 30, 31, 64, 79, 127, 74, 103, 108, 80, 125, 77, 93, 92, 78, 107, 96, 75, 97, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, 122, 94, 76, 126, 110, 111, -128, -63, -62, -61, -60, -59, -58, -57, -56, -55, -47, -46, -45, -44, -43, -42, -41, -40, -39, -30, -29, -28, -27, -26, -25, -24, -23, -98, -32, -97, 95, 109, 121, -127, -126, -125, -124, -123, -122, -121, -120, -119, -111, -110, -109, -108, -107, -106, -105, -104, -103, -94, -93, -92, -91, -90, -89, -88, -87, -100, -69, 71, -36, 7, 32, 33, 34, 35, 36, 21, 6, 23, 40, 41, 42, 43, 44, 9, 10, 27, 48, 49, 26, 51, 52, 53, 54, 8, 56, 57, 58, 59, 4, 20, 62, -1, 65, -86, -80, -79, 90, -78, 112, -75, -67, -76, -102, -118, -70, -54, -81, -68, -112, -113, -22, -6, -66, -96, -74, -77, -99, -38, -101, -117, -73, -72, -71, -85, 100, 101, 98, 102, 99, 91, 123, 104, 116, 113, 114, 115, 120, 117, 118, 119, -84, 105, -19, -18, -21, -17, -20, -65, 124, -3, -2, -5, -4, -83, -82, 89, 68, 69, 66, 70, 67, -48, -64, 72, 84, 81, 82, 83, 88, 85, 86, 87, -116, 73, -51, -50, -53, -49, -52, -31, 106, -35, -34, -37, -95, -115, -114, -33 };
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 8, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 8, 3, 3, 3, 8, 8, 3, 16, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 3, 3, 8, 24, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
    
    static final class CP273Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP273Mappings.fgCharMap, -1, CP273Mappings.fgByteMap, CP273Mappings.fgContentMap, CP273Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '{', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '\u00c4', '.', '<', '(', '+', '!', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '~', '\u00dc', '$', '*', ')', ';', '^', '-', '/', '\u00c2', '[', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '\u00f6', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '§', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '¤', 'µ', '\u00df', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '¢', '£', '¥', '·', '©', '@', '¶', '¼', '½', '¾', '¬', '|', '¯', '¨', '´', '\u00d7', '\u00e4', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '¦', '\u00f2', '\u00f3', '\u00f5', '\u00fc', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '}', '\u00f9', '\u00fa', '\u00ff', '\u00d6', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\\', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', ']', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 8, 8, 28, 8, 2, 12, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 8, 3, 3, 8 };
        }
    }
    
    static final class CP037Mappings
    {
        static final char[] fgCharMap;
        static final int fgEuroValue = -1;
        static final byte[] fgByteMap;
        static final byte[] fgContentMap;
        static final byte[] fgNameCharMap;
        
        static EncodingSupport createEncodingSupport() {
            return new EBCDICEncodingSupport(CP037Mappings.fgCharMap, -1, CP037Mappings.fgByteMap, CP037Mappings.fgContentMap, CP037Mappings.fgNameCharMap);
        }
        
        static {
            fgCharMap = new char[] { '\0', '\u0001', '\u0002', '\u0003', '\u009c', '\t', '\u0086', '\u007f', '\u0097', '\u008d', '\u008e', '\u000b', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', '\u009d', '\n', '\b', '\u0087', '\u0018', '\u0019', '\u0092', '\u008f', '\u001c', '\u001d', '\u001e', '\u001f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\n', '\u0017', '\u001b', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u0005', '\u0006', '\u0007', '\u0090', '\u0091', '\u0016', '\u0093', '\u0094', '\u0095', '\u0096', '\u0004', '\u0098', '\u0099', '\u009a', '\u009b', '\u0014', '\u0015', '\u009e', '\u001a', ' ', ' ', '\u00e2', '\u00e4', '\u00e0', '\u00e1', '\u00e3', '\u00e5', '\u00e7', '\u00f1', '¢', '.', '<', '(', '+', '|', '&', '\u00e9', '\u00ea', '\u00eb', '\u00e8', '\u00ed', '\u00ee', '\u00ef', '\u00ec', '\u00df', '!', '$', '*', ')', ';', '¬', '-', '/', '\u00c2', '\u00c4', '\u00c0', '\u00c1', '\u00c3', '\u00c5', '\u00c7', '\u00d1', '¦', ',', '%', '_', '>', '?', '\u00f8', '\u00c9', '\u00ca', '\u00cb', '\u00c8', '\u00cd', '\u00ce', '\u00cf', '\u00cc', '`', ':', '#', '@', '\'', '=', '\"', '\u00d8', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '«', '»', '\u00f0', '\u00fd', '\u00fe', '±', '°', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'ª', 'º', '\u00e6', '¸', '\u00c6', '¤', 'µ', '~', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '¡', '¿', '\u00d0', '\u00dd', '\u00de', '®', '^', '£', '¥', '·', '©', '§', '¶', '¼', '½', '¾', '[', ']', '¯', '¨', '´', '\u00d7', '{', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', '\u00ad', '\u00f4', '\u00f6', '\u00f2', '\u00f3', '\u00f5', '}', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', '¹', '\u00fb', '\u00fc', '\u00f9', '\u00fa', '\u00ff', '\\', '\u00f7', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '²', '\u00d4', '\u00d6', '\u00d2', '\u00d3', '\u00d5', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '³', '\u00db', '\u00dc', '\u00d9', '\u00da', '\u009f' };
            fgByteMap = new byte[] {};
            fgContentMap = new byte[] { 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            fgNameCharMap = new byte[] { 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 28, 8, 2, 12, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 3, 16, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 8, 8, 8, 24, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 8, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 8 };
        }
    }
}
