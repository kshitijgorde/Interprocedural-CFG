// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyMatchData$i$1$0$begin19;
import org.jruby.RubyMatchData$i$1$0$offset19;
import org.jruby.RubyMatchData$i$op_aref19;
import org.jruby.RubyMatchData$i$0$0$regexp;
import org.jruby.RubyMatchData$i$0$0$names;
import org.jruby.RubyMatchData$i$1$0$end19;
import org.jruby.RubyMatchData$i$1$0$eql_p;
import org.jruby.runtime.Block;
import org.jruby.RubyMatchData$i$0$0$select;
import org.jruby.RubyMatchData$i$1$0$begin;
import org.jruby.RubyMatchData$i$1$0$offset;
import org.jruby.RubyMatchData$i$1$0$end;
import org.jruby.CompatVersion;
import org.jruby.RubyMatchData$i$0$0$to_s;
import org.jruby.RubyMatchData$i$0$0$size;
import org.jruby.RubyMatchData$i$0$0$post_match;
import org.jruby.RubyMatchData$i$op_aref;
import org.jruby.RubyMatchData$i$0$0$values_at;
import org.jruby.RubyMatchData$i$0$0$captures;
import org.jruby.RubyMatchData$i$1$0$initialize_copy;
import org.jruby.RubyArray;
import org.jruby.RubyMatchData$i$0$0$to_a;
import org.jruby.runtime.ThreadContext;
import org.jruby.RubyMatchData$i$0$0$pre_match;
import org.jruby.RubyMatchData$i$0$0$string;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyMatchData;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyMatchData$i$0$0$inspect;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyMatchData$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyMatchData$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "inspect", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyMatchData$i$0$0$string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "string", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "string", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("string", javaMethod);
        javaMethod = new RubyMatchData$i$0$0$pre_match(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pre_match", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "pre_match", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("pre_match", javaMethod);
        javaMethod = new RubyMatchData$i$0$0$to_a(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_a", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "to_a", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_a", javaMethod);
        javaMethod = new RubyMatchData$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "initialize_copy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new RubyMatchData$i$0$0$captures(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "captures", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "captures", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("captures", javaMethod);
        javaMethod = new RubyMatchData$i$0$0$values_at(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "values_at", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "values_at", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("values_at", javaMethod);
        javaMethod = new RubyMatchData$i$op_aref(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new RubyMatchData$i$0$0$post_match(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "post_match", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "post_match", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("post_match", javaMethod);
        javaMethod = new RubyMatchData$i$0$0$size(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "size", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "size", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        javaMethod = new RubyMatchData$i$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyMatchData.class, "to_s", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyMatchData.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyMatchData.string", "string");
        runtime.addBoundMethod("org.jruby.RubyMatchData.pre_match", "pre_match");
        runtime.addBoundMethod("org.jruby.RubyMatchData.to_a", "to_a");
        runtime.addBoundMethod("org.jruby.RubyMatchData.initialize_copy", "initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyMatchData.captures", "captures");
        runtime.addBoundMethod("org.jruby.RubyMatchData.values_at", "values_at");
        runtime.addBoundMethod("org.jruby.RubyMatchData.op_aref", "[]");
        runtime.addBoundMethod("org.jruby.RubyMatchData.post_match", "post_match");
        runtime.addBoundMethod("org.jruby.RubyMatchData.size", "size");
        runtime.addBoundMethod("org.jruby.RubyMatchData.to_s", "to_s");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyMatchData$i$1$0$end(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "end", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "end", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("end", javaMethod);
            javaMethod = new RubyMatchData$i$1$0$offset(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "offset", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "offset", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("offset", javaMethod);
            javaMethod = new RubyMatchData$i$1$0$begin(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "begin", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "begin", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("begin", javaMethod);
            javaMethod = new RubyMatchData$i$0$0$select(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "select", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "select", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("select", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyMatchData.end", "end");
            runtime.addBoundMethod("org.jruby.RubyMatchData.offset", "offset");
            runtime.addBoundMethod("org.jruby.RubyMatchData.begin", "begin");
            runtime.addBoundMethod("org.jruby.RubyMatchData.select", "select");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyMatchData$i$1$0$eql_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "eql_p", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("eql?", javaMethod);
            cls.addMethodAtBootTimeOnly("==", javaMethod);
            javaMethod = new RubyMatchData$i$1$0$end19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "end19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "end19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("end", javaMethod);
            javaMethod = new RubyMatchData$i$0$0$names(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "names", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "names", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("names", javaMethod);
            javaMethod = new RubyMatchData$i$0$0$regexp(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "regexp", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "regexp", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("regexp", javaMethod);
            javaMethod = new RubyMatchData$i$op_aref19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "op_aref19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("[]", javaMethod);
            javaMethod = new RubyMatchData$i$1$0$offset19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "offset19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "offset19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("offset", javaMethod);
            javaMethod = new RubyMatchData$i$1$0$begin19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "begin19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyMatchData.class, "begin19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("begin", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyMatchData.eql_p", "eql?");
            runtime.addBoundMethod("org.jruby.RubyMatchData.end19", "end");
            runtime.addBoundMethod("org.jruby.RubyMatchData.names", "names");
            runtime.addBoundMethod("org.jruby.RubyMatchData.regexp", "regexp");
            runtime.addBoundMethod("org.jruby.RubyMatchData.op_aref19", "[]");
            runtime.addBoundMethod("org.jruby.RubyMatchData.offset19", "offset");
            runtime.addBoundMethod("org.jruby.RubyMatchData.begin19", "begin");
        }
    }
}
