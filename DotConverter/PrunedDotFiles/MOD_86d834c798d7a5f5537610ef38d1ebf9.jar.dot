digraph "" {
"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>";
 "staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>"->"goto load.r r0";
 "goto load.r r0"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>";
 "staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>"->"goto load.r r0";
 "goto load.r r0"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>";
 "staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>"->"goto load.r r0";
 "goto load.r r0"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"new java.net.URL";
 "new java.net.URL"->"virtualinvoke <java.applet.Applet: java.net.URL getCodeBase()>";
 "virtualinvoke <java.applet.Applet: java.net.URL getCodeBase()>"->"specialinvoke <java.net.URL: void <init>(java.net.URL,java.lang.String)>";
 "specialinvoke <java.net.URL: void <init>(java.net.URL,java.lang.String)>"->"fieldput <SlidePuzzle: java.net.URL imageURL>";
 "fieldput <SlidePuzzle: java.net.URL imageURL>"->"goto load.r r0";
 "goto load.r r0"->"fieldget <SlidePuzzle: java.net.URL imageURL>";
 "fieldget <SlidePuzzle: java.net.URL imageURL>"->"staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>";
 "staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>"->"fieldget <SlidePuzzle: java.net.URL imageURL>";
 "fieldget <SlidePuzzle: java.net.URL imageURL>"->"virtualinvoke <java.net.URL: java.lang.String getFile()>";
 "virtualinvoke <java.net.URL: java.lang.String getFile()>"->"virtualinvoke <java.lang.String: int lastIndexOf(java.lang.String)>";
 "virtualinvoke <java.lang.String: int lastIndexOf(java.lang.String)>"->"virtualinvoke <java.lang.String: int lastIndexOf(java.lang.String)>";
 "virtualinvoke <java.lang.String: int lastIndexOf(java.lang.String)>"->"virtualinvoke <java.lang.String: java.lang.String substring(int)>";
 "virtualinvoke <java.lang.String: java.lang.String substring(int)>"->"goto load.r r0";
 "goto load.r r0"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"ifnull new java.lang.NumberFormatException";
 "ifnull new java.lang.NumberFormatException"->"specialinvoke <SlidePuzzle: java.awt.Color parseColorString(java.lang.String)>";
 "specialinvoke <SlidePuzzle: java.awt.Color parseColorString(java.lang.String)>"->"fieldput <SlidePuzzle: java.awt.Color backgroundColor>";
 "fieldput <SlidePuzzle: java.awt.Color backgroundColor>"->"goto load.r r0";
 "goto load.r r0"->"fieldget <SlidePuzzle: java.awt.Color backgroundColor>";
 "fieldget <SlidePuzzle: java.awt.Color backgroundColor>"->"virtualinvoke <java.awt.Component: void setBackground(java.awt.Color)>";
 "virtualinvoke <java.awt.Component: void setBackground(java.awt.Color)>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"ifnull new java.lang.NumberFormatException";
 "ifnull new java.lang.NumberFormatException"->"specialinvoke <SlidePuzzle: java.awt.Color parseColorString(java.lang.String)>";
 "specialinvoke <SlidePuzzle: java.awt.Color parseColorString(java.lang.String)>"->"fieldput <SlidePuzzle: java.awt.Color emptySpaceColor>";
 "fieldput <SlidePuzzle: java.awt.Color emptySpaceColor>"->"goto load.r r0";
 "goto load.r r0"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <java.lang.String: java.lang.String toLowerCase()>";
 "virtualinvoke <java.lang.String: java.lang.String toLowerCase()>"->"virtualinvoke <java.lang.String: boolean equals(java.lang.Object)>";
 "virtualinvoke <java.lang.String: boolean equals(java.lang.Object)>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <java.lang.String: java.lang.String toLowerCase()>";
 "virtualinvoke <java.lang.String: java.lang.String toLowerCase()>"->"virtualinvoke <java.lang.String: boolean equals(java.lang.Object)>";
 "virtualinvoke <java.lang.String: boolean equals(java.lang.Object)>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <java.lang.String: java.lang.String toLowerCase()>";
 "virtualinvoke <java.lang.String: java.lang.String toLowerCase()>"->"virtualinvoke <java.lang.String: boolean equals(java.lang.Object)>";
 "virtualinvoke <java.lang.String: boolean equals(java.lang.Object)>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <java.lang.String: java.lang.String toLowerCase()>";
 "virtualinvoke <java.lang.String: java.lang.String toLowerCase()>"->"virtualinvoke <java.lang.String: boolean equals(java.lang.Object)>";
 "virtualinvoke <java.lang.String: boolean equals(java.lang.Object)>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"fieldput <SlidePuzzle: java.lang.String solveThePuzzleText>";
 "fieldput <SlidePuzzle: java.lang.String solveThePuzzleText>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"fieldput <SlidePuzzle: java.lang.String imageStillLoadingText>";
 "fieldput <SlidePuzzle: java.lang.String imageStillLoadingText>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"fieldput <SlidePuzzle: java.lang.String userHasWonText>";
 "fieldput <SlidePuzzle: java.lang.String userHasWonText>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"fieldput <SlidePuzzle: java.lang.String timeText>";
 "fieldput <SlidePuzzle: java.lang.String timeText>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"fieldput <SlidePuzzle: java.lang.String movesText>";
 "fieldput <SlidePuzzle: java.lang.String movesText>"->"virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <java.applet.Applet: java.lang.String getParameter(java.lang.String)>"->"fieldput <SlidePuzzle: java.lang.String scrambleText>";
 "fieldput <SlidePuzzle: java.lang.String scrambleText>"->"new java.awt.FlowLayout";
 "new java.awt.FlowLayout"->"specialinvoke <java.awt.FlowLayout: void <init>(int,int,int)>";
 "specialinvoke <java.awt.FlowLayout: void <init>(int,int,int)>"->"virtualinvoke <java.awt.Container: void setLayout(java.awt.LayoutManager)>";
 "virtualinvoke <java.awt.Container: void setLayout(java.awt.LayoutManager)>"->"specialinvoke <ControlFramedArea: void <init>(SlidePuzzle,java.lang.String)>";
 "specialinvoke <ControlFramedArea: void <init>(SlidePuzzle,java.lang.String)>"->"new java.awt.Color";
 "new java.awt.Color"->"specialinvoke <java.awt.Color: void <init>(int,int,int)>";
 "specialinvoke <java.awt.Color: void <init>(int,int,int)>"->"virtualinvoke <java.awt.Component: void setBackground(java.awt.Color)>";
 "virtualinvoke <java.awt.Component: void setBackground(java.awt.Color)>"->"specialinvoke <PuzzleFramedArea: void <init>(SlidePuzzle,java.lang.String)>";
 "specialinvoke <PuzzleFramedArea: void <init>(SlidePuzzle,java.lang.String)>"->"virtualinvoke <java.awt.Container: java.awt.Component add(java.awt.Component)>";
 "virtualinvoke <java.awt.Container: java.awt.Component add(java.awt.Component)>"->"virtualinvoke <java.awt.Container: java.awt.Component add(java.awt.Component)>";
 "virtualinvoke <java.awt.Container: java.awt.Component add(java.awt.Component)>"->"virtualinvoke <java.awt.Container: void validate()>";
 "virtualinvoke <java.awt.Container: void validate()>"->"return";
 "specialinvoke <SlidePuzzle: java.awt.Color parseColorString(java.lang.String)>"->"staticget <java.awt.Color: java.awt.Color white>";
 "staticget <java.awt.Color: java.awt.Color white>"->"fieldput <SlidePuzzle: java.awt.Color emptySpaceColor>";
 "ifnull new java.lang.NumberFormatException"->"new java.lang.NumberFormatException";
 "new java.lang.NumberFormatException"->"specialinvoke <java.lang.NumberFormatException: void <init>()>";
 "specialinvoke <java.lang.NumberFormatException: void <init>()>"-> "specialinvoke <SlidePuzzle: java.awt.Color parseColorString(java.lang.String)>"->"staticget <java.awt.Color: java.awt.Color white>";
 "staticget <java.awt.Color: java.awt.Color white>"->"fieldput <SlidePuzzle: java.awt.Color backgroundColor>";
 "ifnull new java.lang.NumberFormatException"->"new java.lang.NumberFormatException";
 "new java.lang.NumberFormatException"->"specialinvoke <java.lang.NumberFormatException: void <init>()>";
 "specialinvoke <java.lang.NumberFormatException: void <init>()>"-> "specialinvoke <java.net.URL: void <init>(java.net.URL,java.lang.String)>"-> "staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>"->"goto load.r r0";
 "staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>"->"goto load.r r0";
 "staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>"->"goto load.r r0";
}
