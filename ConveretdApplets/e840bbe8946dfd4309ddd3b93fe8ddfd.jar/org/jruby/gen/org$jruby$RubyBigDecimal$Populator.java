// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyBigDecimal$i$0$1$floor19;
import org.jruby.RubyBigDecimal$i$0$0$to_int19;
import org.jruby.RubyBigDecimal$i$0$1$ceil19;
import org.jruby.RubyBigDecimal$i$0$0$to_int;
import org.jruby.CompatVersion;
import org.jruby.RubyBigDecimal$i$1$0$op_mod;
import org.jruby.RubyBigDecimal$i$1$0$remainder;
import org.jruby.RubyBigDecimal$i$0$0$nan_p;
import org.jruby.RubyBigDecimal$i$0$0$finite_p;
import org.jruby.RubyBigDecimal$i$1$0$op_ge;
import org.jruby.RubyBigDecimal$i$0$0$exponent;
import org.jruby.RubyBigDecimal$i$1$0$coerce;
import org.jruby.RubyBigDecimal$i$0$1$ceil;
import org.jruby.RubyBigDecimal$i$1$0$op_minus;
import org.jruby.RubyBigDecimal$i$0$0$inspect;
import org.jruby.RubyFixnum;
import org.jruby.RubyBigDecimal$i$0$0$hash;
import org.jruby.RubyBigDecimal$i$0$1$floor;
import org.jruby.RubyArray;
import org.jruby.RubyBigDecimal$i$0$0$split;
import org.jruby.RubyBigDecimal$i$0$0$infinite_p;
import org.jruby.RubyBigDecimal$i$0$0$to_f;
import org.jruby.RubyBigDecimal$i$0$0$frac;
import org.jruby.RubyBigDecimal$i$2$0$add2;
import org.jruby.RubyBigDecimal$i$1$0$op_quo;
import org.jruby.RubyBigDecimal$i$1$0$divmod;
import org.jruby.RubyBigDecimal$i$1$0$op_le;
import org.jruby.RubyBigDecimal$i$1$0$op_mul;
import org.jruby.RubyBigDecimal$i$0$0$nonzero_p;
import org.jruby.RubyBigDecimal$i$1$0$op_lt;
import org.jruby.RubyBigDecimal$i$truncate;
import org.jruby.RubyBigDecimal$i$0$0$fix;
import org.jruby.RubyBigDecimal$i$op_div;
import org.jruby.RubyBigDecimal$i$0$0$op_uplus;
import org.jruby.RubyBigDecimal$i$1$0$eql_p;
import org.jruby.RubyBigDecimal$i$1$0$op_cmp;
import org.jruby.RubyBigDecimal$i$2$0$mult2;
import org.jruby.RubyBigDecimal$i$0$0$sign;
import org.jruby.RubyBigDecimal$i$0$0$precs;
import org.jruby.RubyBigDecimal$i$1$0$sqrt;
import org.jruby.RubyBigDecimal$i$1$0$op_pow;
import org.jruby.RubyBigDecimal$i$0$1$to_s;
import org.jruby.RubyBigDecimal$i$0$0$zero_p;
import org.jruby.RubyBigDecimal$i$1$0$op_plus;
import org.jruby.RubyBigDecimal$i$2$0$sub2;
import org.jruby.RubyBigDecimal$i$0$2$round;
import org.jruby.RubyBigDecimal$i$0$0$op_uminus;
import org.jruby.RubyBigDecimal$i$0$0$abs;
import org.jruby.RubyBigDecimal$i$1$0$op_gt;
import org.jruby.RubyBigDecimal$i$0$1$dump;
import org.jruby.RubyBigDecimal$s$0$0$ver;
import org.jruby.RubyBigDecimal$s$0$1$newInstance;
import org.jruby.runtime.ThreadContext;
import org.jruby.RubyBigDecimal$s$0$1$mode;
import org.jruby.RubyBigDecimal$s$0$1$limit;
import org.jruby.runtime.Block;
import org.jruby.RubyBigDecimal$s$1$0$load;
import org.jruby.RubyBigDecimal$s$1$0$induced_from;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyBigDecimal;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyBigDecimal$s$0$0$double_fig;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyBigDecimal$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyBigDecimal$s$0$0$double_fig(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "double_fig", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "double_fig", IRubyObject.class, new Class[] { IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("double_fig", javaMethod);
        javaMethod = new RubyBigDecimal$s$1$0$induced_from(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "induced_from", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "induced_from", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("induced_from", javaMethod);
        javaMethod = new RubyBigDecimal$s$1$0$load(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "load", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "load", RubyBigDecimal.class, new Class[] { IRubyObject.class, IRubyObject.class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("_load", javaMethod);
        javaMethod = new RubyBigDecimal$s$0$1$limit(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "limit", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "limit", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("limit", javaMethod);
        javaMethod = new RubyBigDecimal$s$0$1$mode(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "mode", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "mode", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("mode", javaMethod);
        javaMethod = new RubyBigDecimal$s$0$1$newInstance(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "newInstance", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "newInstance", RubyBigDecimal.class, new Class[] { IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("new", javaMethod);
        javaMethod = new RubyBigDecimal$s$0$0$ver(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "ver", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "ver", IRubyObject.class, new Class[] { IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("ver", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.double_fig", "double_fig");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.induced_from", "induced_from");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.load", "_load");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.limit", "limit");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.mode", "mode");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.newInstance", "new");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.ver", "ver");
        javaMethod = new RubyBigDecimal$i$0$1$dump(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "dump", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "dump", IRubyObject.class, new Class[] { IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("_dump", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_gt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_gt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$abs(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "abs", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "abs", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("abs", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$op_uminus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "op_uminus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_uminus", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("-@", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$2$round(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "round", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "round", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("round", javaMethod);
        javaMethod = new RubyBigDecimal$i$2$0$sub2(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "sub2", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "sub2", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("sub", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_plus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_plus", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$zero_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "zero_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "zero_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("zero?", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$1$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "to_s", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_pow(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_pow", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_pow", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("**", javaMethod);
        cls.addMethodAtBootTimeOnly("power", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$sqrt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "sqrt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "sqrt", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("sqrt", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$precs(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "precs", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "precs", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("precs", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$sign(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "sign", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "sign", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("sign", javaMethod);
        javaMethod = new RubyBigDecimal$i$2$0$mult2(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "mult2", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "mult2", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("mult", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_cmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$eql_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "eql_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        cls.addMethodAtBootTimeOnly("===", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$op_uplus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "op_uplus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_uplus", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("+@", javaMethod);
        javaMethod = new RubyBigDecimal$i$op_div(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "op_div", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("div", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$fix(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "fix", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "fix", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("fix", javaMethod);
        javaMethod = new RubyBigDecimal$i$truncate(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "truncate", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("truncate", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_lt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_lt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$nonzero_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "nonzero_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "nonzero_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("nonzero?", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_mul(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_mul", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_le(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_le", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$divmod(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "divmod", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "divmod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("divmod", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_quo(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_quo", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_quo", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("/", javaMethod);
        cls.addMethodAtBootTimeOnly("quo", javaMethod);
        javaMethod = new RubyBigDecimal$i$2$0$add2(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "add2", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "add2", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("add", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$frac(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "frac", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "frac", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("frac", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$to_f(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "to_f", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$infinite_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "infinite_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "infinite_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("infinite?", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$split(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "split", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "split", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("split", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$1$floor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "floor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "floor", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("floor", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "hash", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "inspect", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_minus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_minus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_minus", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("-", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$1$ceil(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "ceil", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "ceil", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("ceil", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$coerce(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "coerce", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "coerce", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("coerce", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$exponent(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "exponent", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "exponent", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("exponent", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_ge(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_ge", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">=", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$finite_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "finite_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "finite_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("finite?", javaMethod);
        javaMethod = new RubyBigDecimal$i$0$0$nan_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "nan_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "nan_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("nan?", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$remainder(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "remainder", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "remainder", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("remainder", javaMethod);
        javaMethod = new RubyBigDecimal$i$1$0$op_mod(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_mod", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyBigDecimal.class, "op_mod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("%", javaMethod);
        cls.addMethodAtBootTimeOnly("modulo", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.dump", "_dump");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_gt", ">");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.abs", "abs");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_uminus", "-@");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.round", "round");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.sub2", "sub");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_plus", "+");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.zero_p", "zero?");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_pow", "**");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.sqrt", "sqrt");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.precs", "precs");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.sign", "sign");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.mult2", "mult");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_cmp", "<=>");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.eql_p", "eql?");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_uplus", "+@");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_div", "div");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.fix", "fix");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.truncate", "truncate");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_lt", "<");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.nonzero_p", "nonzero?");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_mul", "*");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_le", "<=");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.divmod", "divmod");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_quo", "/");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.add2", "add");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.frac", "frac");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.to_f", "to_f");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.infinite_p", "infinite?");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.split", "split");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.floor", "floor");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.hash", "hash");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_minus", "-");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.ceil", "ceil");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.coerce", "coerce");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.exponent", "exponent");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_ge", ">=");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.finite_p", "finite?");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.nan_p", "nan?");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.remainder", "remainder");
        runtime.addBoundMethod("org.jruby.RubyBigDecimal.op_mod", "%");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyBigDecimal$i$0$0$to_int(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_int", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyBigDecimal.class, "to_int", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("to_i", javaMethod);
            cls.addMethodAtBootTimeOnly("to_int", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyBigDecimal.to_int", "to_i");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyBigDecimal$i$0$1$ceil19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "ceil19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyBigDecimal.class, "ceil19", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("ceil", javaMethod);
            javaMethod = new RubyBigDecimal$i$0$0$to_int19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_int19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyBigDecimal.class, "to_int19", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("to_i", javaMethod);
            cls.addMethodAtBootTimeOnly("to_int", javaMethod);
            javaMethod = new RubyBigDecimal$i$0$1$floor19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "floor19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyBigDecimal.class, "floor19", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("floor", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyBigDecimal.ceil19", "ceil");
            runtime.addBoundMethod("org.jruby.RubyBigDecimal.to_int19", "to_i");
            runtime.addBoundMethod("org.jruby.RubyBigDecimal.floor19", "floor");
        }
    }
}
