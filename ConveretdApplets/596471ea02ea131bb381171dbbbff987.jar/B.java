// 
// Decompiled by Procyon v0.5.30
// 

public final class B
{
    private static int[] a;
    
    public static int[] a() {
        if (B.a == null) {
            B.a = new int[256];
            for (int i = 0; i < 256; ++i) {
                B.a[i] = 255;
            }
            a(0, 105, 5, 2, 2);
            a(0, 101, 0, 2, 3);
            a(0, 117, 6, 2, 4);
            a(0, 109, 3, 3, 4);
            a(0, 125, 8, 3, 4);
            a(0, 121, 9, 3, 4);
            a(0, 97, 10, 2, 6);
            a(0, 113, 11, 2, 5);
            a(1, 41, 5, 2, 2);
            a(1, 37, 0, 2, 3);
            a(1, 53, 6, 2, 4);
            a(1, 45, 3, 3, 4);
            a(1, 61, 8, 3, 4);
            a(1, 57, 9, 3, 4);
            a(1, 33, 10, 2, 6);
            a(1, 49, 11, 2, 5);
            a(2, 10, 4, 1, 2);
            a(2, 6, 0, 2, 5);
            a(2, 22, 6, 2, 6);
            a(2, 14, 3, 3, 6);
            a(2, 30, 8, 3, 7);
            a(3, 144, 1, 2, 2);
            a(4, 176, 1, 2, 2);
            a(5, 240, 1, 2, 2);
            a(6, 36, 0, 2, 3);
            a(6, 44, 3, 3, 4);
            a(7, 48, 1, 2, 2);
            a(8, 208, 1, 2, 2);
            a(9, 16, 1, 2, 2);
            a(10, 0, 2, 1, 7);
            a(11, 80, 1, 2, 2);
            a(12, 112, 1, 2, 2);
            a(13, 24, 2, 1, 2);
            a(14, 216, 2, 1, 2);
            a(15, 88, 2, 1, 2);
            a(16, 184, 2, 1, 2);
            a(17, 201, 5, 2, 2);
            a(17, 197, 0, 2, 3);
            a(17, 213, 6, 2, 4);
            a(17, 205, 3, 3, 4);
            a(17, 221, 8, 3, 4);
            a(17, 217, 9, 3, 4);
            a(17, 193, 10, 2, 6);
            a(17, 209, 11, 2, 5);
            a(18, 224, 5, 2, 2);
            a(18, 228, 0, 2, 3);
            a(18, 236, 3, 3, 4);
            a(19, 192, 5, 2, 2);
            a(19, 196, 0, 2, 3);
            a(19, 204, 3, 3, 4);
            a(20, 198, 0, 2, 5);
            a(20, 214, 6, 2, 6);
            a(20, 206, 3, 3, 6);
            a(20, 222, 8, 3, 7);
            a(21, 202, 2, 1, 2);
            a(22, 136, 2, 1, 2);
            a(23, 73, 5, 2, 2);
            a(23, 69, 0, 2, 3);
            a(23, 85, 6, 2, 4);
            a(23, 77, 3, 3, 4);
            a(23, 93, 8, 3, 4);
            a(23, 89, 9, 3, 4);
            a(23, 65, 10, 2, 6);
            a(23, 81, 11, 2, 5);
            a(24, 230, 0, 2, 5);
            a(24, 246, 6, 2, 6);
            a(24, 238, 3, 3, 6);
            a(24, 254, 8, 3, 7);
            a(25, 232, 2, 1, 2);
            a(26, 200, 2, 1, 2);
            a(27, 76, 3, 3, 3);
            a(27, 108, 12, 3, 5);
            a(28, 32, 3, 3, 6);
            a(29, 169, 5, 2, 2);
            a(29, 165, 0, 2, 3);
            a(29, 181, 6, 2, 4);
            a(29, 173, 3, 3, 4);
            a(29, 189, 8, 3, 4);
            a(29, 185, 9, 3, 4);
            a(29, 161, 10, 2, 6);
            a(29, 177, 11, 2, 5);
            a(30, 162, 5, 2, 2);
            a(30, 166, 0, 2, 3);
            a(30, 182, 7, 2, 4);
            a(30, 174, 3, 3, 4);
            a(30, 190, 9, 3, 4);
            a(31, 160, 5, 2, 2);
            a(31, 164, 0, 2, 3);
            a(31, 180, 6, 2, 4);
            a(31, 172, 3, 3, 4);
            a(31, 188, 8, 3, 4);
            a(32, 74, 4, 1, 2);
            a(32, 70, 0, 2, 5);
            a(32, 86, 6, 2, 6);
            a(32, 78, 3, 3, 6);
            a(32, 94, 8, 3, 7);
            a(33, 234, 2, 1, 2);
            a(34, 9, 5, 2, 2);
            a(34, 5, 0, 2, 3);
            a(34, 21, 6, 2, 4);
            a(34, 13, 3, 3, 4);
            a(34, 29, 8, 3, 4);
            a(34, 25, 9, 3, 4);
            a(34, 1, 10, 2, 6);
            a(34, 17, 11, 2, 5);
            a(35, 72, 2, 1, 3);
            a(36, 8, 2, 1, 3);
            a(37, 104, 2, 1, 4);
            a(38, 40, 2, 1, 4);
            a(39, 42, 4, 1, 2);
            a(39, 38, 0, 2, 5);
            a(39, 54, 6, 2, 6);
            a(39, 46, 3, 3, 6);
            a(39, 62, 8, 3, 7);
            a(40, 106, 4, 1, 2);
            a(40, 102, 0, 2, 5);
            a(40, 118, 6, 2, 6);
            a(40, 110, 3, 3, 6);
            a(40, 126, 8, 3, 7);
            a(41, 64, 2, 1, 6);
            a(42, 96, 2, 1, 6);
            a(43, 233, 5, 2, 2);
            a(43, 229, 0, 2, 3);
            a(43, 245, 6, 2, 4);
            a(43, 237, 3, 3, 4);
            a(43, 253, 8, 3, 4);
            a(43, 249, 9, 3, 4);
            a(43, 225, 10, 2, 6);
            a(43, 241, 11, 2, 5);
            a(44, 56, 2, 1, 2);
            a(45, 248, 2, 1, 2);
            a(46, 120, 2, 1, 2);
            a(47, 133, 0, 2, 3);
            a(47, 149, 6, 2, 4);
            a(47, 141, 3, 3, 4);
            a(47, 157, 8, 3, 5);
            a(47, 153, 9, 3, 5);
            a(47, 129, 10, 2, 6);
            a(47, 145, 11, 2, 6);
            a(48, 134, 0, 2, 3);
            a(48, 150, 7, 2, 4);
            a(48, 142, 3, 3, 4);
            a(49, 132, 0, 2, 3);
            a(49, 148, 6, 2, 4);
            a(49, 140, 3, 3, 4);
            a(50, 170, 2, 1, 2);
            a(51, 168, 2, 1, 2);
            a(52, 186, 2, 1, 2);
            a(53, 138, 2, 1, 2);
            a(54, 154, 2, 1, 2);
            a(55, 152, 2, 1, 2);
            final int[] array = { 7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 6, 2, 6, 4, 4, 4, 4, 2, 5, 2, 5, 5, 5, 5, 5, 2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, 2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 2, 6, 3, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7 };
        }
        return B.a;
    }
    
    private static void a(final int n, final int n2, final int n3, final int n4, final int n5) {
        B.a[n2] = ((n & 0xFF) | (n3 & 0xFF) << 8 | (n4 & 0xFF) << 16 | (n5 & 0xFF) << 24);
    }
}
