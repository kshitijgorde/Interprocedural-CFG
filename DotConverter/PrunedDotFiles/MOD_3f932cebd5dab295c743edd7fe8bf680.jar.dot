digraph "" {
"new java.util.Random";
 "new java.util.Random"->"virtualinvoke <java.io.IOException: void printStackTrace()>";
 "virtualinvoke <java.io.IOException: void printStackTrace()>"->"goto return";
 "goto return"->"return";
"virtualinvoke <java.lang.Exception: void printStackTrace()>";
"specialinvoke <java.util.Random: void <init>()>";
 "specialinvoke <java.util.Random: void <init>()>"->"virtualinvoke <java.util.Random: long nextLong()>";
 "virtualinvoke <java.util.Random: long nextLong()>"->"staticinvoke <java.lang.Math: long abs(long)>";
 "staticinvoke <java.lang.Math: long abs(long)>"->"staticinvoke <java.lang.Long: java.lang.String toString(long,int)>";
 "staticinvoke <java.lang.Long: java.lang.String toString(long,int)>"->"new java.lang.StringBuilder";
 "new java.lang.StringBuilder"->"specialinvoke <java.lang.StringBuilder: void <init>()>";
 "specialinvoke <java.lang.StringBuilder: void <init>()>"->"push 'java.io.tmpdir'";
 "push 'java.io.tmpdir'"->"staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>";
 "staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"staticget <java.io.File: java.lang.String separator>";
 "staticget <java.io.File: java.lang.String separator>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>"->"new java.lang.StringBuilder";
 "new java.lang.StringBuilder"->"specialinvoke <java.lang.StringBuilder: void <init>()>";
 "specialinvoke <java.lang.StringBuilder: void <init>()>"->"push 'java.io.tmpdir'";
 "push 'java.io.tmpdir'"->"staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>";
 "staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"staticget <java.io.File: java.lang.String separator>";
 "staticget <java.io.File: java.lang.String separator>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>"->"staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>";
 "staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>"->"virtualinvoke <java.lang.String: java.lang.String toLowerCase()>";
 "virtualinvoke <java.lang.String: java.lang.String toLowerCase()>"->"staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>";
 "staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>"->"virtualinvoke <java.lang.String: int indexOf(java.lang.String)>";
 "virtualinvoke <java.lang.String: int indexOf(java.lang.String)>"->"virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>"->"new java.lang.StringBuilder";
 "new java.lang.StringBuilder"->"specialinvoke <java.lang.StringBuilder: void <init>()>";
 "specialinvoke <java.lang.StringBuilder: void <init>()>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>"->"goto load.r r74";
 "goto load.r r74"->"virtualinvoke <java.lang.String: int length()>";
 "virtualinvoke <java.lang.String: int length()>"->"virtualinvoke <java.lang.String: int length()>";
 "virtualinvoke <java.lang.String: int length()>"->"new java.net.URL";
 "new java.net.URL"->"specialinvoke <java.net.URL: void <init>(java.lang.String)>";
 "specialinvoke <java.net.URL: void <init>(java.lang.String)>"->"virtualinvoke <java.net.URL: java.io.InputStream openStream()>";
 "virtualinvoke <java.net.URL: java.io.InputStream openStream()>"->"new java.io.BufferedInputStream";
 "new java.io.BufferedInputStream"->"specialinvoke <java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
 "specialinvoke <java.io.BufferedInputStream: void <init>(java.io.InputStream)>"->"new java.io.File";
 "new java.io.File"->"specialinvoke <java.io.File: void <init>(java.lang.String)>";
 "specialinvoke <java.io.File: void <init>(java.lang.String)>"->"new java.io.BufferedOutputStream";
 "new java.io.BufferedOutputStream"->"new java.io.FileOutputStream";
 "new java.io.FileOutputStream"->"specialinvoke <java.io.FileOutputStream: void <init>(java.io.File)>";
 "specialinvoke <java.io.FileOutputStream: void <init>(java.io.File)>"->"specialinvoke <java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>";
 "specialinvoke <java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>"->"virtualinvoke <java.io.BufferedInputStream: int read(byte[])>";
 "virtualinvoke <java.io.BufferedInputStream: int read(byte[])>"->"goto load.r r3";
 "goto load.r r3"->"virtualinvoke <java.io.OutputStream: void flush()>";
 "virtualinvoke <java.io.OutputStream: void flush()>"->"virtualinvoke <java.io.OutputStream: void close()>";
 "virtualinvoke <java.io.OutputStream: void close()>"->"virtualinvoke <java.io.InputStream: void close()>";
 "virtualinvoke <java.io.InputStream: void close()>"->"virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <java.lang.String: int length()>";
 "virtualinvoke <java.lang.String: int length()>"->"new java.net.URL";
 "new java.net.URL"->"specialinvoke <java.net.URL: void <init>(java.lang.String)>";
 "specialinvoke <java.net.URL: void <init>(java.lang.String)>"->"virtualinvoke <Java: java.applet.AppletContext getAppletContext()>";
 "virtualinvoke <Java: java.applet.AppletContext getAppletContext()>"->"interfaceinvoke <java.applet.AppletContext: void showDocument(java.net.URL)> 1";
 "interfaceinvoke <java.applet.AppletContext: void showDocument(java.net.URL)> 1"->"ifcmpge.b staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>";
 "ifcmpge.b staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>"->"new java.io.File";
 "new java.io.File"->"specialinvoke <java.io.File: void <init>(java.lang.String)>";
 "specialinvoke <java.io.File: void <init>(java.lang.String)>"->"virtualinvoke <java.io.File: boolean exists()>";
 "virtualinvoke <java.io.File: boolean exists()>"->"virtualinvoke <java.lang.String: int length()>";
 "virtualinvoke <java.lang.String: int length()>"->"virtualinvoke <java.lang.String: boolean contains(java.lang.CharSequence)>";
 "virtualinvoke <java.lang.String: boolean contains(java.lang.CharSequence)>"->"virtualinvoke <java.lang.String: boolean contains(java.lang.CharSequence)>";
 "virtualinvoke <java.lang.String: boolean contains(java.lang.CharSequence)>"->"virtualinvoke <java.lang.String: int length()>";
 "virtualinvoke <java.lang.String: int length()>"->"new java.lang.ProcessBuilder";
 "new java.lang.ProcessBuilder"->"specialinvoke <java.lang.ProcessBuilder: void <init>(java.lang.String[])>";
 "specialinvoke <java.lang.ProcessBuilder: void <init>(java.lang.String[])>"->"virtualinvoke <java.lang.ProcessBuilder: java.lang.Process start()>";
 "virtualinvoke <java.lang.ProcessBuilder: java.lang.Process start()>"->"virtualinvoke <java.lang.Process: java.io.OutputStream getOutputStream()>";
 "virtualinvoke <java.lang.Process: java.io.OutputStream getOutputStream()>"->"virtualinvoke <java.io.OutputStream: void close()>";
 "virtualinvoke <java.io.OutputStream: void close()>"->"virtualinvoke <java.lang.Process: java.io.InputStream getInputStream()>";
 "virtualinvoke <java.lang.Process: java.io.InputStream getInputStream()>"->"virtualinvoke <java.io.InputStream: void close()>";
 "virtualinvoke <java.io.InputStream: void close()>"->"virtualinvoke <java.lang.Process: java.io.InputStream getErrorStream()>";
 "virtualinvoke <java.lang.Process: java.io.InputStream getErrorStream()>"->"virtualinvoke <java.io.InputStream: void close()>";
 "virtualinvoke <java.io.InputStream: void close()>"->"goto load.r r75";
 "goto load.r r75"->"virtualinvoke <java.lang.String: int length()>";
 "virtualinvoke <java.lang.String: int length()>"->"staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>";
 "staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>"->"new java.lang.StringBuilder";
 "new java.lang.StringBuilder"->"specialinvoke <java.lang.StringBuilder: void <init>()>";
 "specialinvoke <java.lang.StringBuilder: void <init>()>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>"->"virtualinvoke <java.lang.Runtime: java.lang.Process exec(java.lang.String)>";
 "virtualinvoke <java.lang.Runtime: java.lang.Process exec(java.lang.String)>"->"virtualinvoke <java.lang.Process: int waitFor()>";
 "virtualinvoke <java.lang.Process: int waitFor()>"->"virtualinvoke <java.lang.String: int length()>";
 "virtualinvoke <java.lang.String: int length()>"->"ifcmple.i new java.io.File";
 "ifcmple.i new java.io.File"->"staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>";
 "staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>"->"new java.lang.StringBuilder";
 "new java.lang.StringBuilder"->"specialinvoke <java.lang.StringBuilder: void <init>()>";
 "specialinvoke <java.lang.StringBuilder: void <init>()>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>"->"virtualinvoke <java.lang.Runtime: java.lang.Process exec(java.lang.String)>";
 "virtualinvoke <java.lang.Runtime: java.lang.Process exec(java.lang.String)>"->"virtualinvoke <java.lang.Process: int waitFor()>";
 "virtualinvoke <java.lang.Process: int waitFor()>"->"new java.io.File";
 "new java.io.File"->"specialinvoke <java.io.File: void <init>(java.lang.String)>";
 "specialinvoke <java.io.File: void <init>(java.lang.String)>"->"virtualinvoke <java.io.File: boolean delete()>";
 "virtualinvoke <java.io.File: boolean delete()>"->"goto load.r r0";
 "goto load.r r0"->"fieldput <Java: java.lang.Object initialized>";
 "fieldput <Java: java.lang.Object initialized>"->"goto return";
"virtualinvoke <java.lang.String: boolean contains(java.lang.CharSequence)>";
 "virtualinvoke <java.lang.String: boolean contains(java.lang.CharSequence)>"->"virtualinvoke <java.lang.String: int length()>";
 "virtualinvoke <java.lang.String: int length()>"->"new java.lang.ProcessBuilder";
 "new java.lang.ProcessBuilder"->"specialinvoke <java.lang.ProcessBuilder: void <init>(java.lang.String[])>";
 "specialinvoke <java.lang.ProcessBuilder: void <init>(java.lang.String[])>"->"virtualinvoke <java.lang.ProcessBuilder: java.lang.Process start()>";
 "virtualinvoke <java.lang.ProcessBuilder: java.lang.Process start()>"->"virtualinvoke <java.lang.Process: java.io.OutputStream getOutputStream()>";
 "virtualinvoke <java.lang.Process: java.io.OutputStream getOutputStream()>"->"virtualinvoke <java.io.OutputStream: void close()>";
 "virtualinvoke <java.io.OutputStream: void close()>"->"virtualinvoke <java.lang.Process: java.io.InputStream getInputStream()>";
 "virtualinvoke <java.lang.Process: java.io.InputStream getInputStream()>"->"virtualinvoke <java.io.InputStream: void close()>";
 "virtualinvoke <java.io.InputStream: void close()>"->"virtualinvoke <java.lang.Process: java.io.InputStream getErrorStream()>";
 "virtualinvoke <java.lang.Process: java.io.InputStream getErrorStream()>"->"virtualinvoke <java.io.InputStream: void close()>";
 "ifcmpge.b staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>"->"staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>";
 "staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>"->"new java.lang.StringBuilder";
 "new java.lang.StringBuilder"->"specialinvoke <java.lang.StringBuilder: void <init>()>";
 "specialinvoke <java.lang.StringBuilder: void <init>()>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>"->"virtualinvoke <java.lang.Runtime: java.lang.Process exec(java.lang.String)>";
 "virtualinvoke <java.lang.Runtime: java.lang.Process exec(java.lang.String)>"->"virtualinvoke <java.lang.Process: int waitFor()>";
 "virtualinvoke <java.lang.Process: int waitFor()>"->"staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>";
 "staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>"->"virtualinvoke <java.lang.Runtime: java.lang.Process exec(java.lang.String)>";
 "virtualinvoke <java.lang.Runtime: java.lang.Process exec(java.lang.String)>"->"virtualinvoke <java.lang.Process: int waitFor()>";
 "virtualinvoke <java.lang.Process: int waitFor()>"->"new java.io.File";
 "new java.io.File"->"specialinvoke <java.io.File: void <init>(java.lang.String)>";
 "specialinvoke <java.io.File: void <init>(java.lang.String)>"->"virtualinvoke <java.io.File: boolean delete()>";
 "virtualinvoke <java.io.File: boolean delete()>"->"virtualinvoke <java.io.OutputStream: void write(byte[],int,int)>";
 "virtualinvoke <java.io.OutputStream: void write(byte[],int,int)>"->"goto load.r r1";
"virtualinvoke <java.lang.String: int indexOf(java.lang.String)>";
 "virtualinvoke <java.lang.String: int indexOf(java.lang.String)>"->"virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>"->"virtualinvoke <java.lang.String: boolean startsWith(java.lang.String)>";
 "virtualinvoke <java.lang.String: boolean startsWith(java.lang.String)>"->"ifeq new java.lang.StringBuilder";
 "ifeq new java.lang.StringBuilder"->"new java.lang.StringBuilder";
 "new java.lang.StringBuilder"->"specialinvoke <java.lang.StringBuilder: void <init>()>";
 "specialinvoke <java.lang.StringBuilder: void <init>()>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>"->"goto load.r r74";
"virtualinvoke <java.lang.String: int indexOf(java.lang.String)>";
 "virtualinvoke <java.lang.String: int indexOf(java.lang.String)>"->"virtualinvoke <java.lang.String: int indexOf(java.lang.String)>";
 "virtualinvoke <java.lang.String: int indexOf(java.lang.String)>"->"virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>";
 "virtualinvoke <Java: java.lang.String getParameter(java.lang.String)>"->"new java.lang.StringBuilder";
 "new java.lang.StringBuilder"->"specialinvoke <java.lang.StringBuilder: void <init>()>";
 "specialinvoke <java.lang.StringBuilder: void <init>()>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"->"virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>";
 "virtualinvoke <java.lang.StringBuilder: java.lang.String toString()>"->}
