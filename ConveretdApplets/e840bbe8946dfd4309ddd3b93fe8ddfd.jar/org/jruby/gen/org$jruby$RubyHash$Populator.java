// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyHash$i$flatten;
import org.jruby.RubyHash$i$1$0$replace19;
import org.jruby.RubyHash$i$0$0$dup;
import org.jruby.RubyHash$i$1$0$initialize_copy19;
import org.jruby.RubyHash$i$0$0$each19;
import org.jruby.RubyHash$i$0$0$keep_if;
import org.jruby.RubyHash$i$0$0$select_bang;
import org.jruby.RubyHash$i$1$0$key;
import org.jruby.RubyHash$i$1$0$set_default_proc;
import org.jruby.RubyHash$i$0$0$select19;
import org.jruby.RubyHash$i$0$0$hash19;
import org.jruby.RubyHash$i$2$0$op_aset19;
import org.jruby.RubyHash$i$0$0$to_s19;
import org.jruby.RubyHash$i$0$0$getCompareByIdentity_p;
import org.jruby.RubyHash$i$0$0$rbClone;
import org.jruby.RubyHash$i$0$0$getCompareByIdentity;
import org.jruby.RubyHash$i$1$0$assoc;
import org.jruby.RubyHash$i$1$0$merge_bang19;
import org.jruby.RubyHash$i$1$0$rassoc;
import org.jruby.RubyHash$i$1$0$index19;
import org.jruby.RubyHash$i$2$0$op_aset;
import org.jruby.RubyHash$i$0$0$hash;
import org.jruby.RubyHash$i$1$0$replace;
import org.jruby.RubyHash$i$1$0$initialize_copy;
import org.jruby.RubyHash$i$1$0$merge_bang;
import org.jruby.RubyHash$i$0$0$each;
import org.jruby.RubyHash$i$1$0$index;
import org.jruby.RubyHash$i$0$0$rehash;
import org.jruby.RubyHash$i$0$0$values_at;
import org.jruby.RubyHash$i$0$0$default_proc;
import org.jruby.RubyHash$i$0$0$shift;
import org.jruby.RubyHash$i$0$0$reject;
import org.jruby.RubyHash$i$0$0$each_key;
import org.jruby.RubyHash$i$0$1$initialize;
import org.jruby.RubyHash$i$0$0$inspect;
import org.jruby.RubyHash$i$0$0$select;
import org.jruby.RubyHash$i$1$0$op_aref;
import org.jruby.RubyHash$i$default_value_get;
import org.jruby.RubyHash$i$1$0$delete;
import org.jruby.RubyHash$i$0$0$to_hash;
import org.jruby.RubyHash$i$0$0$to_a;
import org.jruby.RubyHash$i$0$0$reject_bang;
import org.jruby.RubyHash$i$0$0$each_value;
import org.jruby.RubyFixnum;
import org.jruby.RubyHash$i$0$0$rb_size;
import org.jruby.RubyHash$i$1$0$has_key_p;
import org.jruby.RubyHash$i$0$0$indices;
import org.jruby.RubyHash$i$0$0$rb_clear;
import org.jruby.RubyHash$i$0$0$each_pair;
import org.jruby.RubyHash$i$0$0$empty_p;
import org.jruby.RubyHash$i$0$0$delete_if;
import org.jruby.RubyHash$i$1$0$op_eql19;
import org.jruby.RubyHash$i$1$0$merge;
import org.jruby.RubyHash$i$0$0$to_s;
import org.jruby.RubyHash$i$1$0$op_equal;
import org.jruby.RubyHash$i$0$1$fetch;
import org.jruby.RubyHash$i$1$0$default_value_set;
import org.jruby.RubyHash$i$0$0$rb_values;
import org.jruby.RubyHash$i$0$0$sort;
import org.jruby.RubyHash$i$0$0$invert;
import org.jruby.RubyBoolean;
import org.jruby.RubyHash$i$1$0$has_value_p;
import org.jruby.RubyArray;
import org.jruby.RubyHash$i$0$0$keys;
import org.jruby.RubyHash$s$1$0$try_convert;
import org.jruby.CompatVersion;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Block;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyHash;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyHash$s$0$0$create;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyHash$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyHash$s$0$0$create(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "create", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "create", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("[]", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyHash.create", "[]");
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyHash$s$1$0$try_convert(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "try_convert", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "try_convert", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("try_convert", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyHash.try_convert", "try_convert");
        }
        javaMethod = new RubyHash$i$0$0$keys(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "keys", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "keys", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("keys", javaMethod);
        javaMethod = new RubyHash$i$1$0$has_value_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "has_value_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "has_value_p", RubyBoolean.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("has_value?", javaMethod);
        cls.addMethodAtBootTimeOnly("value?", javaMethod);
        javaMethod = new RubyHash$i$0$0$invert(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "invert", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "invert", RubyHash.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("invert", javaMethod);
        javaMethod = new RubyHash$i$0$0$sort(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "sort", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "sort", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("sort", javaMethod);
        javaMethod = new RubyHash$i$0$0$rb_values(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rb_values", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "rb_values", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("values", javaMethod);
        javaMethod = new RubyHash$i$1$0$default_value_set(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "default_value_set", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "default_value_set", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("default=", javaMethod);
        javaMethod = new RubyHash$i$0$1$fetch(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "fetch", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "fetch", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("fetch", javaMethod);
        javaMethod = new RubyHash$i$1$0$op_equal(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new RubyHash$i$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "to_s", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyHash$i$1$0$merge(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "merge", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "merge", RubyHash.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("merge", javaMethod);
        javaMethod = new RubyHash$i$1$0$op_eql19(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_eql19", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "op_eql19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new RubyHash$i$0$0$delete_if(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "delete_if", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "delete_if", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("delete_if", javaMethod);
        javaMethod = new RubyHash$i$0$0$empty_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "empty_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "empty_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("empty?", javaMethod);
        javaMethod = new RubyHash$i$0$0$each_pair(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_pair", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "each_pair", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_pair", javaMethod);
        javaMethod = new RubyHash$i$0$0$rb_clear(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rb_clear", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "rb_clear", RubyHash.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("clear", javaMethod);
        javaMethod = new RubyHash$i$0$0$indices(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "indices", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "indices", RubyArray.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("indexes", javaMethod);
        cls.addMethodAtBootTimeOnly("indices", javaMethod);
        javaMethod = new RubyHash$i$1$0$has_key_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "has_key_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "has_key_p", RubyBoolean.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("has_key?", javaMethod);
        cls.addMethodAtBootTimeOnly("key?", javaMethod);
        cls.addMethodAtBootTimeOnly("include?", javaMethod);
        cls.addMethodAtBootTimeOnly("member?", javaMethod);
        javaMethod = new RubyHash$i$0$0$rb_size(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rb_size", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "rb_size", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        javaMethod = new RubyHash$i$0$0$each_value(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_value", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "each_value", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_value", javaMethod);
        javaMethod = new RubyHash$i$0$0$reject_bang(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "reject_bang", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "reject_bang", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("reject!", javaMethod);
        javaMethod = new RubyHash$i$0$0$to_a(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_a", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "to_a", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_a", javaMethod);
        javaMethod = new RubyHash$i$0$0$to_hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "to_hash", RubyHash.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_hash", javaMethod);
        javaMethod = new RubyHash$i$1$0$delete(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "delete", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "delete", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("delete", javaMethod);
        javaMethod = new RubyHash$i$default_value_get(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "default_value_get", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("default", javaMethod);
        javaMethod = new RubyHash$i$1$0$op_aref(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "op_aref", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new RubyHash$i$0$0$select(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "select", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "select", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("select", javaMethod);
        javaMethod = new RubyHash$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "inspect", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyHash$i$0$1$initialize(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "initialize", IRubyObject.class, new Class[] { IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new RubyHash$i$0$0$each_key(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_key", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "each_key", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_key", javaMethod);
        javaMethod = new RubyHash$i$0$0$reject(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "reject", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "reject", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("reject", javaMethod);
        javaMethod = new RubyHash$i$0$0$shift(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "shift", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "shift", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("shift", javaMethod);
        javaMethod = new RubyHash$i$0$0$default_proc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "default_proc", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "default_proc", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("default_proc", javaMethod);
        javaMethod = new RubyHash$i$0$0$values_at(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "values_at", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "values_at", RubyArray.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("values_at", javaMethod);
        javaMethod = new RubyHash$i$0$0$rehash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rehash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyHash.class, "rehash", RubyHash.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("rehash", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyHash.keys", "keys");
        runtime.addBoundMethod("org.jruby.RubyHash.has_value_p", "has_value?");
        runtime.addBoundMethod("org.jruby.RubyHash.invert", "invert");
        runtime.addBoundMethod("org.jruby.RubyHash.sort", "sort");
        runtime.addBoundMethod("org.jruby.RubyHash.rb_values", "values");
        runtime.addBoundMethod("org.jruby.RubyHash.default_value_set", "default=");
        runtime.addBoundMethod("org.jruby.RubyHash.fetch", "fetch");
        runtime.addBoundMethod("org.jruby.RubyHash.op_equal", "==");
        runtime.addBoundMethod("org.jruby.RubyHash.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyHash.merge", "merge");
        runtime.addBoundMethod("org.jruby.RubyHash.op_eql19", "eql?");
        runtime.addBoundMethod("org.jruby.RubyHash.delete_if", "delete_if");
        runtime.addBoundMethod("org.jruby.RubyHash.empty_p", "empty?");
        runtime.addBoundMethod("org.jruby.RubyHash.each_pair", "each_pair");
        runtime.addBoundMethod("org.jruby.RubyHash.rb_clear", "clear");
        runtime.addBoundMethod("org.jruby.RubyHash.indices", "indexes");
        runtime.addBoundMethod("org.jruby.RubyHash.has_key_p", "has_key?");
        runtime.addBoundMethod("org.jruby.RubyHash.rb_size", "size");
        runtime.addBoundMethod("org.jruby.RubyHash.each_value", "each_value");
        runtime.addBoundMethod("org.jruby.RubyHash.reject_bang", "reject!");
        runtime.addBoundMethod("org.jruby.RubyHash.to_a", "to_a");
        runtime.addBoundMethod("org.jruby.RubyHash.to_hash", "to_hash");
        runtime.addBoundMethod("org.jruby.RubyHash.delete", "delete");
        runtime.addBoundMethod("org.jruby.RubyHash.default_value_get", "default");
        runtime.addBoundMethod("org.jruby.RubyHash.op_aref", "[]");
        runtime.addBoundMethod("org.jruby.RubyHash.select", "select");
        runtime.addBoundMethod("org.jruby.RubyHash.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyHash.initialize", "initialize");
        runtime.addBoundMethod("org.jruby.RubyHash.each_key", "each_key");
        runtime.addBoundMethod("org.jruby.RubyHash.reject", "reject");
        runtime.addBoundMethod("org.jruby.RubyHash.shift", "shift");
        runtime.addBoundMethod("org.jruby.RubyHash.default_proc", "default_proc");
        runtime.addBoundMethod("org.jruby.RubyHash.values_at", "values_at");
        runtime.addBoundMethod("org.jruby.RubyHash.rehash", "rehash");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyHash$i$1$0$index(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "index", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "index", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("index", javaMethod);
            javaMethod = new RubyHash$i$0$0$each(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "each", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "each", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("each", javaMethod);
            javaMethod = new RubyHash$i$1$0$merge_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "merge_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "merge_bang", RubyHash.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("merge!", javaMethod);
            cls.addMethodAtBootTimeOnly("update", javaMethod);
            javaMethod = new RubyHash$i$1$0$initialize_copy(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "initialize_copy", RubyHash.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
            javaMethod = new RubyHash$i$1$0$replace(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "replace", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "replace", RubyHash.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("replace", javaMethod);
            javaMethod = new RubyHash$i$0$0$hash(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "hash", RubyFixnum.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("hash", javaMethod);
            javaMethod = new RubyHash$i$2$0$op_aset(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "op_aset", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "op_aset", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("[]=", javaMethod);
            cls.addMethodAtBootTimeOnly("store", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyHash.index", "index");
            runtime.addBoundMethod("org.jruby.RubyHash.each", "each");
            runtime.addBoundMethod("org.jruby.RubyHash.merge_bang", "merge!");
            runtime.addBoundMethod("org.jruby.RubyHash.initialize_copy", "initialize_copy");
            runtime.addBoundMethod("org.jruby.RubyHash.replace", "replace");
            runtime.addBoundMethod("org.jruby.RubyHash.hash", "hash");
            runtime.addBoundMethod("org.jruby.RubyHash.op_aset", "[]=");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyHash$i$1$0$index19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "index19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "index19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("index", javaMethod);
            javaMethod = new RubyHash$i$1$0$rassoc(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "rassoc", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "rassoc", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("rassoc", javaMethod);
            javaMethod = new RubyHash$i$1$0$merge_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "merge_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "merge_bang19", RubyHash.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("merge!", javaMethod);
            cls.addMethodAtBootTimeOnly("update", javaMethod);
            javaMethod = new RubyHash$i$1$0$assoc(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "assoc", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "assoc", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("assoc", javaMethod);
            javaMethod = new RubyHash$i$0$0$getCompareByIdentity(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "getCompareByIdentity", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "getCompareByIdentity", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("compare_by_identity", javaMethod);
            javaMethod = new RubyHash$i$0$0$rbClone(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "rbClone", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "rbClone", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("clone", javaMethod);
            javaMethod = new RubyHash$i$0$0$getCompareByIdentity_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "getCompareByIdentity_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "getCompareByIdentity_p", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("compare_by_identity?", javaMethod);
            javaMethod = new RubyHash$i$0$0$to_s19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_s19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "to_s19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("to_s", javaMethod);
            javaMethod = new RubyHash$i$2$0$op_aset19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "op_aset19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "op_aset19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("[]=", javaMethod);
            cls.addMethodAtBootTimeOnly("store", javaMethod);
            javaMethod = new RubyHash$i$0$0$hash19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "hash19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "hash19", RubyFixnum.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("hash", javaMethod);
            javaMethod = new RubyHash$i$0$0$select19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "select19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "select19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("select", javaMethod);
            javaMethod = new RubyHash$i$1$0$set_default_proc(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "set_default_proc", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "set_default_proc", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("default_proc=", javaMethod);
            javaMethod = new RubyHash$i$1$0$key(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "key", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "key", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("key", javaMethod);
            javaMethod = new RubyHash$i$0$0$select_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "select_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "select_bang", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("select!", javaMethod);
            javaMethod = new RubyHash$i$0$0$keep_if(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "keep_if", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "keep_if", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("keep_if", javaMethod);
            javaMethod = new RubyHash$i$0$0$each19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "each19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "each19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("each", javaMethod);
            javaMethod = new RubyHash$i$1$0$initialize_copy19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 1, "initialize_copy19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "initialize_copy19", RubyHash.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
            javaMethod = new RubyHash$i$0$0$dup(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "dup", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "dup", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("dup", javaMethod);
            javaMethod = new RubyHash$i$1$0$replace19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "replace19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyHash.class, "replace19", RubyHash.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("replace", javaMethod);
            javaMethod = new RubyHash$i$flatten(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "flatten", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("flatten", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyHash.index19", "index");
            runtime.addBoundMethod("org.jruby.RubyHash.rassoc", "rassoc");
            runtime.addBoundMethod("org.jruby.RubyHash.merge_bang19", "merge!");
            runtime.addBoundMethod("org.jruby.RubyHash.assoc", "assoc");
            runtime.addBoundMethod("org.jruby.RubyHash.getCompareByIdentity", "compare_by_identity");
            runtime.addBoundMethod("org.jruby.RubyHash.rbClone", "clone");
            runtime.addBoundMethod("org.jruby.RubyHash.getCompareByIdentity_p", "compare_by_identity?");
            runtime.addBoundMethod("org.jruby.RubyHash.to_s19", "to_s");
            runtime.addBoundMethod("org.jruby.RubyHash.op_aset19", "[]=");
            runtime.addBoundMethod("org.jruby.RubyHash.hash19", "hash");
            runtime.addBoundMethod("org.jruby.RubyHash.select19", "select");
            runtime.addBoundMethod("org.jruby.RubyHash.set_default_proc", "default_proc=");
            runtime.addBoundMethod("org.jruby.RubyHash.key", "key");
            runtime.addBoundMethod("org.jruby.RubyHash.select_bang", "select!");
            runtime.addBoundMethod("org.jruby.RubyHash.keep_if", "keep_if");
            runtime.addBoundMethod("org.jruby.RubyHash.each19", "each");
            runtime.addBoundMethod("org.jruby.RubyHash.initialize_copy19", "initialize_copy");
            runtime.addBoundMethod("org.jruby.RubyHash.dup", "dup");
            runtime.addBoundMethod("org.jruby.RubyHash.replace19", "replace");
            runtime.addBoundMethod("org.jruby.RubyHash.flatten", "flatten");
        }
    }
}
