// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyStruct$i$0$0$size;
import org.jruby.RubyStruct$i$0$0$values_at;
import org.jruby.RubyStruct$i$1$0$initialize_copy;
import org.jruby.RubyStruct$i$0$0$each_pair;
import org.jruby.RubyStruct$i$0$0$each;
import org.jruby.RubyStruct$i$1$0$eql_p;
import org.jruby.RubyStruct$i$0$0$inspect;
import org.jruby.RubyStruct$i$initialize;
import org.jruby.RubyStruct$i$0$0$select;
import org.jruby.RubyStruct$i$2$0$aset;
import org.jruby.RubyFixnum;
import org.jruby.RubyStruct$i$0$0$hash;
import org.jruby.runtime.ThreadContext;
import org.jruby.RubyStruct$i$1$0$op_equal;
import org.jruby.RubyStruct$i$1$0$aref;
import org.jruby.RubyStruct$i$0$0$to_a;
import org.jruby.RubyArray;
import org.jruby.RubyStruct$i$0$0$members;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Block;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyClass;
import org.jruby.RubyStruct;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyStruct$s$0$0$newInstance;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyStruct$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyStruct$s$0$0$newInstance(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "newInstance", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "newInstance", RubyClass.class, new Class[] { IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("new", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyStruct.newInstance", "new");
        javaMethod = new RubyStruct$i$0$0$members(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "members", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "members", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("members", javaMethod);
        javaMethod = new RubyStruct$i$0$0$to_a(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_a", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "to_a", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_a", javaMethod);
        cls.addMethodAtBootTimeOnly("values", javaMethod);
        javaMethod = new RubyStruct$i$1$0$aref(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "aref", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "aref", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new RubyStruct$i$1$0$op_equal(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new RubyStruct$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "hash", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new RubyStruct$i$2$0$aset(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "aset", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "aset", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("[]=", javaMethod);
        javaMethod = new RubyStruct$i$0$0$select(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "select", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "select", RubyArray.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("select", javaMethod);
        javaMethod = new RubyStruct$i$initialize(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new RubyStruct$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "inspect", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyStruct$i$1$0$eql_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "eql_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new RubyStruct$i$0$0$each(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "each", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new RubyStruct$i$0$0$each_pair(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_pair", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "each_pair", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_pair", javaMethod);
        javaMethod = new RubyStruct$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "initialize_copy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new RubyStruct$i$0$0$values_at(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "values_at", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "values_at", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("values_at", javaMethod);
        javaMethod = new RubyStruct$i$0$0$size(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "size", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStruct.class, "size", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyStruct.members", "members");
        runtime.addBoundMethod("org.jruby.RubyStruct.to_a", "to_a");
        runtime.addBoundMethod("org.jruby.RubyStruct.aref", "[]");
        runtime.addBoundMethod("org.jruby.RubyStruct.op_equal", "==");
        runtime.addBoundMethod("org.jruby.RubyStruct.hash", "hash");
        runtime.addBoundMethod("org.jruby.RubyStruct.aset", "[]=");
        runtime.addBoundMethod("org.jruby.RubyStruct.select", "select");
        runtime.addBoundMethod("org.jruby.RubyStruct.initialize", "initialize");
        runtime.addBoundMethod("org.jruby.RubyStruct.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyStruct.eql_p", "eql?");
        runtime.addBoundMethod("org.jruby.RubyStruct.each", "each");
        runtime.addBoundMethod("org.jruby.RubyStruct.each_pair", "each_pair");
        runtime.addBoundMethod("org.jruby.RubyStruct.initialize_copy", "initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyStruct.values_at", "values_at");
        runtime.addBoundMethod("org.jruby.RubyStruct.size", "size");
    }
}
