// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_uint;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_float;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_int8;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_uint8;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_float;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_float;
import org.jruby.ext.ffi.AbstractMemory$i$get_array_of_string;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_uint32;
import org.jruby.ext.ffi.AbstractMemory$i$get_long;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_pointer;
import org.jruby.ext.ffi.AbstractMemory$i$get_uint8;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_ulong_long;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_long;
import org.jruby.ext.ffi.AbstractMemory$i$put_float64;
import org.jruby.ext.ffi.AbstractMemory$i$get_int32;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_uchar;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_float64;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_pointer;
import org.jruby.ext.ffi.AbstractMemory$i$get_int16;
import org.jruby.ext.ffi.AbstractMemory$i$get_int64;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_uint32;
import org.jruby.ext.ffi.AbstractMemory$i$0$1$to_s;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_ushort;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_int64;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_long;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_uchar;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_float;
import org.jruby.ext.ffi.AbstractMemory$i$get_uint64;
import org.jruby.ext.ffi.AbstractMemory$i$put_uint16;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_uint16;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_int16;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_pointer;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_float;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_uint32;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_pointer;
import org.jruby.ext.ffi.AbstractMemory$i$put_int16;
import org.jruby.ext.ffi.AbstractMemory$i$put_uint64;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_int8;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_int32;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_pointer;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_long;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_string;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_int64;
import org.jruby.ext.ffi.AbstractMemory$i$put_uint8;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_long_long;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$total;
import org.jruby.ext.ffi.AbstractMemory$i$read_string;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_int32;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_ulong;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_ulong_long;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$op_plus;
import org.jruby.ext.ffi.AbstractMemory$i$get_int8;
import org.jruby.ext.ffi.AbstractMemory$i$read_array_of_string;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_float64;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_long_long;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_ulong;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_short;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_int64;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_int32;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_int;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_uint8;
import org.jruby.ext.ffi.AbstractMemory$i$get_float32;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_int16;
import org.jruby.RubyFixnum;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$hash;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_uint16;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_double;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$aref;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_uint64;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_float64;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_ushort;
import org.jruby.ext.ffi.AbstractMemory$i$get_ulong;
import org.jruby.ext.ffi.AbstractMemory$i$get_uint16;
import org.jruby.ext.ffi.AbstractMemory$i$0$2$put_bytes;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_uint64;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_uint8;
import org.jruby.ext.ffi.AbstractMemory$i$put_int32;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_ulong;
import org.jruby.ext.ffi.AbstractMemory$i$put_float32;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_char;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$op_equal;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_int16;
import org.jruby.ext.ffi.AbstractMemory$i$get_float64;
import org.jruby.ext.ffi.AbstractMemory$i$put_long;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_float;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_short;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_uint16;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$type_size;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_uint64;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_double;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_ulong;
import org.jruby.ext.ffi.AbstractMemory$i$put_pointer;
import org.jruby.ext.ffi.AbstractMemory$i$put_int8;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_pointer;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_uint16;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_float64;
import org.jruby.ext.ffi.AbstractMemory$i$order;
import org.jruby.ext.ffi.AbstractMemory$i$put_ulong;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_long;
import org.jruby.ext.ffi.AbstractMemory$i$put_int64;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_int64;
import org.jruby.ext.ffi.AbstractMemory$i$get_string;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_int32;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_long;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$clear;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_uint;
import org.jruby.ext.ffi.AbstractMemory$i$get_uint32;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_ulong;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_uint32;
import org.jruby.ext.ffi.AbstractMemory$i$3$0$put_callback;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$put_array_of_int8;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_bytes;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_int;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_int16;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_char;
import org.jruby.ext.ffi.AbstractMemory$i$put_uint32;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$read_array_of_uint64;
import org.jruby.ext.ffi.AbstractMemory$i$2$0$get_array_of_int8;
import org.jruby.ext.ffi.AbstractMemory$i$0$0$read_long;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.ext.ffi.AbstractMemory;
import org.jruby.ext.ffi.AbstractMemory$i$1$0$write_array_of_uint8;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.ext.ffi.AbstractMemory$i$get_pointer;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$ext$ffi$AbstractMemory$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new AbstractMemory$i$get_pointer(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_pointer", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_pointer", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_uint8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_uint8", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_uint8", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_uint8", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_uchar", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_long", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_long", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_int8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_int8", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_int8", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_int8", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_char", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_uint64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_uint64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_uint64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_uint64", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_ulong_long", javaMethod);
        javaMethod = new AbstractMemory$i$put_uint32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_uint32", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_uint32", javaMethod);
        cls.addMethodAtBootTimeOnly("put_uint", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_char(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_char", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_char", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_char", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_int16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_int16", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_int16", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_int16", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_short", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_int(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_int", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_int", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_int", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_bytes(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_bytes", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_bytes", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_bytes", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_int8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_int8", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_int8", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_int8", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_char", javaMethod);
        javaMethod = new AbstractMemory$i$3$0$put_callback(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 3, "put_callback", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_callback", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_callback", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_uint32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_uint32", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_uint32", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_uint32", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_uint", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_ulong(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_ulong", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_ulong", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_ulong", javaMethod);
        javaMethod = new AbstractMemory$i$get_uint32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_uint32", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_uint32", javaMethod);
        cls.addMethodAtBootTimeOnly("get_uint", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_uint(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_uint", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_uint", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_uint", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$clear(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "clear", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "clear", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("clear", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_long", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_long", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_int32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_int32", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_int32", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_int32", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_int", javaMethod);
        javaMethod = new AbstractMemory$i$get_string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_string", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_string", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_int64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_int64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_int64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_int64", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_long_long", javaMethod);
        javaMethod = new AbstractMemory$i$put_int64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_int64", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_int64", javaMethod);
        cls.addMethodAtBootTimeOnly("put_long_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_long", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_long", javaMethod);
        javaMethod = new AbstractMemory$i$put_ulong(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_ulong", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_ulong", javaMethod);
        cls.addMethodAtBootTimeOnly("write_ulong", javaMethod);
        javaMethod = new AbstractMemory$i$order(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "order", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("order", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_float64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_float64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_float64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_float64", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_double", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_uint16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_uint16", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_uint16", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_uint16", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_ushort", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_pointer(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_pointer", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_pointer", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_pointer", javaMethod);
        javaMethod = new AbstractMemory$i$put_int8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_int8", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_int8", javaMethod);
        cls.addMethodAtBootTimeOnly("put_char", javaMethod);
        javaMethod = new AbstractMemory$i$put_pointer(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_pointer", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_pointer", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_ulong(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_ulong", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_ulong", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_ulong", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_double(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_double", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_double", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_double", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_uint64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_uint64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_uint64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_uint64", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_ulong_long", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$type_size(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "type_size", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "type_size", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("type_size", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_uint16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_uint16", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_uint16", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_uint16", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_ushort", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_short(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_short", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_short", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_short", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_float(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_float", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_float", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_float", javaMethod);
        javaMethod = new AbstractMemory$i$put_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_long", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_long", javaMethod);
        javaMethod = new AbstractMemory$i$get_float64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_float64", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_float64", javaMethod);
        cls.addMethodAtBootTimeOnly("get_double", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_int16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_int16", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_int16", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_int16", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_short", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$op_equal(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_char(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_char", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_char", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_char", javaMethod);
        javaMethod = new AbstractMemory$i$put_float32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_float32", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_float32", javaMethod);
        cls.addMethodAtBootTimeOnly("put_float", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_ulong(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_ulong", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_ulong", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_ulong", javaMethod);
        javaMethod = new AbstractMemory$i$put_int32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_int32", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_int32", javaMethod);
        cls.addMethodAtBootTimeOnly("put_int", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_uint8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_uint8", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_uint8", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_uint8", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_uchar", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_uint64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_uint64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_uint64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_uint64", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_ulong_long", javaMethod);
        javaMethod = new AbstractMemory$i$0$2$put_bytes(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_bytes", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_bytes", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("put_bytes", javaMethod);
        javaMethod = new AbstractMemory$i$get_uint16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_uint16", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_uint16", javaMethod);
        cls.addMethodAtBootTimeOnly("get_ushort", javaMethod);
        javaMethod = new AbstractMemory$i$get_ulong(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_ulong", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_ulong", javaMethod);
        cls.addMethodAtBootTimeOnly("read_ulong", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_ushort(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_ushort", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_ushort", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_ushort", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_float64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_float64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_float64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_float64", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_double", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_uint64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_uint64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_uint64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_uint64", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_ulong_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$aref(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "aref", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "aref", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_double(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_double", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_double", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_double", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_uint16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_uint16", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_uint16", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_uint16", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_ushort", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "hash", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_int16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_int16", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_int16", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_int16", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_short", javaMethod);
        javaMethod = new AbstractMemory$i$get_float32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_float32", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_float32", javaMethod);
        cls.addMethodAtBootTimeOnly("get_float", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_uint8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_uint8", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_uint8", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_uint8", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_uchar", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_int(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_int", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_int", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_int", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_int32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_int32", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_int32", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_int32", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_int", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_int64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_int64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_int64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_int64", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_long_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_short(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_short", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_short", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_short", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_ulong(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_ulong", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_ulong", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_ulong", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_long_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_long_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_long_long", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_long_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_float64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_float64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_float64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_float64", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_double", javaMethod);
        javaMethod = new AbstractMemory$i$read_array_of_string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "read_array_of_string", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("read_array_of_string", javaMethod);
        javaMethod = new AbstractMemory$i$get_int8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_int8", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_int8", javaMethod);
        cls.addMethodAtBootTimeOnly("get_char", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$op_plus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "op_plus", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_ulong_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_ulong_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_ulong_long", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_ulong_long", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_ulong(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_ulong", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_ulong", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_ulong", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_int32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_int32", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_int32", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_int32", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_int", javaMethod);
        javaMethod = new AbstractMemory$i$read_string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "read_string", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("read_string", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$total(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "total", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "total", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("total", javaMethod);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_long_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_long_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_long_long", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_long_long", javaMethod);
        javaMethod = new AbstractMemory$i$put_uint8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_uint8", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_uint8", javaMethod);
        cls.addMethodAtBootTimeOnly("put_uchar", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_int64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_int64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_int64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_int64", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_long_long", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_string", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_string", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_string", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_long", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_pointer(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_pointer", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_pointer", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_pointer", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_int32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_int32", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_int32", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_int32", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_int", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_int8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_int8", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_int8", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_int8", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_char", javaMethod);
        javaMethod = new AbstractMemory$i$put_uint64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_uint64", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_uint64", javaMethod);
        cls.addMethodAtBootTimeOnly("put_ulong_long", javaMethod);
        javaMethod = new AbstractMemory$i$put_int16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_int16", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_int16", javaMethod);
        cls.addMethodAtBootTimeOnly("put_short", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_pointer(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_pointer", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_pointer", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_pointer", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_uint32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_uint32", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_uint32", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_uint32", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_uint", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_float(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_float", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_float", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_float32", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_float", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_pointer(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_pointer", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_pointer", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_pointer", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_int16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_int16", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_int16", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_int16", javaMethod);
        cls.addMethodAtBootTimeOnly("put_array_of_short", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_uint16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_uint16", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_uint16", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_uint16", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_ushort", javaMethod);
        javaMethod = new AbstractMemory$i$put_uint16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_uint16", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_uint16", javaMethod);
        cls.addMethodAtBootTimeOnly("put_ushort", javaMethod);
        javaMethod = new AbstractMemory$i$get_uint64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_uint64", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_uint64", javaMethod);
        cls.addMethodAtBootTimeOnly("get_ulong_long", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_float(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_float", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_float", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_float", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_uchar(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_uchar", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_uchar", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_uchar", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$put_array_of_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "put_array_of_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "put_array_of_long", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("put_array_of_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_int64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_int64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_int64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_int64", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_long_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_ushort(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_ushort", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_ushort", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_ushort", javaMethod);
        javaMethod = new AbstractMemory$i$0$1$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "to_s", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_uint32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_uint32", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_uint32", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_uint32", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_uint", javaMethod);
        javaMethod = new AbstractMemory$i$get_int64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_int64", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_int64", javaMethod);
        cls.addMethodAtBootTimeOnly("get_long_long", javaMethod);
        javaMethod = new AbstractMemory$i$get_int16(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_int16", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_int16", javaMethod);
        cls.addMethodAtBootTimeOnly("get_short", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_pointer(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_pointer", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_pointer", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_pointer", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_float64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_float64", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_float64", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_float64", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_double", javaMethod);
        javaMethod = new AbstractMemory$i$0$0$read_uchar(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read_uchar", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_uchar", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("read_uchar", javaMethod);
        javaMethod = new AbstractMemory$i$get_int32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_int32", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_int32", javaMethod);
        cls.addMethodAtBootTimeOnly("get_int", javaMethod);
        javaMethod = new AbstractMemory$i$put_float64(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "put_float64", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("put_float64", javaMethod);
        cls.addMethodAtBootTimeOnly("put_double", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_long", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_ulong_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_ulong_long", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_ulong_long", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_ulong_long", javaMethod);
        javaMethod = new AbstractMemory$i$get_uint8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_uint8", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_uint8", javaMethod);
        cls.addMethodAtBootTimeOnly("get_uchar", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_pointer(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_pointer", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_pointer", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_pointer", javaMethod);
        javaMethod = new AbstractMemory$i$get_long(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_long", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_long", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_uint32(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_uint32", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_uint32", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_uint32", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_uint", javaMethod);
        javaMethod = new AbstractMemory$i$get_array_of_string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "get_array_of_string", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("get_array_of_string", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_float(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_float", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_float", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_float32", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_float", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$read_array_of_float(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "read_array_of_float", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "read_array_of_float", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("read_array_of_float32", javaMethod);
        cls.addMethodAtBootTimeOnly("read_array_of_float", javaMethod);
        javaMethod = new AbstractMemory$i$2$0$get_array_of_uint8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "get_array_of_uint8", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "get_array_of_uint8", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("get_array_of_uint8", javaMethod);
        cls.addMethodAtBootTimeOnly("get_array_of_uchar", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_int8(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_int8", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_int8", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_int8", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_char", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_array_of_float(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_array_of_float", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_array_of_float", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_array_of_float32", javaMethod);
        cls.addMethodAtBootTimeOnly("write_array_of_float", javaMethod);
        javaMethod = new AbstractMemory$i$1$0$write_uint(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_uint", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(AbstractMemory.class, "write_uint", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_uint", javaMethod);
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_pointer", "get_pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_uint8", "write_array_of_uint8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_long", "read_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_int8", "get_array_of_int8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_uint64", "read_array_of_uint64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_uint32", "put_uint32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_char", "write_char");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_int16", "write_array_of_int16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_int", "read_int");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_bytes", "get_bytes");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_int8", "put_array_of_int8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_callback", "put_callback");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_uint32", "put_array_of_uint32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_ulong", "read_ulong");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_uint32", "get_uint32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_uint", "read_uint");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.clear", "clear");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_long", "write_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_int32", "put_array_of_int32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_string", "get_string");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_int64", "read_array_of_int64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_int64", "put_int64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_long", "write_array_of_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_ulong", "put_ulong");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.order", "order");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_float64", "read_array_of_float64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_uint16", "put_array_of_uint16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_pointer", "put_array_of_pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_int8", "put_int8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_pointer", "put_pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_ulong", "put_array_of_ulong");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_double", "write_double");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_uint64", "get_array_of_uint64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.type_size", "type_size");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_uint16", "get_array_of_uint16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_short", "read_short");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_float", "write_float");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_long", "put_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_float64", "get_float64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_int16", "read_array_of_int16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.op_equal", "==");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_char", "read_char");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_float32", "put_float32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_ulong", "read_array_of_ulong");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_int32", "put_int32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_uint8", "put_array_of_uint8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_uint64", "write_array_of_uint64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_bytes", "put_bytes");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_uint16", "get_uint16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_ulong", "get_ulong");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_ushort", "read_ushort");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_float64", "put_array_of_float64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_uint64", "put_array_of_uint64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.aref", "[]");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_double", "read_double");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_uint16", "write_array_of_uint16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.hash", "hash");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_int16", "get_array_of_int16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_float32", "get_float32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_uint8", "read_array_of_uint8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_int", "write_int");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_int32", "get_array_of_int32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_int64", "get_array_of_int64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_short", "write_short");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_ulong", "write_array_of_ulong");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_long_long", "write_long_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_float64", "write_array_of_float64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_string", "read_array_of_string");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_int8", "get_int8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.op_plus", "+");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_ulong_long", "read_ulong_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_ulong", "get_array_of_ulong");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_int32", "write_array_of_int32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_string", "read_string");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.total", "total");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_long_long", "read_long_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_uint8", "put_uint8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_int64", "put_array_of_int64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_string", "put_string");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_long", "get_array_of_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_pointer", "read_array_of_pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_int32", "read_array_of_int32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_int8", "read_array_of_int8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_uint64", "put_uint64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_int16", "put_int16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_pointer", "read_pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_uint32", "get_array_of_uint32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_float", "put_array_of_float32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_pointer", "write_pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_int16", "put_array_of_int16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_uint16", "read_array_of_uint16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_uint16", "put_uint16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_uint64", "get_uint64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_float", "read_float");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_uchar", "write_uchar");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_array_of_long", "put_array_of_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_int64", "write_array_of_int64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_ushort", "write_ushort");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_uint32", "read_array_of_uint32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_int64", "get_int64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_int16", "get_int16");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_pointer", "write_array_of_pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_float64", "get_array_of_float64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_uchar", "read_uchar");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_int32", "get_int32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.put_float64", "put_float64");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_long", "read_array_of_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_ulong_long", "write_ulong_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_uint8", "get_uint8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_pointer", "get_array_of_pointer");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_long", "get_long");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_uint32", "write_array_of_uint32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_string", "get_array_of_string");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_float", "get_array_of_float32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.read_array_of_float", "read_array_of_float32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.get_array_of_uint8", "get_array_of_uint8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_int8", "write_array_of_int8");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_array_of_float", "write_array_of_float32");
        runtime.addBoundMethod("org.jruby.ext.ffi.AbstractMemory.write_uint", "write_uint");
    }
}
