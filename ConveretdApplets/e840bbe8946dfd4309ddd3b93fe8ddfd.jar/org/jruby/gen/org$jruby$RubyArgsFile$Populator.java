// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyArgsFile$s$0$1$each_line19;
import org.jruby.RubyArgsFile$s$0$0$op_binmode;
import org.jruby.RubyArgsFile$s$0$1$each19;
import org.jruby.CompatVersion;
import org.jruby.RubyArgsFile$s$0$0$getc;
import org.jruby.RubyArgsFile$s$0$0$readchar;
import org.jruby.RubyArgsFile$s$0$1$seek;
import org.jruby.RubyArgsFile$s$1$0$set_pos;
import org.jruby.RubyArgsFile$s$0$1$bytes;
import org.jruby.RubyArgsFile$s$0$0$eof_p;
import org.jruby.RubyArgsFile$s$0$0$filename;
import org.jruby.RubyArgsFile$s$0$0$fileno;
import org.jruby.RubyArgsFile$s$0$1$to_a;
import org.jruby.RubyArgsFile$s$0$1$readline;
import org.jruby.RubyArgsFile$s$0$0$each_char;
import org.jruby.RubyArgsFile$s$0$0$tell;
import org.jruby.RubyArgsFile$s$0$0$closed_p;
import org.jruby.RubyArgsFile$s$0$0$to_io;
import org.jruby.RubyArgsFile$s$0$0$rewind;
import org.jruby.RubyArgsFile$s$0$2$read;
import org.jruby.RubyArgsFile$s$0$0$lineno;
import org.jruby.RubyArgsFile$s$0$1$each_line;
import org.jruby.RubyArgsFile$s$0$0$binmode;
import org.jruby.RubyArgsFile$s$0$1$each_byte;
import org.jruby.RubyArgsFile$s$1$0$lineno_set;
import org.jruby.RubyArgsFile$s$0$0$skip;
import org.jruby.runtime.Block;
import org.jruby.RubyArgsFile$s$0$0$chars;
import org.jruby.RubyArgsFile$s$0$0$eof;
import org.jruby.RubyArgsFile$s$0$0$to_s;
import org.jruby.RubyArgsFile$s$0$1$gets;
import org.jruby.RubyArgsFile$s$0$0$file;
import org.jruby.RubyArgsFile$s$0$1$readlines;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyArgsFile;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyArgsFile$s$0$0$close;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyArgsFile$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyArgsFile$s$0$0$close(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "close", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("close", javaMethod);
        javaMethod = new RubyArgsFile$s$0$1$readlines(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readlines", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "readlines", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("readlines", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$file(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "file", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "file", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("file", javaMethod);
        javaMethod = new RubyArgsFile$s$0$1$gets(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "gets", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "gets", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("gets", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "to_s", IRubyObject.class, new Class[] { IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$eof(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "eof", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "eof", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("eof", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$chars(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "chars", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "chars", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("chars", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$skip(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "skip", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "skip", IRubyObject.class, new Class[] { IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("skip", javaMethod);
        javaMethod = new RubyArgsFile$s$1$0$lineno_set(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "lineno_set", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "lineno_set", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("lineno=", javaMethod);
        javaMethod = new RubyArgsFile$s$0$1$each_byte(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "each_byte", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "each_byte", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("each_byte", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$binmode(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "binmode", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "binmode", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("binmode", javaMethod);
        javaMethod = new RubyArgsFile$s$0$1$each_line(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "each_line", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "each_line", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("each_line", javaMethod);
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$lineno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "lineno", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "lineno", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("lineno", javaMethod);
        javaMethod = new RubyArgsFile$s$0$2$read(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "read", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "read", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("read", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$rewind(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rewind", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "rewind", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("rewind", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$to_io(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_io", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "to_io", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("to_io", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$closed_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "closed_p", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "closed_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("closed?", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$tell(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "tell", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "tell", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("tell", javaMethod);
        cls.defineAlias("pos", "tell");
        javaMethod = new RubyArgsFile$s$0$0$each_char(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_char", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "each_char", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("each_char", javaMethod);
        javaMethod = new RubyArgsFile$s$0$1$readline(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readline", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "readline", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("readline", javaMethod);
        javaMethod = new RubyArgsFile$s$0$1$to_a(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "to_a", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "to_a", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("to_a", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$fileno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "fileno", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "fileno", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("fileno", javaMethod);
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$filename(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "filename", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "filename", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("filename", javaMethod);
        cls.defineAlias("path", "filename");
        javaMethod = new RubyArgsFile$s$0$0$eof_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "eof_p", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "eof_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("eof?", javaMethod);
        javaMethod = new RubyArgsFile$s$0$1$bytes(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "bytes", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "bytes", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("bytes", javaMethod);
        javaMethod = new RubyArgsFile$s$1$0$set_pos(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_pos", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "set_pos", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("pos=", javaMethod);
        javaMethod = new RubyArgsFile$s$0$1$seek(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "seek", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "seek", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("seek", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$readchar(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "readchar", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "readchar", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("readchar", javaMethod);
        javaMethod = new RubyArgsFile$s$0$0$getc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "getc", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyArgsFile.class, "getc", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("getc", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyArgsFile.close", "close");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.readlines", "readlines");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.file", "file");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.gets", "gets");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.eof", "eof");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.chars", "chars");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.skip", "skip");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.lineno_set", "lineno=");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.each_byte", "each_byte");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.binmode", "binmode");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.each_line", "each_line");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.lineno", "lineno");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.read", "read");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.rewind", "rewind");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.to_io", "to_io");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.closed_p", "closed?");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.tell", "tell");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.each_char", "each_char");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.readline", "readline");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.to_a", "to_a");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.fileno", "fileno");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.filename", "filename");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.eof_p", "eof?");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.bytes", "bytes");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.set_pos", "pos=");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.seek", "seek");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.readchar", "readchar");
        runtime.addBoundMethod("org.jruby.RubyArgsFile.getc", "getc");
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyArgsFile$s$0$1$each19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "each19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyArgsFile.class, "each19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("each", javaMethod);
            javaMethod = new RubyArgsFile$s$0$0$op_binmode(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "op_binmode", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyArgsFile.class, "op_binmode", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
            cls.addMethodAtBootTimeOnly("binmode?", javaMethod);
            javaMethod = new RubyArgsFile$s$0$1$each_line19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "each_line19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyArgsFile.class, "each_line19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("each_line", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyArgsFile.each19", "each");
            runtime.addBoundMethod("org.jruby.RubyArgsFile.op_binmode", "binmode?");
            runtime.addBoundMethod("org.jruby.RubyArgsFile.each_line19", "each_line");
        }
    }
}
