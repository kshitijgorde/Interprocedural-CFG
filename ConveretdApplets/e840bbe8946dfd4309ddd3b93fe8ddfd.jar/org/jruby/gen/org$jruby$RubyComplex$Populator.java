// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyComplex$i$0$1$rationalize;
import org.jruby.RubyComplex$i$0$0$abs2;
import org.jruby.RubyComplex$i$0$0$rect;
import org.jruby.RubyComplex$i$0$0$conjugate;
import org.jruby.RubyComplex$i$0$0$image;
import org.jruby.RubyComplex$i$0$0$real_p;
import org.jruby.RubyComplex$i$1$0$coerce;
import org.jruby.RubyComplex$i$0$0$inspect;
import org.jruby.RubyComplex$i$1$0$op_sub;
import org.jruby.RubyComplex$i$0$0$numerator;
import org.jruby.RubyComplex$i$0$0$hash;
import org.jruby.RubyComplex$i$1$0$marshal_load;
import org.jruby.RubyComplex$i$0$0$to_f;
import org.jruby.RubyComplex$i$1$0$op_div;
import org.jruby.RubyComplex$i$0$0$demoninator;
import org.jruby.RubyComplex$i$1$0$op_mul;
import org.jruby.RubyComplex$i$0$0$polar;
import org.jruby.RubyComplex$i$0$0$real;
import org.jruby.RubyComplex$i$0$0$to_r;
import org.jruby.RubyComplex$i$0$0$to_i;
import org.jruby.RubyComplex$i$1$0$eql_p;
import org.jruby.RubyComplex$i$0$0$to_s;
import org.jruby.RubyComplex$i$1$0$op_expt;
import org.jruby.RubyComplex$i$1$0$op_equal;
import org.jruby.RubyComplex$i$1$0$op_add;
import org.jruby.RubyComplex$i$0$0$negate;
import org.jruby.RubyComplex$i$0$0$marshal_dump;
import org.jruby.RubyComplex$i$0$0$abs;
import org.jruby.RubyComplex$i$1$0$fdiv;
import org.jruby.RubyComplex$i$0$0$arg;
import org.jruby.RubyComplex$s$0$1$polar19;
import org.jruby.CompatVersion;
import org.jruby.RubyComplex$s$newInstance;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyComplex;
import org.jruby.RubyComplex$s$2$0$polar;
import org.jruby.RubyComplex$s$newInstanceBang;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyComplex$s$convert;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyComplex$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyComplex$s$convert(singletonClass, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "convert", true, CallConfiguration.FrameNoneScopeNone, false);
        singletonClass.addMethodAtBootTimeOnly("convert", javaMethod);
        javaMethod = new RubyComplex$s$newInstanceBang(singletonClass, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "newInstanceBang", true, CallConfiguration.FrameNoneScopeNone, false);
        singletonClass.addMethodAtBootTimeOnly("new!", javaMethod);
        javaMethod = new RubyComplex$s$2$0$polar(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "polar", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "polar", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("polar", javaMethod);
        javaMethod = new RubyComplex$s$newInstance(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "newInstance", true, CallConfiguration.FrameNoneScopeNone, false);
        singletonClass.addMethodAtBootTimeOnly("rect", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("rectangular", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyComplex.convert", "convert");
        runtime.addBoundMethod("org.jruby.RubyComplex.newInstanceBang", "new!");
        runtime.addBoundMethod("org.jruby.RubyComplex.polar", "polar");
        runtime.addBoundMethod("org.jruby.RubyComplex.newInstance", "rect");
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyComplex$s$0$1$polar19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "polar19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyComplex.class, "polar19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("polar", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyComplex.polar19", "polar");
        }
        javaMethod = new RubyComplex$i$0$0$arg(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "arg", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "arg", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("arg", javaMethod);
        cls.addMethodAtBootTimeOnly("angle", javaMethod);
        cls.addMethodAtBootTimeOnly("phase", javaMethod);
        javaMethod = new RubyComplex$i$1$0$fdiv(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "fdiv", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "fdiv", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("fdiv", javaMethod);
        javaMethod = new RubyComplex$i$0$0$abs(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "abs", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "abs", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("abs", javaMethod);
        cls.addMethodAtBootTimeOnly("magnitude", javaMethod);
        javaMethod = new RubyComplex$i$0$0$marshal_dump(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "marshal_dump", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "marshal_dump", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("marshal_dump", javaMethod);
        javaMethod = new RubyComplex$i$0$0$negate(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "negate", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "negate", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("-@", javaMethod);
        javaMethod = new RubyComplex$i$1$0$op_add(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_add", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "op_add", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new RubyComplex$i$1$0$op_equal(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new RubyComplex$i$1$0$op_expt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_expt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "op_expt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("**", javaMethod);
        javaMethod = new RubyComplex$i$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "to_s", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyComplex$i$1$0$eql_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "eql_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new RubyComplex$i$0$0$to_i(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_i", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "to_i", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        javaMethod = new RubyComplex$i$0$0$to_r(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_r", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "to_r", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_r", javaMethod);
        javaMethod = new RubyComplex$i$0$0$real(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "real", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "real", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("real", javaMethod);
        javaMethod = new RubyComplex$i$0$0$polar(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "polar", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "polar", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("polar", javaMethod);
        javaMethod = new RubyComplex$i$1$0$op_mul(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "op_mul", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new RubyComplex$i$0$0$demoninator(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "demoninator", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "demoninator", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("denominator", javaMethod);
        javaMethod = new RubyComplex$i$1$0$op_div(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_div", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "op_div", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("/", javaMethod);
        cls.addMethodAtBootTimeOnly("quo", javaMethod);
        javaMethod = new RubyComplex$i$0$0$to_f(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "to_f", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new RubyComplex$i$1$0$marshal_load(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "marshal_load", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "marshal_load", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("marshal_load", javaMethod);
        javaMethod = new RubyComplex$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "hash", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new RubyComplex$i$0$0$numerator(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "numerator", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "numerator", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("numerator", javaMethod);
        javaMethod = new RubyComplex$i$1$0$op_sub(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_sub", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "op_sub", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("-", javaMethod);
        javaMethod = new RubyComplex$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "inspect", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyComplex$i$1$0$coerce(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "coerce", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "coerce", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("coerce", javaMethod);
        javaMethod = new RubyComplex$i$0$0$real_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "real_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "real_p", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("real?", javaMethod);
        javaMethod = new RubyComplex$i$0$0$image(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "image", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "image", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("imaginary", javaMethod);
        cls.addMethodAtBootTimeOnly("imag", javaMethod);
        javaMethod = new RubyComplex$i$0$0$conjugate(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "conjugate", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "conjugate", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("conjugate", javaMethod);
        cls.addMethodAtBootTimeOnly("conj", javaMethod);
        cls.addMethodAtBootTimeOnly("~", javaMethod);
        javaMethod = new RubyComplex$i$0$0$rect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "rect", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("rectangular", javaMethod);
        cls.addMethodAtBootTimeOnly("rect", javaMethod);
        javaMethod = new RubyComplex$i$0$0$abs2(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "abs2", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyComplex.class, "abs2", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("abs2", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyComplex.arg", "arg");
        runtime.addBoundMethod("org.jruby.RubyComplex.fdiv", "fdiv");
        runtime.addBoundMethod("org.jruby.RubyComplex.abs", "abs");
        runtime.addBoundMethod("org.jruby.RubyComplex.marshal_dump", "marshal_dump");
        runtime.addBoundMethod("org.jruby.RubyComplex.negate", "-@");
        runtime.addBoundMethod("org.jruby.RubyComplex.op_add", "+");
        runtime.addBoundMethod("org.jruby.RubyComplex.op_equal", "==");
        runtime.addBoundMethod("org.jruby.RubyComplex.op_expt", "**");
        runtime.addBoundMethod("org.jruby.RubyComplex.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyComplex.eql_p", "eql?");
        runtime.addBoundMethod("org.jruby.RubyComplex.to_i", "to_i");
        runtime.addBoundMethod("org.jruby.RubyComplex.to_r", "to_r");
        runtime.addBoundMethod("org.jruby.RubyComplex.real", "real");
        runtime.addBoundMethod("org.jruby.RubyComplex.polar", "polar");
        runtime.addBoundMethod("org.jruby.RubyComplex.op_mul", "*");
        runtime.addBoundMethod("org.jruby.RubyComplex.demoninator", "denominator");
        runtime.addBoundMethod("org.jruby.RubyComplex.op_div", "/");
        runtime.addBoundMethod("org.jruby.RubyComplex.to_f", "to_f");
        runtime.addBoundMethod("org.jruby.RubyComplex.marshal_load", "marshal_load");
        runtime.addBoundMethod("org.jruby.RubyComplex.hash", "hash");
        runtime.addBoundMethod("org.jruby.RubyComplex.numerator", "numerator");
        runtime.addBoundMethod("org.jruby.RubyComplex.op_sub", "-");
        runtime.addBoundMethod("org.jruby.RubyComplex.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyComplex.coerce", "coerce");
        runtime.addBoundMethod("org.jruby.RubyComplex.real_p", "real?");
        runtime.addBoundMethod("org.jruby.RubyComplex.image", "imaginary");
        runtime.addBoundMethod("org.jruby.RubyComplex.conjugate", "conjugate");
        runtime.addBoundMethod("org.jruby.RubyComplex.rect", "rectangular");
        runtime.addBoundMethod("org.jruby.RubyComplex.abs2", "abs2");
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyComplex$i$0$1$rationalize(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "rationalize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyComplex.class, "rationalize", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("rationalize", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyComplex.rationalize", "rationalize");
        }
    }
}
