// 
// Decompiled by Procyon v0.5.30
// 

package pa.a.b.a;

import java.awt.Image;
import java.util.Hashtable;
import java.awt.Toolkit;

public final class b
{
    public static final int int = 41;
    public static final int else = 22;
    public static final int a = 22;
    public static final int try = 17;
    public static final int char = 374;
    private static Toolkit if;
    private static Hashtable case;
    private static boolean do;
    private static final int goto = 8;
    private static final int[] new;
    private static final int for = 2745;
    private static final long[] byte;
    
    static {
        b.if = Toolkit.getDefaultToolkit();
        b.do = false;
        new = new int[] { -16777216, -65536, -1, -10263709, -8388608, -6513508, -12800, -3223858 };
        byte = new long[] { -506381209866536712L, -506382001331736327L, 4686182379353254411L, -6193669895443731717L, -289360692609803677L, 586040427934185785L, 867121105182264587L, -6769741874236513779L, 838246824258900901L, 723853627686717963L, -6554413504218290934L, 839087976222885914L, 1378716160356386826L, -6410019778268493806L, -7562376024813663470L, -7562376024813663470L, -7562376026288799987L, 797866166408025874L, 796458812865091346L, 796458812865091346L, 796362116844096269L, -7560962070308581112L, 2474774209266912008L, -490588859502490357L, 1339553755368460359L, 939865077887470859L, 1303633861452436015L, 1162227973106635327L, 2323590308230009355L, 979271282653073479L, 1300147550518972939L, 943345891346681135L, 1162227973190520127L, 2323595797212368911L, 1013600333443768083L, 588291541561460491L, 646601983608895264L, 5119760524252301069L, 797769491727321874L, 3967694431100668690L, 1659689747130157842L, 2812516826780018445L, 797751830335467277L, 1372814073188715277L, 3972253014161178400L, 4544707125356533008L, 3968246372515735304L, 940990685818325009L, 2815040205982731567L, 1162509448167624303L, 1157159095571188514L, 2239142416349804307L, 2815654712561440945L, 1443423639555936311L, 939864906220572727L, 939864975478295819L, 1310274868651427853L, 589704417408124951L, 2895541980518617631L, 579072131210349835L, 1308023090765563943L, 942111208476119095L, 1300147378852073527L, 1300147448109797899L, 949986898461788173L, 589709914882377751L, 2895541937602956045L, 2236047415688306450L, 796335624731957000L, 2815331469543616272L, 1084823286871433759L, 1371392300553276231L, 805874987732961560L, 727358939700267282L, 1230073222051014408L, 1301560118802713362L, 2812552978157603602L, 5120670897666141960L, 939025845686642445L, 797725407511586568L, 2812523312080623368L, 657280487798609677L, 797734203387744795L, 939034663321413384L, 1301560118803041037L, 2812552978157931277L, 5120670919140650760L, 939025845686642450L, 796318032628033288L, 2812512325671259415L, 579028254208886807L, 1300147344356547346L, 1949223143261408791L, 1162509379414461969L, 586043074121238570L, 579318430791048971L, 2813351433431746602L, 581265657074633233L, 1443423605061455898L, 589704417408649282L, 589704417409173535L, 1161656192700453423L, 794899662493978376L, 939034663187519240L, 1659622677054756621L, 797725407277680935L, 655002201156815634L, 2236048326373608712L, 2237465536949131792L, 1875800999341137672L, 4758104760858257160L, 2238323134678829837L, 3389811996589230095L, 580128856540384535L, 582943653385668621L, 1085942610998593815L, 659505864973489938L, 796326828504191515L, 939034684762756872L, 1301841593376968462L, 1227277125495033611L, 590543340836689675L, 2813367728890120241L, 1299587637103955986L, 1806516373729448210L, 654156719798618672L, 722879473259781896L, 734097769526790930L, 2238323168904224525L, 797734237830131464L, 939034663187519240L, 1659605166088194071L, 939864803005503241L, 3965726274433781003L, 1303519457583106071L, 942111173980598282L, 589709914882902026L, 3461588261846846751L, 1161664954485379595L, 945492094929012749L, 585206315255007255L, 583808823257992463L, 1300147275637004041L, 3965726274433782283L, 943231487393466391L, 1301837225010008346L, 582952333614319666L, 797708979013289994L, 2236906976855136011L, 2236890612409370642L, 1734457646222280978L, 1230064417384957970L, 2236048416432467725L, 797734203389118984L, 3390378266810390285L, 797725407478560525L, 585200817780754455L, 590543396151954699L, 1301267652467562257L, 1659883265220087051L, 1303519456644440845L, 582949052243445770L, 3461588261846846751L, 579328321715638795L, 943345891346681111L, 582389555442229010L, 796318032628036104L, 1659590821064412431L, 579019354902959881L, 1659866798482984215L, 579305301141686295L, 1301837225008967946L, 589705542524078858L, 1659649064983005975L, 799128448572787487L, 794921695844504072L, 1301560191196140049L, 1301841597486862879L, 583796805690395915L, 1305771496658898187L, 1303633861452435999L, 582943709220769035L, 1303519512161814551L, 582949017966544905L, 1659883299831093001L, 580697218153383951L, 2527120879785544979L, 945483354803406895L, 1300147344360212527L, 1300147311742489099L, 945483341786187815L, 1300147309997656114L, 582943528948206349L, 1083125704924008727L, 655002201022925581L, 1659593105988586760L, 1662409964532533809L, 722853097932460296L, 4182447772982708234L, 2236906976318789387L, 1660455019857121833L, 588291570735321617L, 1301841631813112840L, 1308023090446469175L, 939864906087401527L, 939864871860637727L, 1161661570085226567L, 587452617594439703L, 590543396151954699L, 1301267652467570441L, 1659866798399099415L, 580721437758523415L, 942111208340852754L, 591961714697111602L, 591961714696589343L, 1161664954517622055L, 596454439549340951L, 582943687744882701L, 1085942610864376087L, 664009464600858386L, 796318032495579683L, 939025888669732616L, 1878311141639196430L, 1227285921587009288L, 4181603382459829047L, 799119686838524210L, 655284844399040786L, 1230064417384957970L, 2814787254370503442L, 2814787254370503442L, 2812532121393440525L, 797751796461741837L, 797725407511589384L, 1659601807473776392L, 655002334066575624L, 1660996010027519771L, 1304650845585740557L, 2814787254370831117L, 2814787254370831117L, 2812532121393440530L, 796344421578188562L, 796318032628036104L, 1659590821064412439L, 579019355170871049L, 582954515441846287L, 1950651331389624849L, 1015289114684164151L, 1013600367802982155L, 590543340836689675L, 2813367728890120289L, 3501852210155167757L, 1740374122203389965L, 1740374122204434503L, 939864940447467567L, 939864837366155314L, 582943571863867927L, 579028254208886807L, 939864871725241122L, 1372762390874230071L, 2309528739996437815L, 2309528739996437831L, 1172926066628429879L, 589709914882377751L, 590543396151299858L, 796318032394658079L, 650795512417296136L, 1086249400344780562L, 1228945106377649934L, 1227268329669400339L, 588291541023006499L, 2236924568260384913L, 1443423880023121677L, 797804593841900811L, 1312570829401952823L, 589699074384138775L, 583005144431922443L, 1305771252900235295L, 939864906085509133L, 587452651875011864L, 2238864116813731871L, 1300147448109797899L, 952238844305936907L, 943231542909929485L, 1085942611132811591L, 650804308510320392L, 1522228824650486289L, 1019819081234583057L, 586043108212282120L, 3028681946575604527L, 795036072702904338L, 7425609086152675943L, 941286463001214752L, 4543299771947298568L, 3390378266803576637L, 1659601807473780488L, 1235975349449067282L, 3391251270849073933L, 7425609086236560743L, 941286484475723552L, 4544707125356015368L, 3391785620212293437L, 1659590821064412455L, 581288781012210187L, 949995797769818641L, 1031057236942524680L, 2453074385360661000L, 736078122645392136L, -7995981623175506163L, 797866166274115344L, 5119760525861653266L, 1688875205051690768L, 2382455935945817888L, 4543308548176743181L, -7560968672746911982L, 796458812865058672L, 940990685818851361L, 1166170667188428863L, 1301837534330887950L, 1227268329269889800L, 3028682050057472776L, -490588859502490357L, 1339553755373702411L, 1339553755373702411L, 1314805071389332119L, 942111689544502679L, 1300147859920457111L, 1300147346185589259L, 954517101283577239L, 1301837740506155042L, 5983078318988528392L, 1295968001918831370L, -6554133128736496373L, 767031451883080357L, 1372931629774932749L, -6770302625200102901L, 982359821901731345L, 583800139236968482L, 579459167891881020L, 647388031140735499L, -6193669895443731957L, -6193669185196103646L, 627118521347275000L, -506381209878613512L, 7493989779944505344L };
    }
    
    private static Image if(final int[] array, final int n) {
        final pa.a.c.b b = new pa.a.c.b(22, 22);
        for (int i = 0; i < 22; ++i) {
            for (int j = 0; j < 22; ++j) {
                b.do[i * 22 + j] = array[i * 415 + (n - 1) * 22 + 41 + j];
            }
        }
        b.a();
        b.do = null;
        return b.new;
    }
    
    private static Image a(final int[] array, final int n) {
        final pa.a.c.b b = new pa.a.c.b(41, 22);
        for (int i = 0; i < 22; ++i) {
            for (int j = 0; j < 41; ++j) {
                b.do[i * 41 + j] = array[i * 415 + j];
            }
        }
        b.a();
        b.do = null;
        return b.new;
    }
    
    public static Image a(final String s) {
        return b.case.get(s);
    }
    
    public static void a() {
        if (b.do) {
            return;
        }
        final int[] array = new int[9130];
        a(array, b.new, 2745, b.byte);
        final String[] array2 = { "logo", "zoomIn_off", "zoomOut_off", "rotate_off", "pan_off", "reset_off", "hotspot_off", "info_off", "zoomIn_on", "zoomOut_on", "rotate_on", "pan_on", "reset_on", "hotspot_on", "info_on", "max_zoom", "sand_watch", "hotspot_gray" };
        (b.case = new Hashtable(array2.length)).put(array2[0], a(array, 0));
        for (int i = 1; i < array2.length; ++i) {
            b.case.put(array2[i], if(array, i));
        }
        b.do = true;
    }
    
    private static void a(final int[] array, final int[] array2, final int n, final long[] array3) {
        int n2 = 0;
        for (int i = 0; i < n; i += 8) {
            for (int j = 0; j < 8; ++j) {
                long n3;
                if (j == 0) {
                    n3 = (array3[i / 8] >> 56 & 0xFFL);
                }
                else if (j == 1 && i + 1 < n) {
                    n3 = (array3[i / 8] >> 48 & 0xFFL);
                }
                else if (j == 2 && i + 2 < n) {
                    n3 = (array3[i / 8] >> 40 & 0xFFL);
                }
                else if (j == 3 && i + 3 < n) {
                    n3 = (array3[i / 8] >> 32 & 0xFFL);
                }
                else if (j == 4 && i + 4 < n) {
                    n3 = (array3[i / 8] >> 24 & 0xFFL);
                }
                else if (j == 5 && i + 5 < n) {
                    n3 = (array3[i / 8] >> 16 & 0xFFL);
                }
                else if (j == 6 && i + 6 < n) {
                    n3 = (array3[i / 8] >> 8 & 0xFFL);
                }
                else {
                    if (j != 7 || i + 7 >= n) {
                        break;
                    }
                    n3 = (array3[i / 8] & 0xFFL);
                }
                for (int n4 = 0; n4 < n3 >> 3; ++n4) {
                    array[n2++] = array2[(int)n3 & 0x7];
                }
            }
        }
    }
}
