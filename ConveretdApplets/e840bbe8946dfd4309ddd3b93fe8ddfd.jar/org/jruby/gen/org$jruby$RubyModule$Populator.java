// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.compiler.ASTInspector;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyModule$i$0$1$const_get;
import org.jruby.RubyModule$i$0$0$name19;
import org.jruby.RubyModule$i$0$1$const_defined_p19;
import org.jruby.RubyModule$i$0$0$attr19;
import org.jruby.RubyModule$i$0$1$public_instance_methods19;
import org.jruby.RubyModule$i$0$1$private_instance_methods19;
import org.jruby.RubyModule$i$0$1$instance_methods19;
import org.jruby.RubyModule$i$0$1$protected_instance_methods19;
import org.jruby.RubyModule$i$constants19;
import org.jruby.RubyModule$i$0$0$initialize19;
import org.jruby.RubyModule$i$0$0$class_variables19;
import org.jruby.RubyModule$i$1$0$const_get;
import org.jruby.RubyModule$i$1$0$const_defined_p;
import org.jruby.RubyModule$i$0$1$attr;
import org.jruby.RubyModule$i$0$1$public_instance_methods;
import org.jruby.RubyModule$i$0$1$private_instance_methods;
import org.jruby.RubyModule$i$0$1$instance_methods;
import org.jruby.RubyModule$i$0$1$protected_instance_methods;
import org.jruby.RubyModule$i$0$0$constants;
import org.jruby.RubyModule$i$0$0$class_variables;
import org.jruby.CompatVersion;
import org.jruby.RubyModule$i$0$0$attr_accessor;
import org.jruby.RubyModule$i$2$0$class_variable_set;
import org.jruby.RubyModule$i$1$0$initialize_copy;
import org.jruby.RubyModule$i$1$0$method_defined_p;
import org.jruby.RubyModule$i$1$0$method_undefined;
import org.jruby.RubyModule$i$1$0$public_method_defined;
import org.jruby.RubyModule$i$1$0$op_ge;
import org.jruby.RubyModule$i$1$0$append_features;
import org.jruby.RubyFixnum;
import org.jruby.RubyModule$i$0$0$hash;
import org.jruby.RubyModule$i$1$0$class_variable_get;
import org.jruby.RubyModule$i$1$0$method_removed;
import org.jruby.RubyModule$i$0$0$attr_writer;
import org.jruby.RubyModule$i$1$0$private_method_defined;
import org.jruby.RubyBoolean;
import org.jruby.RubyModule$i$1$0$op_eqq;
import org.jruby.RubyModule$i$1$0$remove_const;
import org.jruby.RubyModule$i$0$0$name;
import org.jruby.RubyModule$i$2$0$const_set;
import org.jruby.RubyModule$i$1$0$op_le;
import org.jruby.RubyModule$i$0$0$ancestors;
import org.jruby.RubyModule$i$0$0$freeze;
import org.jruby.RubyModule$i$0$0$rbPublic;
import org.jruby.RubyModule$i$1$0$op_equal;
import org.jruby.RubyModule$i$0$0$to_s;
import org.jruby.RubyModule$i$1$0$const_missing;
import org.jruby.RubyModule$i$2$0$alias_method;
import org.jruby.RubyModule$i$0$0$remove_method;
import org.jruby.RubyModule$i$0$0$rbPrivate;
import org.jruby.RubyModule$i$0$0$rbProtected;
import org.jruby.RubyModule$i$1$0$extended;
import org.jruby.RubyModule$i$1$0$included;
import org.jruby.RubyModule$i$0$0$undef_method;
import org.jruby.RubyModule$i$0$0$private_class_method;
import org.jruby.RubyModule$i$0$0$module_function;
import org.jruby.RubyModule$i$0$0$initialize;
import org.jruby.RubyModule$i$1$0$extend_object;
import org.jruby.RubyModule$i$1$0$protected_method_defined;
import org.jruby.RubyModule$i$1$0$method_added;
import org.jruby.RubyModule$i$0$0$included_modules;
import org.jruby.RubyModule$i$1$0$remove_class_variable;
import org.jruby.RubyModule$i$1$0$class_variable_defined_p;
import org.jruby.RubyModule$i$module_eval;
import org.jruby.RubyModule$i$0$0$public_class_method;
import org.jruby.RubyModule$i$1$0$include_p;
import org.jruby.RubyModule$i$0$0$attr_reader;
import org.jruby.RubyModule$i$1$0$op_lt;
import org.jruby.RubyModule$i$1$0$op_cmp;
import org.jruby.RubyModule$i$1$0$instance_method;
import org.jruby.RubyModule$i$module_exec;
import org.jruby.RubyModule$i$0$0$include;
import org.jruby.RubyModule$i$define_method;
import org.jruby.RubyModule$i$1$0$op_gt;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Block;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.runtime.ThreadContext;
import org.jruby.RubyArray;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyModule$s$0$0$nesting;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyModule$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyModule$s$0$0$nesting(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "nesting", true, CallConfiguration.FrameFullScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "nesting", RubyArray.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("nesting", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyModule.nesting", "nesting");
        javaMethod = new RubyModule$i$1$0$op_gt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "op_gt", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">", javaMethod);
        javaMethod = new RubyModule$i$define_method(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "define_method", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("define_method", javaMethod);
        javaMethod = new RubyModule$i$0$0$include(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "include", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "include", RubyModule.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("include", javaMethod);
        javaMethod = new RubyModule$i$module_exec(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "module_exec", false, CallConfiguration.FrameFullScopeNone, false);
        cls.addMethodAtBootTimeOnly("module_exec", javaMethod);
        cls.addMethodAtBootTimeOnly("class_exec", javaMethod);
        javaMethod = new RubyModule$i$1$0$instance_method(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "instance_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "instance_method", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("instance_method", javaMethod);
        javaMethod = new RubyModule$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "op_cmp", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new RubyModule$i$1$0$op_lt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "op_lt", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<", javaMethod);
        javaMethod = new RubyModule$i$0$0$attr_reader(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "attr_reader", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "attr_reader", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("attr_reader", javaMethod);
        javaMethod = new RubyModule$i$1$0$include_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "include_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "include_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("include?", javaMethod);
        javaMethod = new RubyModule$i$0$0$public_class_method(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "public_class_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "public_class_method", RubyModule.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("public_class_method", javaMethod);
        javaMethod = new RubyModule$i$module_eval(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "module_eval", false, CallConfiguration.FrameFullScopeNone, false);
        cls.addMethodAtBootTimeOnly("module_eval", javaMethod);
        cls.addMethodAtBootTimeOnly("class_eval", javaMethod);
        javaMethod = new RubyModule$i$1$0$class_variable_defined_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "class_variable_defined_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "class_variable_defined_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("class_variable_defined?", javaMethod);
        javaMethod = new RubyModule$i$1$0$remove_class_variable(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "remove_class_variable", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "remove_class_variable", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("remove_class_variable", javaMethod);
        javaMethod = new RubyModule$i$0$0$included_modules(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "included_modules", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "included_modules", RubyArray.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("included_modules", javaMethod);
        javaMethod = new RubyModule$i$1$0$method_added(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "method_added", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "method_added", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("method_added", javaMethod);
        javaMethod = new RubyModule$i$1$0$protected_method_defined(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "protected_method_defined", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "protected_method_defined", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("protected_method_defined?", javaMethod);
        javaMethod = new RubyModule$i$1$0$extend_object(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "extend_object", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "extend_object", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("extend_object", javaMethod);
        javaMethod = new RubyModule$i$0$0$initialize(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "initialize", false, CallConfiguration.FrameFullScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "initialize", IRubyObject.class, new Class[] { Block.class }, false);
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new RubyModule$i$0$0$module_function(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "module_function", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "module_function", RubyModule.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("module_function", javaMethod);
        javaMethod = new RubyModule$i$0$0$private_class_method(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "private_class_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "private_class_method", RubyModule.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("private_class_method", javaMethod);
        javaMethod = new RubyModule$i$0$0$undef_method(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "undef_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "undef_method", RubyModule.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("undef_method", javaMethod);
        javaMethod = new RubyModule$i$1$0$included(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "included", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "included", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("included", javaMethod);
        javaMethod = new RubyModule$i$1$0$extended(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "extended", false, CallConfiguration.FrameFullScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "extended", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("extended", javaMethod);
        javaMethod = new RubyModule$i$0$0$rbProtected(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "rbProtected", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "rbProtected", RubyModule.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("protected", javaMethod);
        javaMethod = new RubyModule$i$0$0$rbPrivate(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "rbPrivate", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "rbPrivate", RubyModule.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("private", javaMethod);
        javaMethod = new RubyModule$i$0$0$remove_method(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "remove_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "remove_method", RubyModule.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("remove_method", javaMethod);
        javaMethod = new RubyModule$i$2$0$alias_method(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 2, "alias_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "alias_method", RubyModule.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("alias_method", javaMethod);
        javaMethod = new RubyModule$i$1$0$const_missing(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "const_missing", false, CallConfiguration.FrameFullScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "const_missing", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("const_missing", javaMethod);
        javaMethod = new RubyModule$i$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "to_s", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyModule$i$1$0$op_equal(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new RubyModule$i$0$0$rbPublic(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "rbPublic", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "rbPublic", RubyModule.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("public", javaMethod);
        javaMethod = new RubyModule$i$0$0$freeze(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "freeze", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "freeze", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("freeze", javaMethod);
        javaMethod = new RubyModule$i$0$0$ancestors(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "ancestors", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "ancestors", RubyArray.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("ancestors", javaMethod);
        javaMethod = new RubyModule$i$1$0$op_le(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "op_le", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=", javaMethod);
        javaMethod = new RubyModule$i$2$0$const_set(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "const_set", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "const_set", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("const_set", javaMethod);
        javaMethod = new RubyModule$i$0$0$name(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "name", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "name", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("name", javaMethod);
        javaMethod = new RubyModule$i$1$0$remove_const(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "remove_const", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "remove_const", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("remove_const", javaMethod);
        javaMethod = new RubyModule$i$1$0$op_eqq(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_eqq", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "op_eqq", RubyBoolean.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("===", javaMethod);
        javaMethod = new RubyModule$i$1$0$private_method_defined(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "private_method_defined", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "private_method_defined", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("private_method_defined?", javaMethod);
        javaMethod = new RubyModule$i$0$0$attr_writer(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "attr_writer", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "attr_writer", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("attr_writer", javaMethod);
        javaMethod = new RubyModule$i$1$0$method_removed(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "method_removed", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "method_removed", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("method_removed", javaMethod);
        javaMethod = new RubyModule$i$1$0$class_variable_get(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "class_variable_get", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "class_variable_get", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("class_variable_get", javaMethod);
        javaMethod = new RubyModule$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "hash", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new RubyModule$i$1$0$append_features(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "append_features", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "append_features", RubyModule.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("append_features", javaMethod);
        javaMethod = new RubyModule$i$1$0$op_ge(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "op_ge", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">=", javaMethod);
        javaMethod = new RubyModule$i$1$0$public_method_defined(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "public_method_defined", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "public_method_defined", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("public_method_defined?", javaMethod);
        javaMethod = new RubyModule$i$1$0$method_undefined(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "method_undefined", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "method_undefined", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("method_undefined", javaMethod);
        javaMethod = new RubyModule$i$1$0$method_defined_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "method_defined_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "method_defined_p", RubyBoolean.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("method_defined?", javaMethod);
        javaMethod = new RubyModule$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "initialize_copy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new RubyModule$i$2$0$class_variable_set(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 2, "class_variable_set", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "class_variable_set", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("class_variable_set", javaMethod);
        javaMethod = new RubyModule$i$0$0$attr_accessor(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "attr_accessor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyModule.class, "attr_accessor", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("attr_accessor", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyModule.op_gt", ">");
        runtime.addBoundMethod("org.jruby.RubyModule.define_method", "define_method");
        runtime.addBoundMethod("org.jruby.RubyModule.include", "include");
        runtime.addBoundMethod("org.jruby.RubyModule.module_exec", "module_exec");
        runtime.addBoundMethod("org.jruby.RubyModule.instance_method", "instance_method");
        runtime.addBoundMethod("org.jruby.RubyModule.op_cmp", "<=>");
        runtime.addBoundMethod("org.jruby.RubyModule.op_lt", "<");
        runtime.addBoundMethod("org.jruby.RubyModule.attr_reader", "attr_reader");
        runtime.addBoundMethod("org.jruby.RubyModule.include_p", "include?");
        runtime.addBoundMethod("org.jruby.RubyModule.public_class_method", "public_class_method");
        runtime.addBoundMethod("org.jruby.RubyModule.module_eval", "module_eval");
        runtime.addBoundMethod("org.jruby.RubyModule.class_variable_defined_p", "class_variable_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule.remove_class_variable", "remove_class_variable");
        runtime.addBoundMethod("org.jruby.RubyModule.included_modules", "included_modules");
        runtime.addBoundMethod("org.jruby.RubyModule.method_added", "method_added");
        runtime.addBoundMethod("org.jruby.RubyModule.protected_method_defined", "protected_method_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule.extend_object", "extend_object");
        runtime.addBoundMethod("org.jruby.RubyModule.initialize", "initialize");
        runtime.addBoundMethod("org.jruby.RubyModule.module_function", "module_function");
        runtime.addBoundMethod("org.jruby.RubyModule.private_class_method", "private_class_method");
        runtime.addBoundMethod("org.jruby.RubyModule.undef_method", "undef_method");
        runtime.addBoundMethod("org.jruby.RubyModule.included", "included");
        runtime.addBoundMethod("org.jruby.RubyModule.extended", "extended");
        runtime.addBoundMethod("org.jruby.RubyModule.rbProtected", "protected");
        runtime.addBoundMethod("org.jruby.RubyModule.rbPrivate", "private");
        runtime.addBoundMethod("org.jruby.RubyModule.remove_method", "remove_method");
        runtime.addBoundMethod("org.jruby.RubyModule.alias_method", "alias_method");
        runtime.addBoundMethod("org.jruby.RubyModule.const_missing", "const_missing");
        runtime.addBoundMethod("org.jruby.RubyModule.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyModule.op_equal", "==");
        runtime.addBoundMethod("org.jruby.RubyModule.rbPublic", "public");
        runtime.addBoundMethod("org.jruby.RubyModule.freeze", "freeze");
        runtime.addBoundMethod("org.jruby.RubyModule.ancestors", "ancestors");
        runtime.addBoundMethod("org.jruby.RubyModule.op_le", "<=");
        runtime.addBoundMethod("org.jruby.RubyModule.const_set", "const_set");
        runtime.addBoundMethod("org.jruby.RubyModule.name", "name");
        runtime.addBoundMethod("org.jruby.RubyModule.remove_const", "remove_const");
        runtime.addBoundMethod("org.jruby.RubyModule.op_eqq", "===");
        runtime.addBoundMethod("org.jruby.RubyModule.private_method_defined", "private_method_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule.attr_writer", "attr_writer");
        runtime.addBoundMethod("org.jruby.RubyModule.method_removed", "method_removed");
        runtime.addBoundMethod("org.jruby.RubyModule.class_variable_get", "class_variable_get");
        runtime.addBoundMethod("org.jruby.RubyModule.hash", "hash");
        runtime.addBoundMethod("org.jruby.RubyModule.append_features", "append_features");
        runtime.addBoundMethod("org.jruby.RubyModule.op_ge", ">=");
        runtime.addBoundMethod("org.jruby.RubyModule.public_method_defined", "public_method_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule.method_undefined", "method_undefined");
        runtime.addBoundMethod("org.jruby.RubyModule.method_defined_p", "method_defined?");
        runtime.addBoundMethod("org.jruby.RubyModule.initialize_copy", "initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyModule.class_variable_set", "class_variable_set");
        runtime.addBoundMethod("org.jruby.RubyModule.attr_accessor", "attr_accessor");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyModule$i$0$0$class_variables(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "class_variables", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "class_variables", RubyArray.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("class_variables", javaMethod);
            javaMethod = new RubyModule$i$0$0$constants(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "constants", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "constants", RubyArray.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("constants", javaMethod);
            javaMethod = new RubyModule$i$0$1$protected_instance_methods(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "protected_instance_methods", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "protected_instance_methods", RubyArray.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("protected_instance_methods", javaMethod);
            javaMethod = new RubyModule$i$0$1$instance_methods(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "instance_methods", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "instance_methods", RubyArray.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("instance_methods", javaMethod);
            javaMethod = new RubyModule$i$0$1$private_instance_methods(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "private_instance_methods", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "private_instance_methods", RubyArray.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("private_instance_methods", javaMethod);
            javaMethod = new RubyModule$i$0$1$public_instance_methods(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "public_instance_methods", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "public_instance_methods", RubyArray.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("public_instance_methods", javaMethod);
            javaMethod = new RubyModule$i$0$1$attr(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "attr", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "attr", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("attr", javaMethod);
            javaMethod = new RubyModule$i$1$0$const_defined_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "const_defined_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "const_defined_p", RubyBoolean.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("const_defined?", javaMethod);
            javaMethod = new RubyModule$i$1$0$const_get(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "const_get", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "const_get", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("const_get", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyModule.class_variables", "class_variables");
            runtime.addBoundMethod("org.jruby.RubyModule.constants", "constants");
            runtime.addBoundMethod("org.jruby.RubyModule.protected_instance_methods", "protected_instance_methods");
            runtime.addBoundMethod("org.jruby.RubyModule.instance_methods", "instance_methods");
            runtime.addBoundMethod("org.jruby.RubyModule.private_instance_methods", "private_instance_methods");
            runtime.addBoundMethod("org.jruby.RubyModule.public_instance_methods", "public_instance_methods");
            runtime.addBoundMethod("org.jruby.RubyModule.attr", "attr");
            runtime.addBoundMethod("org.jruby.RubyModule.const_defined_p", "const_defined?");
            runtime.addBoundMethod("org.jruby.RubyModule.const_get", "const_get");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyModule$i$0$0$class_variables19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "class_variables19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "class_variables19", RubyArray.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("class_variables", javaMethod);
            javaMethod = new RubyModule$i$0$0$initialize19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 0, "initialize19", false, CallConfiguration.FrameFullScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "initialize19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            javaMethod = new RubyModule$i$constants19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "constants19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("constants", javaMethod);
            javaMethod = new RubyModule$i$0$1$protected_instance_methods19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "protected_instance_methods19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "protected_instance_methods19", RubyArray.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("protected_instance_methods", javaMethod);
            javaMethod = new RubyModule$i$0$1$instance_methods19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "instance_methods19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "instance_methods19", RubyArray.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("instance_methods", javaMethod);
            javaMethod = new RubyModule$i$0$1$private_instance_methods19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "private_instance_methods19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "private_instance_methods19", RubyArray.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("private_instance_methods", javaMethod);
            javaMethod = new RubyModule$i$0$1$public_instance_methods19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "public_instance_methods19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "public_instance_methods19", RubyArray.class, new Class[] { IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("public_instance_methods", javaMethod);
            javaMethod = new RubyModule$i$0$0$attr19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "attr19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "attr19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("attr", javaMethod);
            javaMethod = new RubyModule$i$0$1$const_defined_p19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "const_defined_p19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "const_defined_p19", RubyBoolean.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("const_defined?", javaMethod);
            javaMethod = new RubyModule$i$0$0$name19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "name19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "name19", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("name", javaMethod);
            javaMethod = new RubyModule$i$0$1$const_get(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "const_get", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyModule.class, "const_get", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("const_get", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyModule.class_variables19", "class_variables");
            runtime.addBoundMethod("org.jruby.RubyModule.initialize19", "initialize");
            runtime.addBoundMethod("org.jruby.RubyModule.constants19", "constants");
            runtime.addBoundMethod("org.jruby.RubyModule.protected_instance_methods19", "protected_instance_methods");
            runtime.addBoundMethod("org.jruby.RubyModule.instance_methods19", "instance_methods");
            runtime.addBoundMethod("org.jruby.RubyModule.private_instance_methods19", "private_instance_methods");
            runtime.addBoundMethod("org.jruby.RubyModule.public_instance_methods19", "public_instance_methods");
            runtime.addBoundMethod("org.jruby.RubyModule.attr19", "attr");
            runtime.addBoundMethod("org.jruby.RubyModule.const_defined_p19", "const_defined?");
            runtime.addBoundMethod("org.jruby.RubyModule.name19", "name");
            runtime.addBoundMethod("org.jruby.RubyModule.const_get", "const_get");
        }
    }
    
    static {
        ASTInspector.addFrameAwareMethods("define_method", "module_eval", "attr", "attr_writer", "const_missing", "module_exec", "initialize", "module_function", "public", "class_eval", "nesting", "extended", "protected", "private", "class_exec", "attr_reader", "attr_accessor");
    }
}
