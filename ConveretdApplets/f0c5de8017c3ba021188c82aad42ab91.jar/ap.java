import java.util.Hashtable;

// 
// Decompiled by Procyon v0.5.30
// 

public class ap
{
    public static en a;
    public static Hashtable b;
    
    public static final en a() {
        return ap.a;
    }
    
    static {
        (ap.a = new en("MDGProperties")).a("DEFAULT_LANG", new eo("DEFAULT_LANG", "de", et.o, "String", 2));
        ap.a.a("DEFAULT_BLOCKSIZE", new eo("DEFAULT_BLOCKSIZE", "", et.j, "Integer", 2));
        ap.a.a("DEFAULT_VERSION", new eo("DEFAULT_VERSION", "1", et.o, "String", 2));
        ap.a.a("DEFAULT_TIMEZONE", new eo("DEFAULT_TIMEZONE", "1", et.o, "String", 2));
        ap.a.a("CONTENT_ENCODING", new eo("CONTENT_ENCODING", "gzip", et.o, "String", 2));
        ap.a.a("ENABLE_USE_CACHES", new eo("ENABLE_USE_CACHES", "true", et.p, "Boolean", 2));
        ap.a.a("REQUEST_TIMEOUT", new eo("REQUEST_TIMEOUT", "20000", et.j, "Integer", 2));
        ap.a.a("REQUEST_TIMEOUT_FACTOR", new eo("REQUEST_TIMEOUT_FACTOR", "0.1", et.m, "Double", 2));
        ap.a.a("REQUEST_TIMEOUT_EXCEPTIONS", new eo("REQUEST_TIMEOUT_EXCEPTIONS", "", ev.a, "Request", 2));
        ap.a.a("CHOST_LIST", new ep("CHOST_LIST", "mdg.mdgms.com", et.o, "StringArray", 2));
        ap.a.a("CPORT_LIST", new ep("CPORT_LIST", "80", et.j, "IntegerArray", 2));
        ap.a.a("VHOST_LIST", new ep("VHOST_LIST", "", et.o, "StringArray", 2));
        ap.a.a("PRIO_LIST", new ep("PRIO_LIST", "100", et.j, "IntegerArray", 1));
        ap.a.a("PROTOCOL_LIST", new ep("PROTOCOL_LIST", "http", et.o, "StringArray", 2));
        ap.a.a("PROXY_HOST_LIST", new ep("PROXY_HOST_LIST", "", et.o, "StringArray", 1));
        ap.a.a("PROXY_PORT_LIST", new ep("PROXY_PORT_LIST", "", et.j, "IntegerArray", 1));
        ap.a.a("HTTP_REQUEST_HEADER", new eo("HTTP_REQUEST_HEADER", "", ev.a, "Request", 2));
        ap.a.a("DONT_TOUCH_REQUESTS", new eo("DONT_TOUCH_REQUESTS", "false", et.p, "Boolean", 1));
        ap.a.a("COLLECT_DUPLICATES", new eo("COLLECT_DUPLICATES", "true", et.p, "Boolean", 1));
        ap.a.a("URI_PREFIX", new eo("URI_PREFIX", "", et.o, "String", 2));
        ap.a.a("NAME_REQ_ID", new eo("NAME_REQ_ID", "", et.o, "String", 1));
        ap.a.a("ID_ENCODING", new eo("ID_ENCODING", "", et.o, "String", 2));
        ap.a.a("MAX_GET_REQUEST_LENGTH", new eo("MAX_GET_REQUEST_LENGTH", "4000", et.j, "Integer", 2));
        ap.a.a("MAX_NESTED_POST_REQUEST_LENGTH", new eo("MAX_NESTED_POST_REQUEST_LENGTH", "64000", et.j, "Integer", 1));
        ap.a.a("APP_IDENTIFIER", new eo("APP_IDENTIFIER", "", et.o, "String", 1));
        ap.a.a("LOGIN", new eo("LOGIN", "", et.o, "String", 1));
        ap.a.a("PASSWORD", new eo("PASSWORD", "", et.o, "String", 1));
        ap.a.a("TYPE_APP_IDENTIFIER", new eo("TYPE_APP_IDENTIFIER", "", et.o, "String", 1));
        ap.a.a("TYPE_LOGIN", new eo("TYPE_LOGIN", "", et.o, "String", 1));
        ap.a.a("ID_USER", new eo("ID_USER", "", et.o, "String", 1));
        ap.a.a("CACHE_IMPLEMENTATION", new eo("CACHE_IMPLEMENTATION", "com.is_teledata.cache.LRUCache", et.o, "String", 2));
        ap.a.a("CACHE_MAX_SIZE", new eo("CACHE_MAX_SIZE", "-1", et.j, "Integer", 2));
        ap.a.a("CACHE_MAX_ELEMENTS", new eo("CACHE_MAX_ELEMENTS", "-1", et.j, "Integer", 2));
        ap.a.a("SIZE_FACTOR", new eo("SIZE_FACTOR", "6", et.j, "Integer", 2));
        ap.a.a("DEFAULT_CACHE_MODE", new eo("DEFAULT_CACHE_MODE", "DEFAULT_REQUEST", et.o, "String", 2));
        ap.a.a("DELTA_TIME_CRITICAL", new eo("DELTA_TIME_CRITICAL", "3", et.j, "Integer", 2));
        ap.a.a("CACHE_ADJUST_EXPIRY_TIME", new eo("CACHE_ADJUST_EXPIRY_TIME", "false", et.p, "Boolean", 2));
        ap.a.a("CACHE_ADJUST_EXPIRY_INTERVAL", new eo("CACHE_ADJUST_EXPIRY_INTERVAL", "60000", et.k, "Long", 1));
        ap.a.a("KEEP_ALIVE_WORKER_THREADS", new eo("KEEP_ALIVE_WORKER_THREADS", "5", et.j, "Integer", 2));
        ap.a.a("MAX_ALIVE_WORKER_THREADS", new eo("MAX_ALIVE_WORKER_THREADS", "20", et.j, "Integer", 2));
        ap.a.a("DEFAULT_FORMATTED_VALUE", new eo("DEFAULT_FORMATTED_VALUE", "", et.o, "String", 1));
        ap.a.a("DEFAULT_BOOLEAN_VALUE", new eo("DEFAULT_BOOLEAN_VALUE", "", et.p, "Boolean", 1));
        ap.a.a("DEFAULT_INT_VALUE", new eo("DEFAULT_INT_VALUE", "", et.j, "Integer", 1));
        ap.a.a("DEFAULT_FLOAT_VALUE", new eo("DEFAULT_FLOAT_VALUE", "", et.m, "Double", 1));
        ap.a.a("DEFAULT_DATE_VALUE", new eo("DEFAULT_DATE_VALUE", "", cq.a, "Date", 1));
        ap.a.a("DEFAULT_TIME_VALUE", new eo("DEFAULT_TIME_VALUE", "", cs.a, "Date", 1));
        ap.a.a("DEFAULT_STRING_VALUE", new eo("DEFAULT_STRING_VALUE", "", et.o, "String", 1));
        ap.a.a("DEFAULT_USE_DUMMY_QUOTE_VALUE", new eo("DEFAULT_USE_DUMMY_QUOTE_VALUE", "false", et.p, "Boolean", 1));
        ap.a.a("DEFAULT_ZDATE_VALUE", new eo("DEFAULT_ZDATE_VALUE", "", et.o, "String", 1));
        ap.a.a("DEFAULT_ZTIME_VALUE", new eo("DEFAULT_ZTIME_VALUE", "", et.o, "String", 1));
        ap.a.a("DEFAULT_DATETIME_VALUE", new eo("DEFAULT_DATETIME_VALUE", "", et.m, "Double", 1));
        ap.a.a("STATS_HISTORY_LENGTH", new eo("STATS_HISTORY_LENGTH", "10", et.j, "Integer", 1));
        ap.a.a("STATS_INTERVALLS", new ep("STATS_INTERVALLS", "1s,10s,1min,15min,1h,3h,1d", et.o, "StringArray", 1));
        ap.a.a("STATS_OBJECT_NAMES", new ep("STATS_OBJECT_NAMES", "general/quote,general/search_list,stocks/descriptor,indices/descriptor,indices/index_2_stock_list,certificates/descriptor,warrants/descriptor,funds/descriptor,system/quote_list", et.o, "StringArray", 1));
        ap.a.a("USE_TIMEZONE", new eo("USE_TIMEZONE", "true", et.p, "Boolean", 1));
        ap.a.a("USE_DATE_TIMEZONE", new eo("USE_DATE_TIMEZONE", "true", et.p, "Boolean", 1));
        ap.a.a("USE_EXTENDED_NETWORKING", new eo("USE_EXTENDED_NETWORKING", "false", et.p, "Boolean", 1));
        ap.a.a("SUPPRESS_VERSION", new eo("SUPPRESS_VERSION", "true", et.p, "Boolean", 2));
        ap.a.a("CONFIG_VERSION", new eo("CONFIG_VERSION", "1", et.j, "Integer", 1));
        ap.a.a("FORMAT_VERSION", new eo("FORMAT_VERSION", "1", et.j, "Integer", 1));
        ap.a.a("XID", new eo("XID", "", et.o, "String", 2));
        ap.a.a("NO_XID_REQUEST", new eo("NO_XID_REQUEST", "false", et.p, "Boolean", 2));
        ap.a.a("XID_EXPIRES", new eo("XID_EXPIRES", "", et.k, "Long", 1));
        ap.a.a("XID_HOST", new eo("XID_HOST", "ssl.mdgms.com", et.o, "String", 2));
        ap.a.a("XID_PORT", new eo("XID_PORT", "443", et.j, "Integer", 2));
        ap.a.a("XID_PROTOCOL", new eo("XID_PROTOCOL", "https_url", et.o, "String", 1));
        ap.a.a("XID_VIRTUAL_HOST", new eo("XID_VIRTUAL_HOST", "xid.mdgms.com", et.o, "String", 1));
        ap.a.a("XID_URI", new eo("XID_URI", "/xid/mdg_config.csv", et.o, "String", 1));
        ap.a.a("XID_AUTO_REFRESH", new eo("XID_AUTO_REFRESH", "true", et.p, "Boolean", 2));
        ap.a.a("XID_REQ_TIMEOUT", new eo("XID_REQ_TIMEOUT", "5000", et.j, "Integer", 1));
        ap.a.a("XID_HTTP_REQUEST_HEADER", new eo("XID_HTTP_REQUEST_HEADER", "", ev.a, "Request", 2));
        ap.a.a("AUTH_ID_NAME", new eo("AUTH_ID_NAME", "", et.o, "String", 2, "NAME_REQ_ID"));
        ap.a.a("AUTH_ID_VALUE", new eo("AUTH_ID_VALUE", "", et.o, "String", 2, "XID"));
        ap.a.a("AUTH_ID_EXPIRES", new eo("AUTH_ID_EXPIRES", "", et.k, "Long", 1));
        ap.a.a("AUTH_STICKY_PARAMS", new ep("AUTH_STICKY_PARAMS", "ZID,ID_CUST,ID_APPLICATION,VERSION,XID,G_ID_USER_SESSION,ID_USER", et.o, "StringArray", 1));
        ap.a.a("AUTH_CLIENT_IP_ADDRESS", new eo("AUTH_CLIENT_IP_ADDRESS", "", et.o, "String", 1));
        ap.a.a("NOTATION_LIST_URI", new eo("NOTATION_LIST_URI", "/system/prices/notation_list.csv?VERSION=2", et.o, "String", 1));
        ap.a.a("POST_URI", new eo("POST_URI", "/internal/objects.csv?", et.o, "String", 1));
        ap.a.a("TIMEZONE_LIST_URI", new eo("TIMEZONE_LIST_URI", "/general/timezone_list.csv?VERSION=2", et.o, "String", 1));
        ap.a.a("URI_SERVERTIME", new eo("URI_SERVERTIME", "/system/server_time.csv?VERSION=1", et.o, "String", 1));
        ap.a.a("DEFAULT_URL_PARAMS", new eo("DEFAULT_URL_PARAMS", "", ev.a, "Request", 1));
        ap.a.a("DEFAULT_DATE_FORMAT", new eo("DEFAULT_DATE_FORMAT", "", et.o, "String", 1));
        ap.a.a("DEFAULT_DECIMAL_SEPARATOR", new eo("DEFAULT_DECIMAL_SEPARATOR", "", et.o, "String", 1));
        ap.a.a("DEFAULT_GROUPING_SEPARATOR", new eo("DEFAULT_GROUPING_SEPARATOR", "", et.o, "String", 1));
        (ap.b = new Hashtable()).put("DEFAULT_LANG", "Appended to all MDGObject requests (de, en, fr, it, pt, es)");
        ap.b.put("DEFAULT_BLOCKSIZE", "Appended to all 'list' MDGObject requests");
        ap.b.put("DEFAULT_VERSION", "Appended to all MDGObject requests");
        ap.b.put("DEFAULT_TIMEZONE", "Default timezone for date format");
        ap.b.put("CONTENT_ENCODING", "The Accept-Encoding header - either 'identity' or 'gzip'");
        ap.b.put("ENABLE_USE_CACHES", "Influence the useCaches properties of the internally used URLConnections");
        ap.b.put("REQUEST_TIMEOUT", "Timeout for requests (in milliseconds)");
        ap.b.put("REQUEST_TIMEOUT_FACTOR", "Defines a factor to compute the request timeout for array requests.");
        ap.b.put("REQUEST_TIMEOUT_EXCEPTIONS", "Defines exceptions from the common request timeout");
        ap.b.put("CHOST_LIST", "The connection host (name or IP address)");
        ap.b.put("CPORT_LIST", "The connection port");
        ap.b.put("VHOST_LIST", "List of virtual hosts");
        ap.b.put("PRIO_LIST", "@deprecated see class documentation for more details on connection settings");
        ap.b.put("PROTOCOL_LIST", "The communication protocol (http or http_url)");
        ap.b.put("PROXY_HOST_LIST", "@deprecated see 'Note on proxy settings' in the class documentation");
        ap.b.put("PROXY_PORT_LIST", "@deprecated see 'Note on proxy settings' in the class documentation");
        ap.b.put("HTTP_REQUEST_HEADER", "Defines additional HTTP request headers in URL query string syntax");
        ap.b.put("DONT_TOUCH_REQUESTS", "If true, the specified requests strings will be left untouched (Handle with care!)");
        ap.b.put("COLLECT_DUPLICATES", "Avoid requesting duplicates over network");
        ap.b.put("URI_PREFIX", "A global prefix which is inserted before each object request");
        ap.b.put("NAME_REQ_ID", "Define the name of the request ID parameter (normally 'XID' - handle with care!)");
        ap.b.put("ID_ENCODING", "Default content encoding for HTTP responses");
        ap.b.put("MAX_GET_REQUEST_LENGTH", "Maximum length of a request string to be sent via HTTP GET");
        ap.b.put("MAX_NESTED_POST_REQUEST_LENGTH", "Maximum length of a request to be sent via HTTP GET or HTTP POST using /internal/objects");
        ap.b.put("APP_IDENTIFIER", "Identifier of an application (either an ID_APPLICATION or a SHORT_NAME_APPLICATION)");
        ap.b.put("LOGIN", "The login of the account");
        ap.b.put("PASSWORD", "The password of the account");
        ap.b.put("TYPE_APP_IDENTIFIER", "The type of the application identfier ('ID_APPLICATION' or 'SHORT_NAME_APPLICATION')");
        ap.b.put("TYPE_LOGIN", "Type of the login (either 'LOGIN_USER' or 'LOGIN_CUSTOMER')");
        ap.b.put("ID_USER", "Type of the login (either 'LOGIN_USER' or 'LOGIN_CUSTOMER')");
        ap.b.put("CACHE_IMPLEMENTATION", "One of the available caches (fully qualified class name)");
        ap.b.put("CACHE_MAX_SIZE", "Maximum size of cache (in byte)");
        ap.b.put("CACHE_MAX_ELEMENTS", "Maximum number of elements (MDGObjects) in cache");
        ap.b.put("SIZE_FACTOR", "Factor for size of cache elements");
        ap.b.put("DEFAULT_CACHE_MODE", "Set the default cache access mode for requests (MDGSession constant names)");
        ap.b.put("DELTA_TIME_CRITICAL", "Maximum accepted difference between local and server time (in seconds)");
        ap.b.put("CACHE_ADJUST_EXPIRY_TIME", "Adjust expiry time of objects before inserting into cache");
        ap.b.put("CACHE_ADJUST_EXPIRY_INTERVAL", "Interval in milliseconds the API checks the delta between client and server time.");
        ap.b.put("KEEP_ALIVE_WORKER_THREADS", "Number of pooled worker threads");
        ap.b.put("MAX_ALIVE_WORKER_THREADS", "Maximum number of worker threads");
        ap.b.put("DEFAULT_FORMATTED_VALUE", "Fallback for formatted values of MDGObjects");
        ap.b.put("DEFAULT_BOOLEAN_VALUE", "Fallback for boolean values of MDGObjects");
        ap.b.put("DEFAULT_INT_VALUE", "Fallback for integer values of MDGObjects");
        ap.b.put("DEFAULT_FLOAT_VALUE", "Fallback for float values of MDGObjects");
        ap.b.put("DEFAULT_DATE_VALUE", "Fallback for date values of MDGObjects (format: yyyy-MM-dd)");
        ap.b.put("DEFAULT_TIME_VALUE", "Fallback for time values of MDGObjects (format: HH:mm:ss)");
        ap.b.put("DEFAULT_STRING_VALUE", "Fallback for string values of MDGObjects");
        ap.b.put("DEFAULT_USE_DUMMY_QUOTE_VALUE", "Provide a fallback value for embedded quote MDGObjects");
        ap.b.put("DEFAULT_ZDATE_VALUE", "Fallback for zdate values of MDGObjects (yyyy-MM-dd)");
        ap.b.put("DEFAULT_ZTIME_VALUE", "Fallback for ztime values of MDGObjects (HH:mm:ss)");
        ap.b.put("DEFAULT_DATETIME_VALUE", "Fallback for datetime values of MDGObjects (millis since epoch)");
        ap.b.put("STATS_HISTORY_LENGTH", "Length of the history kept in the internal statistics");
        ap.b.put("STATS_INTERVALLS", "Intervalls, for which internal statistics are kept");
        ap.b.put("STATS_OBJECT_NAMES", "Names of counted MDGObjects");
        ap.b.put("USE_TIMEZONE", "Switch to set usage of timezone computations for formatting on/off");
        ap.b.put("USE_DATE_TIMEZONE", "Switch to enable timezone EUrope/Berlin for formatted date values");
        ap.b.put("USE_EXTENDED_NETWORKING", "Use load balancing or failover");
        ap.b.put("SUPPRESS_VERSION", "Set to false to show version information at startup");
        ap.b.put("CONFIG_VERSION", "Defines the version number for the session config object");
        ap.b.put("FORMAT_VERSION", "Defines the version number for the formatting objects");
        ap.b.put("XID", "If set, oversteps initial authentication request (set also NO_XID_REQUEST)");
        ap.b.put("NO_XID_REQUEST", "Avoid authentication request (requires XID)");
        ap.b.put("XID_EXPIRES", "Absolute expiry time of XID (seconds since epoch)");
        ap.b.put("XID_HOST", "Host for the authentication request");
        ap.b.put("XID_PORT", "Port for the XID_HOST");
        ap.b.put("XID_PROTOCOL", "Protocol for the authentication request");
        ap.b.put("XID_VIRTUAL_HOST", "Virtual host for the authentication request");
        ap.b.put("XID_URI", "URI for the authentication request");
        ap.b.put("XID_AUTO_REFRESH", "Switch to disable the XID auto refresh feature");
        ap.b.put("XID_REQ_TIMEOUT", "Timeout for the initial authentication request");
        ap.b.put("XID_HTTP_REQUEST_HEADER", "HTTP headers for the initial authentication request");
        ap.b.put("AUTH_ID_NAME", "The name of the request authentication identifier");
        ap.b.put("AUTH_ID_VALUE", "The value of the request authentication identifier");
        ap.b.put("AUTH_ID_EXPIRES", "Absolute expiry time of authentication identifier (seconds since epoch)");
        ap.b.put("AUTH_STICKY_PARAMS", "Sticky parameters which are beeing kept in the request part of POST requests");
        ap.b.put("AUTH_CLIENT_IP_ADDRESS", "IP Address of the client who ist to be authenticated.");
        ap.b.put("NOTATION_LIST_URI", "URI for the notation list");
        ap.b.put("POST_URI", "Set the URI which is used for POST requests");
        ap.b.put("TIMEZONE_LIST_URI", "Set the URI which is used for timezone_list requests");
        ap.b.put("URI_SERVERTIME", "Set the URI which is used for servertime requests");
        ap.b.put("DEFAULT_URL_PARAMS", "Set default params that are appended to each request");
        ap.b.put("DEFAULT_DATE_FORMAT", "Set default date format rule");
        ap.b.put("DEFAULT_DECIMAL_SEPARATOR", "Set default decimal separator for all floating point number formats");
        ap.b.put("DEFAULT_GROUPING_SEPARATOR", "Set default grouping separator for all floating point number formats");
    }
}
