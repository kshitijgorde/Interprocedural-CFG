// 
// Decompiled by Procyon v0.5.30
// 

package netcharts.graphics;

import java.awt.Graphics;
import netcharts.util.NFUtil;
import java.awt.Component;
import java.awt.Color;
import netcharts.util.NFParamDef;
import java.util.Hashtable;
import netcharts.util.NFDebug;
import netcharts.util.NFParam;
import java.util.Vector;

public class NFStripAxis extends NFAxis
{
    public static final int LEFT = 0;
    public static final int RIGHT = 1;
    public static final int STATIC = 0;
    public static final int DYNAMIC = 1;
    protected static int AXISMODE_DEFAULT;
    public int axisMode;
    public boolean changed;
    protected static int SLOTSPERTIC_DEFAULT;
    protected static int SLOTSPERTIC_AXIS_DEFAULT;
    private int a;
    private int b;
    private double c;
    private double d;
    private Vector e;
    private Vector f;
    private Vector g;
    private boolean h;
    private static int i;
    private int j;
    private int k;
    private String l;
    private int m;
    private int n;
    private int o;
    private int p;
    private NFStripAxis q;
    private static final boolean r = false;
    
    public NFStripAxis(final int n, final int n2, final int n3, final int n4) {
        super(n, n2, n3, n4);
        this.axisMode = NFStripAxis.AXISMODE_DEFAULT;
        this.changed = false;
        this.a = NFStripAxis.SLOTSPERTIC_DEFAULT;
        this.b = 5;
        this.c = 0.0;
        this.d = 1.0;
        this.e = new Vector();
        this.f = new Vector();
        this.g = new Vector();
        this.h = true;
        this.j = 0;
        this.k = 11;
        this.l = "-";
        this.m = 0;
        this.n = 10;
        this.o = 0;
        this.p = 11;
        this.q = null;
    }
    
    protected boolean autoGeneratedLabel(final int n) {
        return this.h;
    }
    
    public void setStripInfo(final int j, final int k, final int p4, final String l) {
        this.j = j;
        this.k = k;
        this.p = p4;
        this.l = l;
    }
    
    public void setPartner(final NFStripAxis q) {
        this.q = q;
    }
    
    public int getNSlots() {
        return this.k;
    }
    
    public void setHistorySize(final int n) {
        this.n = n;
    }
    
    public static void defineAxis(final NFParam nfParam, final String s, final String s2) {
        NFAxis.defineAxis(nfParam, s, s2);
        nfParam.remove(s + "Axis");
        nfParam.remove(s + "Scale");
        defineStripAxisParams(nfParam, s);
    }
    
    private void a(final String s) {
        NFDebug.print(256L, "NFStripAxis: " + s);
    }
    
    protected static void defineStripAxisParams(final NFParam nfParam, final String s) {
        final Hashtable<String, Integer> hashtable = new Hashtable<String, Integer>();
        hashtable.put("STATIC", new Integer(0));
        hashtable.put("DYNAMIC", new Integer(1));
        final String string = s + "Axis";
        final Vector<NFParamDef> vector = new Vector<NFParamDef>();
        NFStripAxis.i = nfParam.defineLabel(string, vector, false);
        nfParam.remove(string + "Label");
        vector.removeElementAt(0);
        vector.addElement(nfParam.defineNumber(string + "slotsPerTic", new Integer(NFStripAxis.SLOTSPERTIC_AXIS_DEFAULT)));
        vector.addElement(nfParam.defineDate(string + "ticStart"));
        vector.addElement(nfParam.defineDate(string + "ticStep"));
        vector.addElement(nfParam.defineSymbol(string + "axisType", hashtable, new Integer(1)));
        vector.addElement(nfParam.defineColor(string + "Axis-Color", Color.black));
        nfParam.defineTuple(string, vector);
        final String string2 = s + "Scale";
        final Vector<NFParamDef> vector2 = new Vector<NFParamDef>();
        vector2.addElement(nfParam.defineNumber(string2 + "slotsPerTic"));
        vector2.addElement(nfParam.defineDate(string2 + "ticStart"));
        vector2.addElement(nfParam.defineDate(string2 + "ticStep"));
        vector2.addElement(nfParam.defineSymbol(string2 + "axisType", hashtable, new Integer(1)));
        nfParam.defineTuple(string2, vector2);
    }
    
    public static NFAxis loadAxis(final Component component, final NFParam nfParam, final String s, NFAxis nfAxis, final NFActiveRegion nfActiveRegion) throws Exception {
        ((NFStripAxis)nfAxis).changed = false;
        if (nfParam.changed(s + "Scale") || nfParam.changed(s + "Axis")) {
            final NFAxis loadStripAxisParams = loadStripAxisParams(nfParam, s, nfAxis);
            if (loadStripAxisParams != null && loadStripAxisParams != nfAxis) {
                nfAxis = loadStripAxisParams;
            }
            ((NFStripAxis)nfAxis).changed = true;
        }
        if (nfParam.changed(s + "Labels") && nfAxis != null) {
            ((NFStripAxis)nfAxis).loadLabels(nfParam, s);
        }
        return NFAxis.loadAxis(component, nfParam, s, nfAxis, nfActiveRegion);
    }
    
    public static NFAxis defaultAxis(final String s) {
        NFStripAxis nfStripAxis;
        if (s.equals("Top")) {
            nfStripAxis = new NFStripAxis(0, 0, 100, 0);
            nfStripAxis.setTicPosition(1);
        }
        else if (s.equals("Bottom")) {
            nfStripAxis = new NFStripAxis(0, 0, 100, 0);
            nfStripAxis.setTicPosition(4);
        }
        else if (s.equals("Left")) {
            nfStripAxis = new NFStripAxis(0, 0, 0, 100);
            nfStripAxis.setTicPosition(2);
        }
        else {
            nfStripAxis = new NFStripAxis(0, 0, 0, 100);
            nfStripAxis.setTicPosition(3);
        }
        return nfStripAxis;
    }
    
    protected static NFAxis loadStripAxisParams(final NFParam nfParam, final String s, NFAxis nfAxis) throws Exception {
        final Vector vector = (Vector)nfParam.get(s + "Axis");
        if (vector != null && vector.size() != 0) {
            if (nfAxis == null) {
                nfAxis = defaultAxis(s);
            }
            vector.insertElementAt("", 0);
            nfAxis.setTicLabel(NFLabel.loadParams(nfParam, vector, false));
            final NFStripAxis nfStripAxis = (NFStripAxis)nfAxis;
            nfStripAxis.a = NFUtil.getNumber(vector, NFStripAxis.i, NFStripAxis.SLOTSPERTIC_AXIS_DEFAULT);
            nfStripAxis.c = nfAxis.getValue(vector.elementAt(NFStripAxis.i + 1));
            nfStripAxis.d = nfAxis.getValue(vector.elementAt(NFStripAxis.i + 2));
            nfStripAxis.axisMode = NFUtil.getNumber(vector, NFStripAxis.i + 3, NFStripAxis.AXISMODE_DEFAULT);
            final Color axisColor = (Color)vector.elementAt(NFStripAxis.i + 4);
            if (axisColor != null) {
                nfAxis.setAxisColor(axisColor);
            }
            nfAxis.showAxis(true);
            return nfAxis;
        }
        final Vector vector2 = (Vector)nfParam.get(s + "Scale");
        if (vector2 == null || vector2.size() == 0) {
            return nfAxis;
        }
        if (nfAxis == null) {
            nfAxis = defaultAxis(s);
        }
        final NFStripAxis nfStripAxis2 = (NFStripAxis)nfAxis;
        nfStripAxis2.a = NFUtil.getNumber(vector2, 0, NFStripAxis.SLOTSPERTIC_DEFAULT);
        nfStripAxis2.c = nfAxis.getValue(vector2.elementAt(1));
        nfStripAxis2.d = nfAxis.getValue(vector2.elementAt(2));
        nfStripAxis2.axisMode = NFUtil.getNumber(vector2, 3, NFStripAxis.AXISMODE_DEFAULT);
        nfAxis.showAxis(true);
        return nfAxis;
    }
    
    public void initLabels() {
        this.f = new Vector();
        this.g = new Vector();
        this.m = 0;
        final double n = this.k / this.a;
        this.o = (int)n;
        if (n - this.o > 0.0) {
            ++this.o;
        }
        if (this.j == 1 && this.f.size() == 0) {
            int n2;
            if (this.axisMode == 0) {
                n2 = this.k;
            }
            else {
                n2 = this.o;
            }
            for (int i = 0; i < n2; ++i) {
                this.f.addElement(this.l);
            }
        }
        else if (this.j == 0 && this.f.size() == 0) {
            int a = 1;
            int n3;
            if (this.axisMode == 0) {
                n3 = this.k;
            }
            else {
                a = this.a;
                n3 = this.o;
            }
            for (int j = 0; j < n3; ++j) {
                final String nextLabel = this.getNextLabel(j * a);
                if (nextLabel != null) {
                    this.f.addElement(nextLabel);
                }
            }
        }
        this.makeLabels();
        this.setTicLabels(this.g);
        this.setSpacing(new NFSpacing(0.0, this.k - 1, (double)this.a));
    }
    
    public void loadLabels(final NFParam nfParam, final String s) throws Exception {
        final Vector vector = (Vector)nfParam.get(s + "Labels");
        if (vector == null) {
            return;
        }
        final int size = vector.size();
        if (this.h) {
            this.g = new Vector();
            this.e = new Vector();
            this.h = false;
        }
        for (int i = 0; i < size; ++i) {
            this.e.addElement(vector.elementAt(i));
        }
    }
    
    protected void appendNextAxisLabel() {
        String nextLabel = null;
        if (this.j != 0 || this.m >= this.k) {
            nextLabel = this.getNextLabel(this.m);
        }
        if (nextLabel != null) {
            this.f.addElement(nextLabel);
        }
        this.makeLabels();
        while (this.f.size() > this.n) {
            this.f.removeElementAt(0);
        }
        ++this.m;
    }
    
    public String getNextLabel(final int n) {
        String s = null;
        if (this.axisMode == 0 || n % this.a == 0) {
            if (!this.h) {
                s = this.getQueueLabel();
            }
            else {
                s = this.genXLabel(n);
            }
        }
        return s;
    }
    
    public void makeLabels() {
        this.g.removeAllElements();
        if (this.axisMode == 0) {
            final int n = this.f.size() - this.k;
            for (int i = 0; i < this.k; i += this.a) {
                if (i + n >= 0) {
                    this.g.addElement(this.f.elementAt(i + n));
                }
            }
        }
        else {
            int o = this.o;
            if ((this.j != 0 || this.m >= this.k) && this.k % this.a != 0 && this.m % this.a + (this.o - 1) * this.a >= this.k) {
                --o;
            }
            final int n2 = this.f.size() - o;
            for (int j = 0; j < o; ++j) {
                if (j + n2 >= 0) {
                    this.g.addElement(this.f.elementAt(j + n2));
                }
            }
        }
    }
    
    public String getQueueLabel() {
        String l = null;
        try {
            l = this.e.elementAt(0);
            this.e.removeElementAt(0);
        }
        catch (ArrayIndexOutOfBoundsException ex) {
            l = this.l;
        }
        finally {
            return l;
        }
    }
    
    public String genXLabel(final int n) {
        return this.getLabel(this.c + n * this.d / this.a);
    }
    
    public void display(final Graphics graphics) {
        this.changeTicLabels(this.g);
        super.display(graphics);
    }
    
    protected void setupAxisTics() {
        int n;
        int n2;
        if (this.j == 0 && this.m < this.k) {
            n = 0;
            n2 = this.k - 1;
        }
        else {
            int m = this.m;
            if (this.m > 0) {
                --m;
            }
            if (this.axisMode == 1) {
                n2 = this.k - 1 - m % this.a;
                n = n2 % this.a;
            }
            else {
                n = 0;
                n2 = this.k - 1;
            }
        }
        this.setSpacing(new NFSpacing(n, n2, (double)this.a));
    }
    
    public void setup() {
        super.setup();
        if (this.q != null) {
            final double min = this.getMin();
            final double max = this.getMax();
            if (min != this.q.getMin() || max != this.q.getMax()) {
                this.q.setMinMax(min, max);
            }
        }
    }
    
    static {
        NFStripAxis.AXISMODE_DEFAULT = 1;
        NFStripAxis.SLOTSPERTIC_DEFAULT = 1;
        NFStripAxis.SLOTSPERTIC_AXIS_DEFAULT = 5;
    }
}
