// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.javasupport.JavaClass$i$0$0$local_class_p;
import org.jruby.javasupport.JavaClass$i$0$0$get_package;
import org.jruby.javasupport.JavaClass$i$0$0$annotations_p;
import org.jruby.javasupport.JavaClass$i$0$0$declared_method;
import org.jruby.javasupport.JavaClass$i$1$0$field;
import org.jruby.javasupport.JavaClass$i$0$0$signers;
import org.jruby.runtime.ThreadContext;
import org.jruby.javasupport.JavaField;
import org.jruby.javasupport.JavaClass$i$1$0$declared_field;
import org.jruby.javasupport.JavaClass$i$0$0$enclosing_method;
import org.jruby.javasupport.JavaClass$i$0$0$enclosing_constructor;
import org.jruby.javasupport.JavaClass$i$0$0$public_p;
import org.jruby.javasupport.JavaClass$i$0$0$declared_constructor;
import org.jruby.javasupport.JavaClass$i$0$0$class_loader;
import org.jruby.javasupport.JavaClass$i$0$0$inspect;
import org.jruby.javasupport.JavaClass$i$0$0$declaring_class;
import org.jruby.javasupport.JavaClass$i$0$0$enum_p;
import org.jruby.javasupport.JavaClass$i$0$0$private_p;
import org.jruby.javasupport.JavaClass$i$0$0$annotation_p;
import org.jruby.javasupport.JavaClass$i$1$0$resource_as_string;
import org.jruby.javasupport.JavaClass$i$0$0$component_type;
import org.jruby.javasupport.JavaClass$i$0$0$declared_instance_methods;
import org.jruby.javasupport.JavaClass$i$0$0$name;
import org.jruby.javasupport.JavaClass$i$0$0$declared_annotations_p;
import org.jruby.javasupport.JavaClass$i$0$0$interfaces;
import org.jruby.javasupport.JavaClass$i$0$0$primitive_p;
import org.jruby.javasupport.JavaClass$i$1$0$annotation;
import org.jruby.javasupport.JavaClass$i$0$0$declared_classes;
import org.jruby.javasupport.JavaClass$i$0$0$canonical_name;
import org.jruby.javasupport.JavaClass$i$0$0$java_class_methods;
import org.jruby.javasupport.JavaClass$i$0$0$modifiers;
import org.jruby.javasupport.JavaClass$i$0$0$enum_constants;
import org.jruby.javasupport.JavaClass$i$0$0$anonymous_class_p;
import org.jruby.javasupport.JavaClass$i$0$0$array_class;
import org.jruby.javasupport.JavaClass$i$0$0$declared_constructors;
import org.jruby.javasupport.JavaClass$i$0$0$declared_annotations;
import org.jruby.javasupport.JavaClass$i$0$0$interface_p;
import org.jruby.javasupport.JavaClass$i$0$0$classes;
import org.jruby.javasupport.JavaClass$i$0$0$synthetic_p;
import org.jruby.javasupport.JavaClass$i$0$0$java_instance_methods;
import org.jruby.javasupport.JavaClass$i$0$0$constructors;
import org.jruby.javasupport.JavaClass$i$0$0$declared_fields;
import org.jruby.javasupport.JavaClass$i$0$0$enclosing_class;
import org.jruby.javasupport.JavaClass$i$0$0$member_class_p;
import org.jruby.javasupport.JavaClass$i$0$0$protection_domain;
import org.jruby.javasupport.JavaClass$i$1$0$resource_as_stream;
import org.jruby.javasupport.JavaClass$i$1$0$assignable_from_p;
import org.jruby.javasupport.JavaClass$i$0$0$array_p;
import org.jruby.javasupport.JavaClass$i$1$0$resource;
import org.jruby.javasupport.JavaClass$i$0$0$declared_class_methods;
import org.jruby.RubyArray;
import org.jruby.javasupport.JavaClass$i$0$0$fields;
import org.jruby.javasupport.JavaClass$i$0$0$ruby_class;
import org.jruby.javasupport.JavaMethod;
import org.jruby.javasupport.JavaClass$i$0$0$java_method;
import org.jruby.javasupport.JavaClass$i$0$0$generic_superclass;
import org.jruby.javasupport.JavaClass$i$0$0$protected_p;
import org.jruby.javasupport.JavaClass$i$0$0$generic_interfaces;
import org.jruby.javasupport.JavaCallable;
import org.jruby.javasupport.JavaClass$i$0$0$declared_method_smart;
import org.jruby.javasupport.JavaClass$i$1$0$annotation_present_p;
import org.jruby.javasupport.JavaClass$i$0$0$type_parameters;
import org.jruby.javasupport.JavaConstructor;
import org.jruby.javasupport.JavaClass$i$0$0$constructor;
import org.jruby.javasupport.JavaClass$i$0$0$superclass;
import org.jruby.javasupport.JavaClass$i$1$0$op_cmp;
import org.jruby.javasupport.JavaClass$i$0$0$annotations;
import org.jruby.javasupport.JavaObject;
import org.jruby.javasupport.JavaClass$i$1$0$new_array;
import org.jruby.RubyBoolean;
import org.jruby.javasupport.JavaClass$i$0$0$final_p;
import org.jruby.javasupport.JavaClass$i$1$0$extend_proxy;
import org.jruby.RubyString;
import org.jruby.javasupport.JavaClass$i$0$0$simple_name;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.javasupport.JavaClass;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.javasupport.JavaClass$s$1$0$for_name;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$javasupport$JavaClass$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final Ruby runtime = cls.getRuntime();
        org.jruby.internal.runtime.methods.JavaMethod javaMethod = new JavaClass$s$1$0$for_name(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "for_name", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "for_name", JavaClass.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("for_name", javaMethod);
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.for_name", "for_name");
        javaMethod = new JavaClass$i$0$0$simple_name(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "simple_name", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "simple_name", RubyString.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("simple_name", javaMethod);
        javaMethod = new JavaClass$i$1$0$extend_proxy(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "extend_proxy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "extend_proxy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("extend_proxy", javaMethod);
        javaMethod = new JavaClass$i$0$0$final_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "final_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "final_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("final?", javaMethod);
        javaMethod = new JavaClass$i$1$0$new_array(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "new_array", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "new_array", JavaObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("new_array", javaMethod);
        javaMethod = new JavaClass$i$0$0$annotations(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "annotations", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "annotations", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("annotations", javaMethod);
        javaMethod = new JavaClass$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "op_cmp", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new JavaClass$i$0$0$superclass(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "superclass", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "superclass", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("superclass", javaMethod);
        javaMethod = new JavaClass$i$0$0$constructor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "constructor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "constructor", JavaConstructor.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("constructor", javaMethod);
        javaMethod = new JavaClass$i$0$0$type_parameters(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "type_parameters", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "type_parameters", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("type_parameters", javaMethod);
        javaMethod = new JavaClass$i$1$0$annotation_present_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "annotation_present_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "annotation_present_p", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("annotation_present?", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_method_smart(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "declared_method_smart", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_method_smart", JavaCallable.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("declared_method_smart", javaMethod);
        javaMethod = new JavaClass$i$0$0$generic_interfaces(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "generic_interfaces", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "generic_interfaces", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("generic_interfaces", javaMethod);
        javaMethod = new JavaClass$i$0$0$protected_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "protected_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "protected_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("protected?", javaMethod);
        javaMethod = new JavaClass$i$0$0$generic_superclass(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "generic_superclass", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "generic_superclass", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("generic_superclass", javaMethod);
        javaMethod = new JavaClass$i$0$0$java_method(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "java_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "java_method", JavaMethod.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("java_method", javaMethod);
        javaMethod = new JavaClass$i$0$0$ruby_class(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "ruby_class", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "ruby_class", RubyModule.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("ruby_class", javaMethod);
        javaMethod = new JavaClass$i$0$0$fields(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "fields", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "fields", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("fields", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_class_methods(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "declared_class_methods", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_class_methods", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("declared_class_methods", javaMethod);
        javaMethod = new JavaClass$i$1$0$resource(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "resource", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "resource", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("resource", javaMethod);
        javaMethod = new JavaClass$i$0$0$array_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "array_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "array_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("array?", javaMethod);
        javaMethod = new JavaClass$i$1$0$assignable_from_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "assignable_from_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "assignable_from_p", RubyBoolean.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("assignable_from?", javaMethod);
        javaMethod = new JavaClass$i$1$0$resource_as_stream(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "resource_as_stream", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "resource_as_stream", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("resource_as_stream", javaMethod);
        javaMethod = new JavaClass$i$0$0$protection_domain(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "protection_domain", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "protection_domain", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("protection_domain", javaMethod);
        javaMethod = new JavaClass$i$0$0$member_class_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "member_class_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "member_class_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("member_class?", javaMethod);
        javaMethod = new JavaClass$i$0$0$enclosing_class(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "enclosing_class", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "enclosing_class", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("enclosing_class", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_fields(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "declared_fields", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_fields", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("declared_fields", javaMethod);
        javaMethod = new JavaClass$i$0$0$constructors(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "constructors", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "constructors", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("constructors", javaMethod);
        javaMethod = new JavaClass$i$0$0$java_instance_methods(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "java_instance_methods", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "java_instance_methods", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("java_instance_methods", javaMethod);
        javaMethod = new JavaClass$i$0$0$synthetic_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "synthetic_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "synthetic_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("synthetic?", javaMethod);
        javaMethod = new JavaClass$i$0$0$classes(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "classes", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "classes", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("classes", javaMethod);
        javaMethod = new JavaClass$i$0$0$interface_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "interface_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "interface_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("interface?", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_annotations(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "declared_annotations", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_annotations", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("declared_annotations", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_constructors(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "declared_constructors", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_constructors", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("declared_constructors", javaMethod);
        javaMethod = new JavaClass$i$0$0$array_class(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "array_class", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "array_class", JavaClass.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("array_class", javaMethod);
        javaMethod = new JavaClass$i$0$0$anonymous_class_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "anonymous_class_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "anonymous_class_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("anonymous_class?", javaMethod);
        javaMethod = new JavaClass$i$0$0$enum_constants(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "enum_constants", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "enum_constants", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("enum_constants", javaMethod);
        javaMethod = new JavaClass$i$0$0$modifiers(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "modifiers", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "modifiers", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("modifiers", javaMethod);
        javaMethod = new JavaClass$i$0$0$java_class_methods(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "java_class_methods", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "java_class_methods", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("java_class_methods", javaMethod);
        javaMethod = new JavaClass$i$0$0$canonical_name(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "canonical_name", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "canonical_name", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("canonical_name", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_classes(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "declared_classes", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_classes", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("declared_classes", javaMethod);
        javaMethod = new JavaClass$i$1$0$annotation(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "annotation", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "annotation", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("annotation", javaMethod);
        javaMethod = new JavaClass$i$0$0$primitive_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "primitive_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "primitive_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("primitive?", javaMethod);
        javaMethod = new JavaClass$i$0$0$interfaces(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "interfaces", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "interfaces", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("interfaces", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_annotations_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "declared_annotations_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_annotations_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("declared_annotations?", javaMethod);
        javaMethod = new JavaClass$i$0$0$name(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "name", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "name", RubyString.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("name", javaMethod);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_instance_methods(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "declared_instance_methods", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_instance_methods", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("declared_instance_methods", javaMethod);
        javaMethod = new JavaClass$i$0$0$component_type(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "component_type", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "component_type", JavaClass.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("component_type", javaMethod);
        javaMethod = new JavaClass$i$1$0$resource_as_string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "resource_as_string", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "resource_as_string", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("resource_as_string", javaMethod);
        javaMethod = new JavaClass$i$0$0$annotation_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "annotation_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "annotation_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("annotation?", javaMethod);
        javaMethod = new JavaClass$i$0$0$private_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "private_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "private_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("private?", javaMethod);
        javaMethod = new JavaClass$i$0$0$enum_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "enum_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "enum_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("enum?", javaMethod);
        javaMethod = new JavaClass$i$0$0$declaring_class(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "declaring_class", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declaring_class", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("declaring_class", javaMethod);
        javaMethod = new JavaClass$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "inspect", RubyString.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new JavaClass$i$0$0$class_loader(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "class_loader", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "class_loader", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("class_loader", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_constructor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "declared_constructor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_constructor", JavaConstructor.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("declared_constructor", javaMethod);
        javaMethod = new JavaClass$i$0$0$public_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "public_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "public_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("public?", javaMethod);
        javaMethod = new JavaClass$i$0$0$enclosing_constructor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "enclosing_constructor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "enclosing_constructor", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("enclosing_constructor", javaMethod);
        javaMethod = new JavaClass$i$0$0$enclosing_method(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "enclosing_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "enclosing_method", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("enclosing_method", javaMethod);
        javaMethod = new JavaClass$i$1$0$declared_field(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "declared_field", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_field", JavaField.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("declared_field", javaMethod);
        javaMethod = new JavaClass$i$0$0$signers(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "signers", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "signers", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("signers", javaMethod);
        javaMethod = new JavaClass$i$1$0$field(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "field", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "field", JavaField.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("field", javaMethod);
        javaMethod = new JavaClass$i$0$0$declared_method(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "declared_method", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "declared_method", JavaMethod.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("declared_method", javaMethod);
        javaMethod = new JavaClass$i$0$0$annotations_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "annotations_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "annotations_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("annotations?", javaMethod);
        javaMethod = new JavaClass$i$0$0$get_package(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "get_package", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "get_package", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("package", javaMethod);
        javaMethod = new JavaClass$i$0$0$local_class_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "local_class_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(JavaClass.class, "local_class_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("local_class?", javaMethod);
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.simple_name", "simple_name");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.extend_proxy", "extend_proxy");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.final_p", "final?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.new_array", "new_array");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.annotations", "annotations");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.op_cmp", "<=>");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.superclass", "superclass");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.constructor", "constructor");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.type_parameters", "type_parameters");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.annotation_present_p", "annotation_present?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_method_smart", "declared_method_smart");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.generic_interfaces", "generic_interfaces");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.protected_p", "protected?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.generic_superclass", "generic_superclass");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.java_method", "java_method");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.ruby_class", "ruby_class");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.fields", "fields");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_class_methods", "declared_class_methods");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.resource", "resource");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.array_p", "array?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.assignable_from_p", "assignable_from?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.resource_as_stream", "resource_as_stream");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.protection_domain", "protection_domain");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.member_class_p", "member_class?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.enclosing_class", "enclosing_class");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_fields", "declared_fields");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.constructors", "constructors");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.java_instance_methods", "java_instance_methods");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.synthetic_p", "synthetic?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.classes", "classes");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.interface_p", "interface?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_annotations", "declared_annotations");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_constructors", "declared_constructors");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.array_class", "array_class");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.anonymous_class_p", "anonymous_class?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.enum_constants", "enum_constants");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.modifiers", "modifiers");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.java_class_methods", "java_class_methods");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.canonical_name", "canonical_name");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_classes", "declared_classes");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.annotation", "annotation");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.primitive_p", "primitive?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.interfaces", "interfaces");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_annotations_p", "declared_annotations?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.name", "name");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_instance_methods", "declared_instance_methods");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.component_type", "component_type");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.resource_as_string", "resource_as_string");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.annotation_p", "annotation?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.private_p", "private?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.enum_p", "enum?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declaring_class", "declaring_class");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.class_loader", "class_loader");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_constructor", "declared_constructor");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.public_p", "public?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.enclosing_constructor", "enclosing_constructor");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.enclosing_method", "enclosing_method");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_field", "declared_field");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.signers", "signers");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.field", "field");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.declared_method", "declared_method");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.annotations_p", "annotations?");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.get_package", "package");
        runtime.addBoundMethod("org.jruby.javasupport.JavaClass.local_class_p", "local_class?");
    }
}
