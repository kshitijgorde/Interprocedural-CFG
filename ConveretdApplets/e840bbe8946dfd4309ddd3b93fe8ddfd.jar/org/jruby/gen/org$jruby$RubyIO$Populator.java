// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.compiler.ASTInspector;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyIO$i$0$0$getc19;
import org.jruby.RubyIO$i$0$0$op_binmode;
import org.jruby.RubyIO$i$1$0$ungetc19;
import org.jruby.RubyIO$i$gets19;
import org.jruby.RubyIO$i$0$0$readchar19;
import org.jruby.RubyIO$i$set_encoding;
import org.jruby.RubyIO$i$0$0$getbyte19;
import org.jruby.RubyIO$i$0$0$lines19;
import org.jruby.RubyIO$i$0$0$internal_encoding;
import org.jruby.RubyIO$i$0$0$external_encoding;
import org.jruby.RubyIO$i$initialize19;
import org.jruby.RubyIO$i$0$0$getc;
import org.jruby.RubyIO$i$1$0$ungetc;
import org.jruby.RubyIO$i$gets;
import org.jruby.RubyIO$i$0$0$readchar;
import org.jruby.RubyIO$i$0$0$lines;
import org.jruby.RubyIO$i$0$1$initialize;
import org.jruby.RubyIO$i$0$0$each_codepoint;
import org.jruby.RubyIO$i$1$0$initialize_copy;
import org.jruby.RubyIO$i$1$0$pos_set;
import org.jruby.RubyIO$i$seek;
import org.jruby.RubyIO$i$0$0$pos;
import org.jruby.RubyIO$i$1$0$sync_set;
import org.jruby.RubyIO$i$0$1$sysread;
import org.jruby.RubyIO$i$0$0$eof_p;
import org.jruby.RubyIO$i$0$0$fileno;
import org.jruby.RubyIO$i$0$0$flush;
import org.jruby.RubyIO$i$0$0$each_char;
import org.jruby.RubyIO$i$0$0$rewind;
import org.jruby.RubyIO$i$0$0$lineno;
import org.jruby.RubyIO$i$0$1$each_line;
import org.jruby.RubyIO$i$0$0$codepoints;
import org.jruby.RubyIO$i$0$0$binmode;
import org.jruby.RubyIO$i$1$0$lineno_set;
import org.jruby.RubyIO$i$0$0$stat;
import org.jruby.RubyIO$i$0$0$close_write;
import org.jruby.RubyIO$i$0$0$chars;
import org.jruby.RubyIO$i$0$1$readpartial;
import org.jruby.RubyIO$i$0$1$readlines;
import org.jruby.RubyIO$i$0$0$close;
import org.jruby.RubyIO$i$1$0$write;
import org.jruby.RubyIO$i$0$0$puts;
import org.jruby.RubyIO$i$1$0$write_nonblock;
import org.jruby.RubyIO$i$0$0$print;
import org.jruby.RubyIO$i$1$0$op_append;
import org.jruby.RubyIO$i$0$1$ioctl;
import org.jruby.RubyIO$i$fcntl;
import org.jruby.RubyIO$i$0$0$tty_p;
import org.jruby.RubyIO$i$0$0$bytes;
import org.jruby.RubyIO$i$0$0$sync;
import org.jruby.RubyIO$i$readline;
import org.jruby.RubyBoolean;
import org.jruby.RubyIO$i$0$0$closed_p;
import org.jruby.RubyIO$i$0$1$read_nonblock;
import org.jruby.RubyIO$i$0$0$to_io;
import org.jruby.RubyIO$i$read;
import org.jruby.RubyIO$i$0$0$close_read;
import org.jruby.RubyIO$i$0$0$each_byte;
import org.jruby.RubyIO$i$0$0$fsync;
import org.jruby.RubyIO$i$1$0$autoclose_set;
import org.jruby.RubyIO$i$0$1$each;
import org.jruby.RubyIO$i$0$1$reopen;
import org.jruby.RubyIO$i$0$0$pid;
import org.jruby.RubyIO$i$0$0$printf;
import org.jruby.RubyIO$i$1$0$putc;
import org.jruby.RubyFixnum;
import org.jruby.RubyIO$i$0$1$sysseek;
import org.jruby.RubyIO$i$1$0$syswrite;
import org.jruby.RubyIO$i$0$0$autoclose;
import org.jruby.RubyIO$s$0$3$read19;
import org.jruby.RubyIO$s$0$1$popen19;
import org.jruby.RubyIO$s$0$2$sysopen19;
import org.jruby.RubyIO$s$1$0$tryConvert;
import org.jruby.RubyIO$s$0$2$foreach19;
import org.jruby.RubyIO$s$2$0$copy_stream;
import org.jruby.RubyIO$s$0$2$binread;
import org.jruby.RubyIO$s$readStatic;
import org.jruby.RubyIO$s$0$1$popen;
import org.jruby.RubyIO$s$0$2$sysopen;
import org.jruby.RubyIO$s$0$1$foreach;
import org.jruby.CompatVersion;
import org.jruby.RubyIO$s$0$3$select;
import org.jruby.RubyIO$s$0$0$popen3;
import org.jruby.RubyIO$s$0$0$newInstance;
import org.jruby.RubyIO$s$0$0$popen4;
import org.jruby.RubyArray;
import org.jruby.RubyIO$s$0$1$readlines;
import org.jruby.RubyIO$s$0$0$pipe;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Block;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyIO;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyIO$s$0$2$open;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyIO$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyIO$s$0$2$open(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "open", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "open", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("open", javaMethod);
        javaMethod = new RubyIO$s$0$0$pipe(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pipe", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "pipe", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("pipe", javaMethod);
        javaMethod = new RubyIO$s$0$1$readlines(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readlines", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "readlines", RubyArray.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("readlines", javaMethod);
        javaMethod = new RubyIO$s$0$0$popen4(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "popen4", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "popen4", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("popen4", javaMethod);
        javaMethod = new RubyIO$s$0$0$newInstance(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "newInstance", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "newInstance", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("new", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("for_fd", javaMethod);
        javaMethod = new RubyIO$s$0$0$popen3(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "popen3", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "popen3", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("popen3", javaMethod);
        javaMethod = new RubyIO$s$0$3$select(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "select", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "select", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("select", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyIO.open", "open");
        runtime.addBoundMethod("org.jruby.RubyIO.pipe", "pipe");
        runtime.addBoundMethod("org.jruby.RubyIO.readlines", "readlines");
        runtime.addBoundMethod("org.jruby.RubyIO.popen4", "popen4");
        runtime.addBoundMethod("org.jruby.RubyIO.newInstance", "new");
        runtime.addBoundMethod("org.jruby.RubyIO.popen3", "popen3");
        runtime.addBoundMethod("org.jruby.RubyIO.select", "select");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyIO$s$0$1$foreach(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "foreach", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "foreach", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("foreach", javaMethod);
            javaMethod = new RubyIO$s$0$2$sysopen(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "sysopen", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "sysopen", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject[].class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("sysopen", javaMethod);
            javaMethod = new RubyIO$s$0$1$popen(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "popen", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "popen", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("popen", javaMethod);
            javaMethod = new RubyIO$s$readStatic(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "readStatic", true, CallConfiguration.FrameNoneScopeNone, false);
            singletonClass.addMethodAtBootTimeOnly("read", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyIO.foreach", "foreach");
            runtime.addBoundMethod("org.jruby.RubyIO.sysopen", "sysopen");
            runtime.addBoundMethod("org.jruby.RubyIO.popen", "popen");
            runtime.addBoundMethod("org.jruby.RubyIO.readStatic", "read");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyIO$s$0$2$binread(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "binread", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "binread", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("binread", javaMethod);
            javaMethod = new RubyIO$s$2$0$copy_stream(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "copy_stream", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "copy_stream", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("copy_stream", javaMethod);
            javaMethod = new RubyIO$s$0$2$foreach19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "foreach19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "foreach19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("foreach", javaMethod);
            javaMethod = new RubyIO$s$1$0$tryConvert(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "tryConvert", true, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "tryConvert", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("try_convert", javaMethod);
            javaMethod = new RubyIO$s$0$2$sysopen19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "sysopen19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "sysopen19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("sysopen", javaMethod);
            javaMethod = new RubyIO$s$0$1$popen19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "popen19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "popen19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("popen", javaMethod);
            javaMethod = new RubyIO$s$0$3$read19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "read19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "read19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("read", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyIO.binread", "binread");
            runtime.addBoundMethod("org.jruby.RubyIO.copy_stream", "copy_stream");
            runtime.addBoundMethod("org.jruby.RubyIO.foreach19", "foreach");
            runtime.addBoundMethod("org.jruby.RubyIO.tryConvert", "try_convert");
            runtime.addBoundMethod("org.jruby.RubyIO.sysopen19", "sysopen");
            runtime.addBoundMethod("org.jruby.RubyIO.popen19", "popen");
            runtime.addBoundMethod("org.jruby.RubyIO.read19", "read");
        }
        javaMethod = new RubyIO$i$0$0$autoclose(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "autoclose", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "autoclose", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("autoclose", javaMethod);
        javaMethod = new RubyIO$i$1$0$syswrite(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "syswrite", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "syswrite", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("syswrite", javaMethod);
        javaMethod = new RubyIO$i$0$1$sysseek(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "sysseek", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "sysseek", RubyFixnum.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("sysseek", javaMethod);
        javaMethod = new RubyIO$i$1$0$putc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "putc", false, CallConfiguration.FrameBacktraceScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "putc", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("putc", javaMethod);
        javaMethod = new RubyIO$i$0$0$printf(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "printf", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "printf", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("printf", javaMethod);
        javaMethod = new RubyIO$i$0$0$pid(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pid", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "pid", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("pid", javaMethod);
        javaMethod = new RubyIO$i$0$1$reopen(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "reopen", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "reopen", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("reopen", javaMethod);
        javaMethod = new RubyIO$i$0$1$each(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "each", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "each", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new RubyIO$i$1$0$autoclose_set(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "autoclose_set", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "autoclose_set", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("autoclose=", javaMethod);
        javaMethod = new RubyIO$i$0$0$fsync(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "fsync", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "fsync", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("fsync", javaMethod);
        javaMethod = new RubyIO$i$0$0$each_byte(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_byte", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "each_byte", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_byte", javaMethod);
        javaMethod = new RubyIO$i$0$0$close_read(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close_read", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "close_read", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("close_read", javaMethod);
        javaMethod = new RubyIO$i$read(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "read", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("read", javaMethod);
        javaMethod = new RubyIO$i$0$0$to_io(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_io", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "to_io", RubyIO.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_io", javaMethod);
        javaMethod = new RubyIO$i$0$1$read_nonblock(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "read_nonblock", false, CallConfiguration.FrameBacktraceScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "read_nonblock", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("read_nonblock", javaMethod);
        javaMethod = new RubyIO$i$0$0$closed_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "closed_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "closed_p", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("closed?", javaMethod);
        javaMethod = new RubyIO$i$readline(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readline", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("readline", javaMethod);
        javaMethod = new RubyIO$i$0$0$sync(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "sync", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "sync", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("sync", javaMethod);
        javaMethod = new RubyIO$i$0$0$bytes(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "bytes", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "bytes", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("bytes", javaMethod);
        javaMethod = new RubyIO$i$0$0$tty_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "tty_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "tty_p", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("tty?", javaMethod);
        cls.addMethodAtBootTimeOnly("isatty", javaMethod);
        javaMethod = new RubyIO$i$fcntl(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "fcntl", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("fcntl", javaMethod);
        javaMethod = new RubyIO$i$0$1$ioctl(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "ioctl", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "ioctl", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("ioctl", javaMethod);
        javaMethod = new RubyIO$i$1$0$op_append(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_append", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "op_append", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<<", javaMethod);
        javaMethod = new RubyIO$i$0$0$print(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "print", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "print", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("print", javaMethod);
        javaMethod = new RubyIO$i$1$0$write_nonblock(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write_nonblock", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "write_nonblock", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write_nonblock", javaMethod);
        javaMethod = new RubyIO$i$0$0$puts(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "puts", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "puts", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("puts", javaMethod);
        javaMethod = new RubyIO$i$1$0$write(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "write", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write", javaMethod);
        javaMethod = new RubyIO$i$0$0$close(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "close", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("close", javaMethod);
        javaMethod = new RubyIO$i$0$1$readlines(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readlines", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "readlines", RubyArray.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("readlines", javaMethod);
        javaMethod = new RubyIO$i$0$1$readpartial(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readpartial", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "readpartial", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("readpartial", javaMethod);
        javaMethod = new RubyIO$i$0$0$chars(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "chars", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "chars", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("chars", javaMethod);
        javaMethod = new RubyIO$i$0$0$close_write(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close_write", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "close_write", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("close_write", javaMethod);
        javaMethod = new RubyIO$i$0$0$stat(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "stat", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "stat", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("stat", javaMethod);
        javaMethod = new RubyIO$i$1$0$lineno_set(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "lineno_set", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "lineno_set", RubyFixnum.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("lineno=", javaMethod);
        javaMethod = new RubyIO$i$0$0$binmode(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "binmode", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "binmode", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("binmode", javaMethod);
        javaMethod = new RubyIO$i$0$0$codepoints(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "codepoints", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "codepoints", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("codepoints", javaMethod);
        javaMethod = new RubyIO$i$0$1$each_line(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "each_line", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "each_line", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_line", javaMethod);
        javaMethod = new RubyIO$i$0$0$lineno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "lineno", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "lineno", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("lineno", javaMethod);
        javaMethod = new RubyIO$i$0$0$rewind(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rewind", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "rewind", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("rewind", javaMethod);
        javaMethod = new RubyIO$i$0$0$each_char(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_char", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "each_char", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_char", javaMethod);
        javaMethod = new RubyIO$i$0$0$flush(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "flush", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "flush", RubyIO.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("flush", javaMethod);
        javaMethod = new RubyIO$i$0$0$fileno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "fileno", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "fileno", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("fileno", javaMethod);
        cls.defineAlias("to_i", "fileno");
        javaMethod = new RubyIO$i$0$0$eof_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "eof_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "eof_p", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("eof?", javaMethod);
        cls.addMethodAtBootTimeOnly("eof", javaMethod);
        javaMethod = new RubyIO$i$0$1$sysread(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "sysread", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "sysread", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("sysread", javaMethod);
        javaMethod = new RubyIO$i$1$0$sync_set(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "sync_set", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "sync_set", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("sync=", javaMethod);
        javaMethod = new RubyIO$i$0$0$pos(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pos", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "pos", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("pos", javaMethod);
        cls.addMethodAtBootTimeOnly("tell", javaMethod);
        javaMethod = new RubyIO$i$seek(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "seek", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("seek", javaMethod);
        javaMethod = new RubyIO$i$1$0$pos_set(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "pos_set", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "pos_set", RubyFixnum.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("pos=", javaMethod);
        javaMethod = new RubyIO$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "initialize_copy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new RubyIO$i$0$0$each_codepoint(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_codepoint", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyIO.class, "each_codepoint", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_codepoint", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyIO.autoclose", "autoclose");
        runtime.addBoundMethod("org.jruby.RubyIO.syswrite", "syswrite");
        runtime.addBoundMethod("org.jruby.RubyIO.sysseek", "sysseek");
        runtime.addBoundMethod("org.jruby.RubyIO.putc", "putc");
        runtime.addBoundMethod("org.jruby.RubyIO.printf", "printf");
        runtime.addBoundMethod("org.jruby.RubyIO.pid", "pid");
        runtime.addBoundMethod("org.jruby.RubyIO.reopen", "reopen");
        runtime.addBoundMethod("org.jruby.RubyIO.each", "each");
        runtime.addBoundMethod("org.jruby.RubyIO.autoclose_set", "autoclose=");
        runtime.addBoundMethod("org.jruby.RubyIO.fsync", "fsync");
        runtime.addBoundMethod("org.jruby.RubyIO.each_byte", "each_byte");
        runtime.addBoundMethod("org.jruby.RubyIO.close_read", "close_read");
        runtime.addBoundMethod("org.jruby.RubyIO.read", "read");
        runtime.addBoundMethod("org.jruby.RubyIO.to_io", "to_io");
        runtime.addBoundMethod("org.jruby.RubyIO.read_nonblock", "read_nonblock");
        runtime.addBoundMethod("org.jruby.RubyIO.closed_p", "closed?");
        runtime.addBoundMethod("org.jruby.RubyIO.readline", "readline");
        runtime.addBoundMethod("org.jruby.RubyIO.sync", "sync");
        runtime.addBoundMethod("org.jruby.RubyIO.bytes", "bytes");
        runtime.addBoundMethod("org.jruby.RubyIO.tty_p", "tty?");
        runtime.addBoundMethod("org.jruby.RubyIO.fcntl", "fcntl");
        runtime.addBoundMethod("org.jruby.RubyIO.ioctl", "ioctl");
        runtime.addBoundMethod("org.jruby.RubyIO.op_append", "<<");
        runtime.addBoundMethod("org.jruby.RubyIO.print", "print");
        runtime.addBoundMethod("org.jruby.RubyIO.write_nonblock", "write_nonblock");
        runtime.addBoundMethod("org.jruby.RubyIO.puts", "puts");
        runtime.addBoundMethod("org.jruby.RubyIO.write", "write");
        runtime.addBoundMethod("org.jruby.RubyIO.close", "close");
        runtime.addBoundMethod("org.jruby.RubyIO.readlines", "readlines");
        runtime.addBoundMethod("org.jruby.RubyIO.readpartial", "readpartial");
        runtime.addBoundMethod("org.jruby.RubyIO.chars", "chars");
        runtime.addBoundMethod("org.jruby.RubyIO.close_write", "close_write");
        runtime.addBoundMethod("org.jruby.RubyIO.stat", "stat");
        runtime.addBoundMethod("org.jruby.RubyIO.lineno_set", "lineno=");
        runtime.addBoundMethod("org.jruby.RubyIO.binmode", "binmode");
        runtime.addBoundMethod("org.jruby.RubyIO.codepoints", "codepoints");
        runtime.addBoundMethod("org.jruby.RubyIO.each_line", "each_line");
        runtime.addBoundMethod("org.jruby.RubyIO.lineno", "lineno");
        runtime.addBoundMethod("org.jruby.RubyIO.rewind", "rewind");
        runtime.addBoundMethod("org.jruby.RubyIO.each_char", "each_char");
        runtime.addBoundMethod("org.jruby.RubyIO.flush", "flush");
        runtime.addBoundMethod("org.jruby.RubyIO.fileno", "fileno");
        runtime.addBoundMethod("org.jruby.RubyIO.eof_p", "eof?");
        runtime.addBoundMethod("org.jruby.RubyIO.sysread", "sysread");
        runtime.addBoundMethod("org.jruby.RubyIO.sync_set", "sync=");
        runtime.addBoundMethod("org.jruby.RubyIO.pos", "pos");
        runtime.addBoundMethod("org.jruby.RubyIO.seek", "seek");
        runtime.addBoundMethod("org.jruby.RubyIO.pos_set", "pos=");
        runtime.addBoundMethod("org.jruby.RubyIO.initialize_copy", "initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyIO.each_codepoint", "each_codepoint");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyIO$i$0$1$initialize(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "initialize", IRubyObject.class, new Class[] { IRubyObject[].class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            javaMethod = new RubyIO$i$0$0$lines(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "lines", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "lines", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("lines", javaMethod);
            javaMethod = new RubyIO$i$0$0$readchar(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "readchar", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "readchar", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("readchar", javaMethod);
            javaMethod = new RubyIO$i$gets(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "gets", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("gets", javaMethod);
            javaMethod = new RubyIO$i$1$0$ungetc(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "ungetc", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "ungetc", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("ungetc", javaMethod);
            javaMethod = new RubyIO$i$0$0$getc(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "getc", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "getc", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("getc", javaMethod);
            cls.addMethodAtBootTimeOnly("getbyte", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyIO.initialize", "initialize");
            runtime.addBoundMethod("org.jruby.RubyIO.lines", "lines");
            runtime.addBoundMethod("org.jruby.RubyIO.readchar", "readchar");
            runtime.addBoundMethod("org.jruby.RubyIO.gets", "gets");
            runtime.addBoundMethod("org.jruby.RubyIO.ungetc", "ungetc");
            runtime.addBoundMethod("org.jruby.RubyIO.getc", "getc");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyIO$i$initialize19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "initialize19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            javaMethod = new RubyIO$i$0$0$external_encoding(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "external_encoding", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "external_encoding", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("external_encoding", javaMethod);
            javaMethod = new RubyIO$i$0$0$internal_encoding(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "internal_encoding", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "internal_encoding", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("internal_encoding", javaMethod);
            javaMethod = new RubyIO$i$0$0$lines19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "lines19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "lines19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("lines", javaMethod);
            javaMethod = new RubyIO$i$0$0$getbyte19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "getbyte19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "getbyte19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("getbyte", javaMethod);
            javaMethod = new RubyIO$i$set_encoding(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "set_encoding", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("set_encoding", javaMethod);
            javaMethod = new RubyIO$i$0$0$readchar19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "readchar19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "readchar19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("readchar", javaMethod);
            javaMethod = new RubyIO$i$gets19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "gets19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("gets", javaMethod);
            javaMethod = new RubyIO$i$1$0$ungetc19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "ungetc19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "ungetc19", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("ungetc", javaMethod);
            javaMethod = new RubyIO$i$0$0$op_binmode(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "op_binmode", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "op_binmode", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("binmode?", javaMethod);
            javaMethod = new RubyIO$i$0$0$getc19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "getc19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyIO.class, "getc19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("getc", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyIO.initialize19", "initialize");
            runtime.addBoundMethod("org.jruby.RubyIO.external_encoding", "external_encoding");
            runtime.addBoundMethod("org.jruby.RubyIO.internal_encoding", "internal_encoding");
            runtime.addBoundMethod("org.jruby.RubyIO.lines19", "lines");
            runtime.addBoundMethod("org.jruby.RubyIO.getbyte19", "getbyte");
            runtime.addBoundMethod("org.jruby.RubyIO.set_encoding", "set_encoding");
            runtime.addBoundMethod("org.jruby.RubyIO.readchar19", "readchar");
            runtime.addBoundMethod("org.jruby.RubyIO.gets19", "gets");
            runtime.addBoundMethod("org.jruby.RubyIO.ungetc19", "ungetc");
            runtime.addBoundMethod("org.jruby.RubyIO.op_binmode", "binmode?");
            runtime.addBoundMethod("org.jruby.RubyIO.getc19", "getc");
        }
    }
    
    static {
        ASTInspector.addScopeAwareMethods("readline", "print", "gets");
    }
}
