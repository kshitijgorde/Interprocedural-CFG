// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyDir$i$1$0$initialize19;
import org.jruby.RubyDir$i$1$0$initialize;
import org.jruby.RubyDir$i$0$0$read;
import org.jruby.RubyDir$i$0$0$entries;
import org.jruby.RubyDir$i$0$0$path;
import org.jruby.RubyDir$i$1$0$seek;
import org.jruby.RubyDir$i$1$0$set_pos;
import org.jruby.RubyDir$i$0$0$close;
import org.jruby.RubyInteger;
import org.jruby.RubyDir$i$0$0$tell;
import org.jruby.RubyDir$i$0$0$each19;
import org.jruby.RubyDir$i$0$0$inspect;
import org.jruby.RubyDir$i$0$0$rewind;
import org.jruby.RubyDir$s$0$1$home;
import org.jruby.RubyDir$s$entries19;
import org.jruby.RubyDir$s$1$0$rmdir19;
import org.jruby.RubyDir$s$1$0$exist;
import org.jruby.RubyDir$s$1$0$foreach19;
import org.jruby.RubyDir$s$0$1$mkdir19;
import org.jruby.RubyDir$s$1$0$open19;
import org.jruby.RubyArray;
import org.jruby.RubyDir$s$1$0$entries;
import org.jruby.RubyDir$s$1$0$rmdir;
import org.jruby.RubyDir$s$1$0$foreach;
import org.jruby.RubyDir$s$0$1$mkdir;
import org.jruby.RubyDir$s$1$0$open;
import org.jruby.CompatVersion;
import org.jruby.RubyDir$s$1$0$chroot;
import org.jruby.RubyDir$s$0$0$aref;
import org.jruby.RubyDir$s$0$1$chdir;
import org.jruby.RubyString;
import org.jruby.RubyDir$s$0$0$getwd;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Block;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyDir;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyDir$s$0$1$glob;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyDir$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyDir$s$0$1$glob(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "glob", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "glob", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("glob", javaMethod);
        javaMethod = new RubyDir$s$0$0$getwd(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "getwd", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "getwd", RubyString.class, new Class[] { IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("getwd", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("pwd", javaMethod);
        javaMethod = new RubyDir$s$0$1$chdir(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "chdir", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "chdir", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("chdir", javaMethod);
        javaMethod = new RubyDir$s$0$0$aref(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "aref", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "aref", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new RubyDir$s$1$0$chroot(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "chroot", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "chroot", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("chroot", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyDir.glob", "glob");
        runtime.addBoundMethod("org.jruby.RubyDir.getwd", "getwd");
        runtime.addBoundMethod("org.jruby.RubyDir.chdir", "chdir");
        runtime.addBoundMethod("org.jruby.RubyDir.aref", "[]");
        runtime.addBoundMethod("org.jruby.RubyDir.chroot", "chroot");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyDir$s$1$0$open(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "open", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "open", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("open", javaMethod);
            javaMethod = new RubyDir$s$0$1$mkdir(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "mkdir", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "mkdir", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("mkdir", javaMethod);
            javaMethod = new RubyDir$s$1$0$foreach(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "foreach", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "foreach", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("foreach", javaMethod);
            javaMethod = new RubyDir$s$1$0$rmdir(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "rmdir", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "rmdir", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("rmdir", javaMethod);
            singletonClass.addMethodAtBootTimeOnly("unlink", javaMethod);
            singletonClass.addMethodAtBootTimeOnly("delete", javaMethod);
            javaMethod = new RubyDir$s$1$0$entries(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "entries", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "entries", RubyArray.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("entries", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyDir.open", "open");
            runtime.addBoundMethod("org.jruby.RubyDir.mkdir", "mkdir");
            runtime.addBoundMethod("org.jruby.RubyDir.foreach", "foreach");
            runtime.addBoundMethod("org.jruby.RubyDir.rmdir", "rmdir");
            runtime.addBoundMethod("org.jruby.RubyDir.entries", "entries");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyDir$s$1$0$open19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "open19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "open19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("open", javaMethod);
            javaMethod = new RubyDir$s$0$1$mkdir19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "mkdir19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "mkdir19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("mkdir", javaMethod);
            javaMethod = new RubyDir$s$1$0$foreach19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "foreach19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "foreach19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, Block.class }, true);
            singletonClass.addMethodAtBootTimeOnly("foreach", javaMethod);
            javaMethod = new RubyDir$s$1$0$exist(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "exist", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "exist", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("exists?", javaMethod);
            singletonClass.addMethodAtBootTimeOnly("exist?", javaMethod);
            javaMethod = new RubyDir$s$1$0$rmdir19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "rmdir19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "rmdir19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("rmdir", javaMethod);
            singletonClass.addMethodAtBootTimeOnly("unlink", javaMethod);
            singletonClass.addMethodAtBootTimeOnly("delete", javaMethod);
            javaMethod = new RubyDir$s$entries19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "entries19", true, CallConfiguration.FrameNoneScopeNone, false);
            singletonClass.addMethodAtBootTimeOnly("entries", javaMethod);
            javaMethod = new RubyDir$s$0$1$home(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "home", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "home", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("home", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyDir.open19", "open");
            runtime.addBoundMethod("org.jruby.RubyDir.mkdir19", "mkdir");
            runtime.addBoundMethod("org.jruby.RubyDir.foreach19", "foreach");
            runtime.addBoundMethod("org.jruby.RubyDir.exist", "exists?");
            runtime.addBoundMethod("org.jruby.RubyDir.rmdir19", "rmdir");
            runtime.addBoundMethod("org.jruby.RubyDir.entries19", "entries");
            runtime.addBoundMethod("org.jruby.RubyDir.home", "home");
        }
        javaMethod = new RubyDir$i$0$0$rewind(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rewind", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "rewind", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("rewind", javaMethod);
        javaMethod = new RubyDir$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "inspect", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyDir$i$0$0$each19(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each19", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "each19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new RubyDir$i$0$0$tell(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "tell", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "tell", RubyInteger.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("tell", javaMethod);
        cls.addMethodAtBootTimeOnly("pos", javaMethod);
        javaMethod = new RubyDir$i$0$0$close(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "close", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("close", javaMethod);
        javaMethod = new RubyDir$i$1$0$set_pos(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_pos", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "set_pos", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("pos=", javaMethod);
        javaMethod = new RubyDir$i$1$0$seek(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "seek", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "seek", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("seek", javaMethod);
        javaMethod = new RubyDir$i$0$0$path(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "path", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "path", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("path", javaMethod);
        javaMethod = new RubyDir$i$0$0$entries(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "entries", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "entries", RubyArray.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("entries", javaMethod);
        javaMethod = new RubyDir$i$0$0$read(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "read", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyDir.class, "read", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("read", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyDir.rewind", "rewind");
        runtime.addBoundMethod("org.jruby.RubyDir.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyDir.each19", "each");
        runtime.addBoundMethod("org.jruby.RubyDir.tell", "tell");
        runtime.addBoundMethod("org.jruby.RubyDir.close", "close");
        runtime.addBoundMethod("org.jruby.RubyDir.set_pos", "pos=");
        runtime.addBoundMethod("org.jruby.RubyDir.seek", "seek");
        runtime.addBoundMethod("org.jruby.RubyDir.path", "path");
        runtime.addBoundMethod("org.jruby.RubyDir.entries", "entries");
        runtime.addBoundMethod("org.jruby.RubyDir.read", "read");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyDir$i$1$0$initialize(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "initialize", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyDir.initialize", "initialize");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyDir$i$1$0$initialize19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "initialize19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyDir.class, "initialize19", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyDir.initialize19", "initialize");
        }
    }
}
