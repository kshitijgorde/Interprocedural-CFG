// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.compiler.ASTInspector;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyStringIO$i$0$0$getc19;
import org.jruby.RubyStringIO$i$0$1$readpartial;
import org.jruby.RubyStringIO$i$1$0$ungetc19;
import org.jruby.RubyStringIO$i$0$0$path19;
import org.jruby.RubyStringIO$i$0$0$readchar19;
import org.jruby.RubyStringIO$i$0$0$print19;
import org.jruby.RubyStringIO$i$0$1$read_nonblock;
import org.jruby.CompatVersion;
import org.jruby.RubyStringIO$i$0$0$getc;
import org.jruby.RubyStringIO$i$1$0$initialize_copy;
import org.jruby.RubyStringIO$i$0$1$seek;
import org.jruby.RubyStringIO$i$1$0$set_pos;
import org.jruby.RubyStringIO$i$0$0$pos;
import org.jruby.RubyStringIO$i$1$0$set_sync;
import org.jruby.RubyStringIO$i$0$2$sysread;
import org.jruby.RubyStringIO$i$0$0$fileno;
import org.jruby.RubyStringIO$i$0$0$length;
import org.jruby.RubyStringIO$i$0$0$flush;
import org.jruby.RubyStringIO$i$0$0$each_char;
import org.jruby.RubyStringIO$i$0$0$rewind;
import org.jruby.RubyStringIO$i$0$0$closed_read_p;
import org.jruby.RubyStringIO$i$0$0$lineno;
import org.jruby.RubyStringIO$i$0$1$each_line;
import org.jruby.RubyStringIO$i$0$0$binmode;
import org.jruby.RubyStringIO$i$1$0$set_lineno;
import org.jruby.RubyStringIO$i$0$0$close_write;
import org.jruby.RubyStringIO$i$0$0$chars;
import org.jruby.RubyStringIO$i$0$0$eof;
import org.jruby.RubyStringIO$i$0$1$gets;
import org.jruby.RubyStringIO$i$0$1$readlines;
import org.jruby.RubyStringIO$i$0$0$close;
import org.jruby.RubyStringIO$i$0$1$lines;
import org.jruby.RubyStringIO$i$1$0$write;
import org.jruby.RubyStringIO$i$1$0$ungetc;
import org.jruby.RubyStringIO$i$0$0$puts;
import org.jruby.RubyStringIO$i$0$0$readchar;
import org.jruby.RubyStringIO$i$0$0$print;
import org.jruby.RubyStringIO$i$1$0$append;
import org.jruby.RubyStringIO$i$0$0$fcntl;
import org.jruby.RubyStringIO$i$0$0$isatty;
import org.jruby.RubyStringIO$i$0$0$closed_write_p;
import org.jruby.RubyStringIO$i$0$2$initialize;
import org.jruby.RubyStringIO$i$0$0$bytes;
import org.jruby.RubyStringIO$i$1$0$set_string;
import org.jruby.RubyStringIO$i$0$0$sync;
import org.jruby.RubyStringIO$i$0$1$readline;
import org.jruby.RubyStringIO$i$0$0$closed_p;
import org.jruby.RubyStringIO$i$0$2$read;
import org.jruby.RubyStringIO$i$0$0$close_read;
import org.jruby.RubyStringIO$i$0$0$path;
import org.jruby.RubyStringIO$i$0$0$each_byte19;
import org.jruby.RubyStringIO$i$0$0$fsync;
import org.jruby.RubyStringIO$i$1$0$truncate;
import org.jruby.RubyStringIO$i$0$0$string;
import org.jruby.RubyStringIO$i$0$2$reopen;
import org.jruby.RubyStringIO$i$0$1$each;
import org.jruby.RubyStringIO$i$1$0$putc;
import org.jruby.RubyStringIO$i$0$0$printf;
import org.jruby.RubyStringIO$i$0$0$pid;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Block;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyStringIO;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyStringIO$s$0$2$open;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyStringIO$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyStringIO$s$0$2$open(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "open", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "open", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("open", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyStringIO.open", "open");
        javaMethod = new RubyStringIO$i$0$0$pid(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pid", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "pid", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("pid", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$printf(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "printf", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "printf", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("printf", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$putc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "putc", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "putc", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("putc", javaMethod);
        javaMethod = new RubyStringIO$i$0$1$each(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "each", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "each", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new RubyStringIO$i$0$2$reopen(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "reopen", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "reopen", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("reopen", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "string", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "string", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("string", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$truncate(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "truncate", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "truncate", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("truncate", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$fsync(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "fsync", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "fsync", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("fsync", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$each_byte19(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_byte19", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "each_byte19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_byte", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$path(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "path", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "path", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("path", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$close_read(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close_read", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "close_read", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("close_read", javaMethod);
        javaMethod = new RubyStringIO$i$0$2$read(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "read", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "read", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("read", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$closed_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "closed_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "closed_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("closed?", javaMethod);
        javaMethod = new RubyStringIO$i$0$1$readline(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readline", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "readline", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("readline", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$sync(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "sync", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "sync", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("sync", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$set_string(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_string", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "set_string", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("string=", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$bytes(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "bytes", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "bytes", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("bytes", javaMethod);
        javaMethod = new RubyStringIO$i$0$2$initialize(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "initialize", IRubyObject.class, new Class[] { IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$closed_write_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "closed_write_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "closed_write_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("closed_write?", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$isatty(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "isatty", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "isatty", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("tty?", javaMethod);
        cls.addMethodAtBootTimeOnly("isatty", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$fcntl(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "fcntl", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "fcntl", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("fcntl", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$append(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "append", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "append", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<<", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$print(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "print", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "print", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("print", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$readchar(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "readchar", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "readchar", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("readchar", javaMethod);
        cls.addMethodAtBootTimeOnly("readbyte", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$puts(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "puts", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "puts", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("puts", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$ungetc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "ungetc", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "ungetc", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("ungetc", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$write(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "write", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "write", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("write", javaMethod);
        cls.addMethodAtBootTimeOnly("syswrite", javaMethod);
        javaMethod = new RubyStringIO$i$0$1$lines(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "lines", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "lines", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("lines", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$close(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "close", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("close", javaMethod);
        javaMethod = new RubyStringIO$i$0$1$readlines(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readlines", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "readlines", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("readlines", javaMethod);
        javaMethod = new RubyStringIO$i$0$1$gets(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "gets", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "gets", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("gets", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$eof(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "eof", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "eof", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("eof", javaMethod);
        cls.addMethodAtBootTimeOnly("eof?", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$chars(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "chars", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "chars", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("chars", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$close_write(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close_write", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "close_write", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("close_write", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$set_lineno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_lineno", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "set_lineno", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("lineno=", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$binmode(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "binmode", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "binmode", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("binmode", javaMethod);
        javaMethod = new RubyStringIO$i$0$1$each_line(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "each_line", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "each_line", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_line", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$lineno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "lineno", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "lineno", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("lineno", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$closed_read_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "closed_read_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "closed_read_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("closed_read?", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$rewind(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rewind", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "rewind", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("rewind", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$each_char(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_char", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "each_char", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_char", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$flush(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "flush", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "flush", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("flush", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$length(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "length", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "length", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("length", javaMethod);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$fileno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "fileno", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "fileno", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("fileno", javaMethod);
        javaMethod = new RubyStringIO$i$0$2$sysread(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "sysread", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "sysread", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("sysread", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$set_sync(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_sync", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "set_sync", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("sync=", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$pos(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pos", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "pos", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("pos", javaMethod);
        cls.addMethodAtBootTimeOnly("tell", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$set_pos(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_pos", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "set_pos", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("pos=", javaMethod);
        javaMethod = new RubyStringIO$i$0$1$seek(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "seek", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "seek", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("seek", javaMethod);
        javaMethod = new RubyStringIO$i$1$0$initialize_copy(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "initialize_copy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new RubyStringIO$i$0$0$getc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "getc", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyStringIO.class, "getc", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("getc", javaMethod);
        cls.addMethodAtBootTimeOnly("getbyte", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyStringIO.pid", "pid");
        runtime.addBoundMethod("org.jruby.RubyStringIO.printf", "printf");
        runtime.addBoundMethod("org.jruby.RubyStringIO.putc", "putc");
        runtime.addBoundMethod("org.jruby.RubyStringIO.each", "each");
        runtime.addBoundMethod("org.jruby.RubyStringIO.reopen", "reopen");
        runtime.addBoundMethod("org.jruby.RubyStringIO.string", "string");
        runtime.addBoundMethod("org.jruby.RubyStringIO.truncate", "truncate");
        runtime.addBoundMethod("org.jruby.RubyStringIO.fsync", "fsync");
        runtime.addBoundMethod("org.jruby.RubyStringIO.each_byte19", "each_byte");
        runtime.addBoundMethod("org.jruby.RubyStringIO.path", "path");
        runtime.addBoundMethod("org.jruby.RubyStringIO.close_read", "close_read");
        runtime.addBoundMethod("org.jruby.RubyStringIO.read", "read");
        runtime.addBoundMethod("org.jruby.RubyStringIO.closed_p", "closed?");
        runtime.addBoundMethod("org.jruby.RubyStringIO.readline", "readline");
        runtime.addBoundMethod("org.jruby.RubyStringIO.sync", "sync");
        runtime.addBoundMethod("org.jruby.RubyStringIO.set_string", "string=");
        runtime.addBoundMethod("org.jruby.RubyStringIO.bytes", "bytes");
        runtime.addBoundMethod("org.jruby.RubyStringIO.initialize", "initialize");
        runtime.addBoundMethod("org.jruby.RubyStringIO.closed_write_p", "closed_write?");
        runtime.addBoundMethod("org.jruby.RubyStringIO.isatty", "tty?");
        runtime.addBoundMethod("org.jruby.RubyStringIO.fcntl", "fcntl");
        runtime.addBoundMethod("org.jruby.RubyStringIO.append", "<<");
        runtime.addBoundMethod("org.jruby.RubyStringIO.print", "print");
        runtime.addBoundMethod("org.jruby.RubyStringIO.readchar", "readchar");
        runtime.addBoundMethod("org.jruby.RubyStringIO.puts", "puts");
        runtime.addBoundMethod("org.jruby.RubyStringIO.ungetc", "ungetc");
        runtime.addBoundMethod("org.jruby.RubyStringIO.write", "write");
        runtime.addBoundMethod("org.jruby.RubyStringIO.lines", "lines");
        runtime.addBoundMethod("org.jruby.RubyStringIO.close", "close");
        runtime.addBoundMethod("org.jruby.RubyStringIO.readlines", "readlines");
        runtime.addBoundMethod("org.jruby.RubyStringIO.gets", "gets");
        runtime.addBoundMethod("org.jruby.RubyStringIO.eof", "eof");
        runtime.addBoundMethod("org.jruby.RubyStringIO.chars", "chars");
        runtime.addBoundMethod("org.jruby.RubyStringIO.close_write", "close_write");
        runtime.addBoundMethod("org.jruby.RubyStringIO.set_lineno", "lineno=");
        runtime.addBoundMethod("org.jruby.RubyStringIO.binmode", "binmode");
        runtime.addBoundMethod("org.jruby.RubyStringIO.each_line", "each_line");
        runtime.addBoundMethod("org.jruby.RubyStringIO.lineno", "lineno");
        runtime.addBoundMethod("org.jruby.RubyStringIO.closed_read_p", "closed_read?");
        runtime.addBoundMethod("org.jruby.RubyStringIO.rewind", "rewind");
        runtime.addBoundMethod("org.jruby.RubyStringIO.each_char", "each_char");
        runtime.addBoundMethod("org.jruby.RubyStringIO.flush", "flush");
        runtime.addBoundMethod("org.jruby.RubyStringIO.length", "length");
        runtime.addBoundMethod("org.jruby.RubyStringIO.fileno", "fileno");
        runtime.addBoundMethod("org.jruby.RubyStringIO.sysread", "sysread");
        runtime.addBoundMethod("org.jruby.RubyStringIO.set_sync", "sync=");
        runtime.addBoundMethod("org.jruby.RubyStringIO.pos", "pos");
        runtime.addBoundMethod("org.jruby.RubyStringIO.set_pos", "pos=");
        runtime.addBoundMethod("org.jruby.RubyStringIO.seek", "seek");
        runtime.addBoundMethod("org.jruby.RubyStringIO.initialize_copy", "initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyStringIO.getc", "getc");
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyStringIO$i$0$1$read_nonblock(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "read_nonblock", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringIO.class, "read_nonblock", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("read_nonblock", javaMethod);
            javaMethod = new RubyStringIO$i$0$0$print19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "print19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringIO.class, "print19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("print", javaMethod);
            javaMethod = new RubyStringIO$i$0$0$readchar19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "readchar19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringIO.class, "readchar19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("readchar", javaMethod);
            javaMethod = new RubyStringIO$i$0$0$path19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "path19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringIO.class, "path19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("path", javaMethod);
            javaMethod = new RubyStringIO$i$1$0$ungetc19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "ungetc19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringIO.class, "ungetc19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("ungetc", javaMethod);
            javaMethod = new RubyStringIO$i$0$1$readpartial(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "readpartial", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringIO.class, "readpartial", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("readpartial", javaMethod);
            javaMethod = new RubyStringIO$i$0$0$getc19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "getc19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyStringIO.class, "getc19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("getc", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyStringIO.read_nonblock", "read_nonblock");
            runtime.addBoundMethod("org.jruby.RubyStringIO.print19", "print");
            runtime.addBoundMethod("org.jruby.RubyStringIO.readchar19", "readchar");
            runtime.addBoundMethod("org.jruby.RubyStringIO.path19", "path");
            runtime.addBoundMethod("org.jruby.RubyStringIO.ungetc19", "ungetc");
            runtime.addBoundMethod("org.jruby.RubyStringIO.readpartial", "readpartial");
            runtime.addBoundMethod("org.jruby.RubyStringIO.getc19", "getc");
        }
    }
    
    static {
        ASTInspector.addScopeAwareMethods("each", "readline", "gets");
    }
}
