// 
// Decompiled by Procyon v0.5.30
// 

package org.jfree.data.jdbc;

import org.jfree.data.Range;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.Date;
import org.jfree.util.Log;
import java.sql.SQLException;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.sql.Connection;
import org.jfree.data.RangeInfo;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.AbstractXYDataset;

public class JDBCXYDataset extends AbstractXYDataset implements XYDataset, TableXYDataset, RangeInfo
{
    private transient Connection connection;
    private String[] columnNames;
    private ArrayList rows;
    private double maxValue;
    private double minValue;
    private boolean isTimeSeries;
    
    private JDBCXYDataset() {
        this.columnNames = new String[0];
        this.maxValue = 0.0;
        this.minValue = 0.0;
        this.isTimeSeries = false;
        this.rows = new ArrayList();
    }
    
    public JDBCXYDataset(final String url, final String driverName, final String user, final String password) throws SQLException, ClassNotFoundException {
        this();
        Class.forName(driverName);
        this.connection = DriverManager.getConnection(url, user, password);
    }
    
    public JDBCXYDataset(final Connection con) throws SQLException {
        this();
        this.connection = con;
    }
    
    public JDBCXYDataset(final Connection con, final String query) throws SQLException {
        this(con);
        this.executeQuery(query);
    }
    
    public boolean isTimeSeries() {
        return this.isTimeSeries;
    }
    
    public void setTimeSeries(final boolean timeSeries) {
        this.isTimeSeries = timeSeries;
    }
    
    public void executeQuery(final String query) throws SQLException {
        this.executeQuery(this.connection, query);
    }
    
    public void executeQuery(final Connection con, final String query) throws SQLException {
        if (con == null) {
            throw new SQLException("There is no database to execute the query.");
        }
        ResultSet resultSet = null;
        Statement statement = null;
        try {
            statement = con.createStatement();
            resultSet = statement.executeQuery(query);
            final ResultSetMetaData metaData = resultSet.getMetaData();
            final int numberOfColumns = metaData.getColumnCount();
            int numberOfValidColumns = 0;
            final int[] columnTypes = new int[numberOfColumns];
            for (int column = 0; column < numberOfColumns; ++column) {
                try {
                    final int type = metaData.getColumnType(column + 1);
                    switch (type) {
                        case -7:
                        case -5:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 91:
                        case 92:
                        case 93: {
                            ++numberOfValidColumns;
                            columnTypes[column] = type;
                            break;
                        }
                        default: {
                            Log.warn("Unable to load column " + column + " (" + type + "," + metaData.getColumnClassName(column + 1) + ")");
                            columnTypes[column] = 0;
                            break;
                        }
                    }
                }
                catch (SQLException e) {
                    columnTypes[column] = 0;
                    throw e;
                }
            }
            if (numberOfValidColumns <= 1) {
                throw new SQLException("Not enough valid columns where generated by query.");
            }
            this.columnNames = new String[numberOfValidColumns - 1];
            int currentColumn = 0;
            for (int column2 = 1; column2 < numberOfColumns; ++column2) {
                if (columnTypes[column2] != 0) {
                    this.columnNames[currentColumn] = metaData.getColumnLabel(column2 + 1);
                    ++currentColumn;
                }
            }
            if (this.rows != null) {
                for (int column2 = 0; column2 < this.rows.size(); ++column2) {
                    final ArrayList row = this.rows.get(column2);
                    row.clear();
                }
                this.rows.clear();
            }
            switch (columnTypes[0]) {
                case 91:
                case 92:
                case 93: {
                    this.isTimeSeries = true;
                    break;
                }
                default: {
                    this.isTimeSeries = false;
                    break;
                }
            }
            while (resultSet.next()) {
                final ArrayList newRow = new ArrayList();
                for (int column3 = 0; column3 < numberOfColumns; ++column3) {
                    final Object xObject = resultSet.getObject(column3 + 1);
                    switch (columnTypes[column3]) {
                        case -5:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8: {
                            newRow.add(xObject);
                            break;
                        }
                        case 91:
                        case 92:
                        case 93: {
                            newRow.add(new Long(((Date)xObject).getTime()));
                            break;
                        }
                        case 0: {
                            break;
                        }
                        default: {
                            System.err.println("Unknown data");
                            columnTypes[column3] = 0;
                            break;
                        }
                    }
                }
                this.rows.add(newRow);
            }
            if (this.rows.size() == 0) {
                final ArrayList newRow = new ArrayList();
                for (int column3 = 0; column3 < numberOfColumns; ++column3) {
                    if (columnTypes[column3] != 0) {
                        newRow.add(new Integer(0));
                    }
                }
                this.rows.add(newRow);
            }
            if (this.rows.size() < 1) {
                this.maxValue = 0.0;
                this.minValue = 0.0;
            }
            else {
                ArrayList row2 = this.rows.get(0);
                this.maxValue = Double.NEGATIVE_INFINITY;
                this.minValue = Double.POSITIVE_INFINITY;
                for (int rowNum = 0; rowNum < this.rows.size(); ++rowNum) {
                    row2 = this.rows.get(rowNum);
                    for (int column4 = 1; column4 < numberOfColumns; ++column4) {
                        final Object testValue = row2.get(column4);
                        if (testValue != null) {
                            final double test = ((Number)testValue).doubleValue();
                            if (test < this.minValue) {
                                this.minValue = test;
                            }
                            if (test > this.maxValue) {
                                this.maxValue = test;
                            }
                        }
                    }
                }
            }
            this.fireDatasetChanged();
        }
        finally {
            if (resultSet != null) {
                try {
                    resultSet.close();
                }
                catch (Exception ex) {}
            }
            if (statement != null) {
                try {
                    statement.close();
                }
                catch (Exception ex2) {}
            }
        }
    }
    
    public Number getX(final int seriesIndex, final int itemIndex) {
        final ArrayList row = this.rows.get(itemIndex);
        return row.get(0);
    }
    
    public Number getY(final int seriesIndex, final int itemIndex) {
        final ArrayList row = this.rows.get(itemIndex);
        return row.get(seriesIndex + 1);
    }
    
    public int getItemCount(final int seriesIndex) {
        return this.rows.size();
    }
    
    public int getItemCount() {
        return this.getItemCount(0);
    }
    
    public int getSeriesCount() {
        return this.columnNames.length;
    }
    
    public Comparable getSeriesKey(final int seriesIndex) {
        if (seriesIndex < this.columnNames.length && this.columnNames[seriesIndex] != null) {
            return this.columnNames[seriesIndex];
        }
        return "";
    }
    
    public int getLegendItemCount() {
        return this.getSeriesCount();
    }
    
    public String[] getLegendItemLabels() {
        return this.columnNames;
    }
    
    public void close() {
        try {
            this.connection.close();
        }
        catch (Exception e) {
            System.err.println("JdbcXYDataset: swallowing exception.");
        }
    }
    
    public double getRangeLowerBound(final boolean includeInterval) {
        return this.minValue;
    }
    
    public double getRangeUpperBound(final boolean includeInterval) {
        return this.maxValue;
    }
    
    public Range getRangeBounds(final boolean includeInterval) {
        return new Range(this.minValue, this.maxValue);
    }
}
