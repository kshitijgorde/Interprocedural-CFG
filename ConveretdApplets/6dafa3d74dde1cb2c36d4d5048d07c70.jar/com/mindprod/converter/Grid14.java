// 
// Decompiled by Procyon v0.5.30
// 

package com.mindprod.converter;

final class Grid14
{
    static final String[][] how14;
    
    static {
        how14 = new String[][] { { null, "b = t?(byte)1:(byte)0;", "u = t?(byte)1:(byte)0;", "s = t?(short)1:(short)0;", "// to get '0' and '1'\nc = t?'1':'0';\n// or to get Unicode value 0 or 1\nc = t?(char)1:(char)0;", "i = t?1:0;", "n = t?1L:0L;", "f = t?1.0f:0.0f;", "d = t?1.0d:0.0d;", "g = String.valueOf(t);", "tt = t?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte(t?(byte)1:(byte)0);", "uu = new Byte(t?(byte)1:(byte)0);", "ss = new Short(t?(short)1:(short)0);", "// to get '0' or '1'\ncc = new Character(t?'1':'0');\n// or to get Unicode 0 or 1\ncc = new Character(t?(char)1:(char)0);\n", "// best JDK 1.5+\nii = Integer.valueOf(t?1:0);\n// or JDK 1.4-\nii = new Integer(t?1:0);", "// best JDK 1.5+\nnn = Long.valueOf(t?1L:0L);\n// or JDK 1.4-\nnn = new Long(t?1L:0L);", "ff = new Float(t?1.f:0.0f);", "dd = new Double(t?1.0d:0.0d);" }, { "t = b!=0;", null, "u = b;", "s = b;", "// 9 -> '9'\nc = (char)(b + '0');\n// or to get Unicode value\nc = (char)b;", "i = b; // sign extends.", "n = b; // sign extends.", "f = b;", "d = b;", "// best for readability\ng = Integer.toString(b);\n// best for maintainability\ng = String.valueOf(b);\n// or\ng = Integer.toString(b, 7 /* radix */);\n// or\ng = Integer.toBinaryString(b);\n// or\ng = Integer.toOctalString(b);\n// or\ng = Integer.toHexString(b);\n// or kludgy and slow on unoptimised Javas\ng = \"\" + b;", "tt = (b!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte(b);", "uu = new Byte(b);", "ss = new Short(b); // sign extends\n", "// 9 -> '9'\ncc = new Character((char)(b + '0'));\n// or to get Unicode value\ncc = new Character((char)b);", "// best JDK 1.5+\nii = Integer.valueOf(b);\n// or JDK 1.4-\nii = new Integer(b); // sign extends.", "// best JDK 1.5+\nnn = Long.valueOf(b);\n// or JDK 1.4-\nnn = new Long(b); // sign extends.", "ff = new Float(b); // sign extends.", "dd = new Double(b); // sign extends." }, { "t = u!=0;", "b = u;", null, "s = (short)(u & 0xff);", "// 9 -> '9'\nc = (char)((u & 0xff) + '0');\n// or to get Unicode value\nc = (char)(u & 0xff);", "i = u & 0xff; // does not sign extend", "n = ((long)u) & 0xff; // does not sign extend.", "f = u & 0xff; // does not sign extend.", "d = u & 0xff; // does not sign extend.", "// best for readability\ng = Integer.toString(u & 0xff);\n// best for maintainability\ng = String.valueOf(u & 0xff);\n// or\ng = Integer.toString(u & 0xff, 7 /* radix */);\n// or\ng = Integer.toBinaryString(u & 0xff);\n// or\ng = Integer.toOctalString(u & 0xff);\n// or\ng = Integer.toHexString(u & 0xff);\n// or kludgy and possibly slow\ng = \"\" + (u & 0xff);", "tt = (u!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte(u);", "uu = new Byte(u);", "ss = new Short((short)(u & 0xff)); // does not sign extend.", "// 9 -> '9'\ncc =  new Character((char)((u & 0xff) + '0'));\n// or to get Unicode value\ncc =  new Character((char)(u & 0xff));", "// best JDK 1.5+\nii = Integer.valueOf(u & 0xff);\n// or JDK 1.4-\nii = new Integer(u & 0xff); // does not sign extend.", "// best JDK 1.5+\nnn = Long.valueOf(((long)u) & 0xff);\n// or JDK 1.4-\nnn = new Long(((long)u) & 0xff); // does not sign extend.", "ff = new Float(((long)u) & 0xff); // does not sign extend.", "dd = new Double(((long)u) & 0xff); // does not sign extend." }, { "t = s!=0;", "b = (byte)s;", "u = (byte)s;", null, "// 9 -> '9'\nc = (char)(s + '0');\n// or to get Unicode value\nc = (char)s;", "i = s;", "n = s;", "f = s;", "d = s;", "// best for readability\ng = Integer.toString(s);\n// best for maintainability\ng = String.valueOf(s);\n// or\ng = Integer.toString(s, 7 /* radix */);\n// or\ng = Integer.toBinaryString(s);\n// or\ng = Integer.toOctalString(s);\n// or\ng = Integer.toHexString(s);\n// or kludgy and possibly slow\ng = \"\" + s;", "tt = (s!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte((byte)s);", "uu = new Byte((byte)s);", "ss = new Short(s);", "// 9 -> '9'\ncc = new Character((char)(s + '0'));\n// or to get Unicode value\ncc = new Character((char)s);", "// best JDK 1.5+\nii = Integer.valueOf(s);\n// or JDK 1.4-\nii = new Integer(s);", "// best JDK 1.5+\nnn = Long.valueOf(s);\n// or JDK 1.4-\nnn = new Long(s);", "ff = new Float(s); /* locale-insensitive */", "dd = new Double(s); /* locale-insensitive */" }, { "// to convert '0' or '1'\nt = c!='0';\n// to convert Unicode 0 or 1\nt = c!=0;", "// international\nb = (byte)Character.digit(c, 10 /* radix */);\n// fastest '9' -> 9\nb = (byte)(c - '0');\n// or to get Unicode value\nb = (byte)c;", "// international\nu = (byte)Character.digit(c, 10 /* radix */);\n// fastest '9' -> 9\nu = (byte)(c - '0');\n// or to get Unicode value\nu = (byte)c;", "// international\ns = (short)Character.digit(c, 10 /* radix */);\n// fastest '9' -> 9\ns = (short)(c - '0');\n// or to get Unicode value\ns = (short)c;", null, "// international\ni = Character.digit(c, 10 /* radix */);\n// fastest '9' -> 9\ni = c - '0';\n// or to get Unicode value\ni = c; // does not sign extend.", "// international\nn = Character.digit(c, 10 /* radix */);\n// fastest '9' -> 9\nn = c - '0';\n// or to get Unicode value\nn = c; // does not sign extend.", "f = c; // does not sign extend.", "d = c; // does not sign extend.", "g = String.valueOf(c);", "// for '0' or '1'\ntt = (c!='0')?Boolean.TRUE:Boolean.FALSE;\n// or for Unicode 0 or 1\ntt = (c!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte((byte)c);", "uu = new Byte((byte)c);", "// international\nss = new Short((short)Character.digit(c, 10 /* radix */));\n// fastest '9' -> 9\nss = new Short((short)(c - '0'));\n// or to get Unicode value\nss = new Short((short)c);", "cc = new Character(c);", "// international, JDK 1.5+\nii = Integer.valueOf(Character.digit(c, 10 /* radix */));\n// fastest '9' -> 9, JDK 1.5+\nii = Integer.valueOf(c - '0');\n// or to get Unicode value JDK 1.5+\nii = Integer.valueOf(c);\n// international, JDK 1.4-\nii = new Integer(Character.digit(c, 10 /* radix */));\n// fastest '9' -> 9, JDK 1.4-\nii = new Integer(c - '0');\n// or to get Unicode value JDK 1.4-\nii = new Integer(c);", "// international, JDK 1.5+\nnn = Long.valueOf(Character.digit(c, 10 /* radix */));\n// fastest '9' -> 9, JDK 1.5+\nnn = Long.valueOf(c - '0');\n// or to get Unicode value JDK 1.5+\nnn = Long.valueOf(c);// international, JDK 1.4-\nnn = new Long(Character.digit(c, 10 /* radix */));\n// fastest '9' -> 9, JDK 1.4-\nnn = new Long(c - '0');\n// or to get Unicode value JDK 1.4-\nnn = new Long(c);", "ff = new Float(c); // does not sign extend.", "dd = new Double(c); // does not sign extend." }, { "t = i!=0;", "b = (byte)i;", "u = (byte)i;", "s = (short)i;", "// 9 -> '9'\nc = (char)(i + '0');\n// or to get Unicode value\nc = (char)i;", null, "n = i;", "f = i;\n// to construct a float out of IEEE bits\nf = Float.intBitsToFloat(i);", "d = i;", "// best for readability\ng = Integer.toString(i);\n// best for maintainability\ng = String.valueOf(i);\n// or\ng = Integer.toString(i, 7 /* radix */);\n// or\ng = Integer.toBinaryString(i);\n// or\ng = Integer.toOctalString(i);\n// or\ng = Integer.toHexString(i);\n// or kludgy and possibly slow\ng = \"\" + i;", "tt = (i!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte((byte)i);", "uu = new Byte((byte)i);", "ss = new Short((short)i);", "// 9 -> '9'\ncc = new Character((char)(i + '0'));\n// or to get Unicode value\ncc = new Character((char)i);", "// best JDK 1.5+\nii = Integer.valueOf(i);\n// or JDK 1.4-\nii = new Integer(i);", "// best JDK 1.5+\nnn = Long.valueOf(i);\n// or JDK 1.4-\nnn = new Long(i);", "ff = new Float(i);", "dd = new Double(i);" }, { "t = n!=0;", "b = (byte)n;", "u = (byte)n;", "s = (short)n;", "// 9 -> '9'\nc = (char)(n + '0');\n// or to get Unicode value\nc = (char)n;", "i = (int)n;", null, "f = n;", "d = n;\n// to construct a double out of IEEE bits\nd  = Double.longBitsToDouble (n);", "// best for readability\ng = Long.toString(n);\n// best for maintainability\ng = String.valueOf(n);\n// or\ng = Long.toString(n, 7 /* radix */);\n// or\ng = Long.toBinaryString(n);\n// or\ng = Long.toOctalString(n);\n// or\ng = Long.toHexString(n);\n// or kludgy and possibly slow\ng = \"\" + n;", "tt = (n!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte((byte)n);", "uu = new Byte((byte)n);", "ss = new Short((short)n);", "// 9 -> '9'\ncc = new Character((char)(n + '0'));\n// or to get Unicode value\ncc = new Character((char)n);", "// best JDK 1.5+\nii = Integer.valueOf((int)n);\n// or JDK 1.4-\nii = new Integer((int)n);", "// best JDK 1.5+\nnn = Long.valueOf(n);\n// or JDK 1.4-\nnn = new Long(n);", "ff = new Float(n);", "dd = new Double(n);" }, { "t = f!=0;", "b = (byte)f;", "u = (byte)f;", "s = (short)f;", "c = (char)f;", "// best\ni = (int)f;\n// or\ni = Math.round(f);\n// or\ni = (int)Math.ceil(f);\n// or\ni = (int)Math.floor(f);\n// to see the IEEE bits inside a float\ni = Float.floatToIntBits(f);", "// best\nn = (long)f;\n// or\nn = Math.round(f);\n// or\nn = (long)Math.ceil(f);\n// or\nn = (long)Math.floor(f);", null, "d = f;", "// 2 decimal places, rounded, locale-sensitive.\njava.text.DecimalFormat df2\n = new java.text.DecimalFormat(\"###,##0.00\");\ng = df2.format(f);\n// or exponential scientific format, locale-sensitive.\njava.text.DecimalFormat de\n = new java.text.DecimalFormat(\"0.000000E00\");\ng = de.format(f);\n// or best for readability, no loss of precision, locale-insensitive\ng = Float.toString(f);\n// or best for maintainability, no loss of precision, locale-insensitive\ng = String.valueOf(f);\n", "tt = (f!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte((byte)f);", "uu = new Byte((byte)f);", "ss = new Short((short)f);", "cc = new Character((char)f);", "ii = Integer.valueOf((int)f);", "nn = Long.valueOf((long)f);", "ff = new Float(f);", "dd = new Double(f);" }, { "t = d!=0;", "b = (byte)d;", "u = (byte)d;", "s = (short)d;", "c = (char)d;", "// best\ni = (int)d;\n// or\ni = (int)Math.round(d);\n// or\ni = (int)Math.ceil(d);\n// or\ni = (int)Math.floor(d);", "// best\nn = (long)d;\n// or\nn = Math.round(d);\n// or\nn = (long)Math.ceil(d);\n// or\nn = (long)Math.floor(d);\n// to see the IEEE bits inside a double\nn = Double.doubleToLongBits(d);", "f = (float)d;", null, "// 2 decimal places, rounded, locale-sensitive.\njava.text.DecimalFormat df2\n = new java.text.DecimalFormat(\"###,##0.00\");\ng = df2.format(d);\n// or exponential scientific format, locale-sensitive.\njava.text.DecimalFormat de\n = new java.text.DecimalFormat(\"0.0000000000E00\");\ng = de.format(d);\n// or best for readability, no loss of precision, locale-insensitive\ng = Double.toString(d);\n// or best for maintainability, no loss of precision, locale-insensitive\ng = String.valueOf(d);", "tt = (d!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte((byte)d);", "uu = new Byte((byte)d);", "ss = new Short((short)d);", "cc = new Character((char)d);", "ii = Integer.valueOf((int)d);", "nn = Long.valueOf((long)d);", "ff = new Float(d);", "dd = new Double(d);" }, { "t =  Boolean.valueOf(g.trim()).booleanValue();\n// or\nt = g.trim().equalsIgnoreCase(\"true\");", "try {\n// best\nb = (byte)Integer.parseInt(g.trim());\n// or\nb = (byte)Integer.parseInt(g.trim(), 16 /* radix */);\n} catch (NumberFormatException e){/* ... */}", "try {\n// best\nu = (byte)Integer.parseInt(g.trim());\n// or\nu = (byte)Integer.parseInt(g.trim(), 16 /* radix */);\n} catch (NumberFormatException e){/* ... */}", "try {\n// best\ns = (short)Integer.parseInt(g.trim());\n// or\ns = (short)Integer.parseInt(g.trim(), 16 /* radix */);\n} catch (NumberFormatException e){/* ... */}", "try {\n// \"9\" -> '9'\nc = g.charAt(0 /* position */);\n// or to get Unicode value\nc = (char)Integer.parseInt(g.trim());\n// or to get Unicode hex value\nc = (char)Integer.parseInt(g.trim(), 16 /* radix */);\n} catch (NumberFormatException e){/* ... */}", "try {\n// best\ni = Integer.parseInt(g.trim());\n// or\ni = Integer.parseInt(g.trim(), 16 /* radix */);\n} catch (NumberFormatException e){/* ... */}", "try {\nn = Long.parseLong(g.trim());\n} catch (NumberFormatException e){/* ... */}", "try {\n// best locale-insensitive\nf = Float.parseFloat(g.trim());\n// or locale-insensitive\nf = Float.valueOf(g.trim()).floatValue();\n} catch (NumberFormatException e){/* ... */}", "try {\n// best, locale-insensitive\nd = Double.parseDouble(g.trim()); \n// or locale-insensitive\nd = Double.valueOf(g.trim()).doubleValue(); \n} catch (NumberFormatException e){/* ... */}", null, "tt = Boolean.valueOf(g.trim());", "try {\n// best\nbb = new Byte(Byte.parseByte(g.trim()));\n// or\nbb = new Byte(Byte.parseByte(g.trim(), 16 /* radix */));\n// or\nbb = new Byte((byte)g.charAt(0 /* position */));\n} catch (NumberFormatException e){/* ... */}", "try {\n// best\nuu = new Byte(Byte.parseByte(g.trim()));\n// or\nuu = new Byte(Byte.parseByte(g.trim(), 16 /* radix */));\n// or\nuu = new Byte((byte)g.charAt(0 /* position */));\n} catch (NumberFormatException e){/* ... */}", "try {\n// best\nss = new Short(Short.parseShort(g.trim()));\n// or\nss = new Short(Short.parseShort(g.trim(), 16 /* radix */));\n// or\nss = new Short((short)g.charAt(0 /* position */));\n} catch (NumberFormatException e){/* ... */}", "try {\n// \"9\" -> '9'\ncc = new Character(g.charAt(0 /* position */));\n// or to get Unicode value\ncc = new Character((char)Integer.parseInt(g.trim()));\n// or to get Unicode hex value\ncc = new Character((char)Integer.parseInt(g.trim(), 16 /* radix */));\n} catch (NumberFormatException e){/* ... */}", "try {\n// best, caches\nii = Integer.valueOf(g.trim());\n// or\nii = new Integer(g.trim());\n} catch (NumberFormatException e){/* ... */}", "try {\n// best, caches\nnn = Long.valueOf(g.trim());\n// or\nnn = new Long(g.trim());\n} catch (NumberFormatException e){/* ... */}", "try {\n// best, locale-insensitive.\nff = new Float(g.trim());\n// or locale-insensitive\nff = Float.valueOf(g.trim());\n} catch (NumberFormatException e){/* ... */}", "try {\n// best,  locale-insensitive*/\ndd = new Double(g); \n// or locale-insensitive\ndd = Double.valueOf(g); \n} catch (NumberFormatException e){/* ... */}" }, { "t = tt.booleanValue();", "b = tt.booleanValue()?(byte)1:(byte)0;", "u = tt.booleanValue()?(byte)1:(byte)0;", "s = tt.booleanValue()?(short)1:(short)0;", "// to get '0' and '1'\nc = tt.booleanValue()?'1':'0';\n// or to get Unicode 0 and 1\nc = tt.booleanValue()?(char)1:(char)0;", "i = tt.booleanValue()?1:0;", "n = tt.booleanValue()?1L:0L;", "f = tt.booleanValue()?1.0f:0.0f;", "d = tt.booleanValue()?1.0d:0.0d;", "g = tt.toString();", null, "bb = new Byte(tt.booleanValue()?(byte)1:(byte)0);", "uu = new Byte(tt.booleanValue()?(byte)1:(byte)0);", "ss = new Short(tt.booleanValue()?(short)1:(short)0);", "// to get '0' and '1'\ncc = new Character(tt.booleanValue()?'1':'0');\n// or to get Unicode 0 or 1\ncc = new Character(tt.booleanValue()?(char)1:(char)0);", "ii = Integer.valueOf(tt.booleanValue()?1:0);", "nn = Long.valueOf(tt.booleanValue()?1L:0L);", "ff = new Float(tt.booleanValue()?1.0f:0.0f);", "dd = new Double(tt.booleanValue()?1.0d:0.0d);" }, { "t = bb.byteValue()!=0;", "b = bb.byteValue();", "u = bb.byteValue();", "s = bb.shortValue();", "// 9 -> '9'\nc = (char)(bb.byteValue() + '0');\n// or to get Unicode value\nc = (char)bb.byteValue();", "i = bb.intValue(); ", "n = bb.longValue();", "f = bb.floatValue();", "d = bb.doubleValue();", "g = bb.toString();", "// best\ntt = (bb.byteValue()!='0')?Boolean.TRUE:Boolean.FALSE;\n// or\ntt = (bb.byteValue()!=0)?Boolean.TRUE:Boolean.FALSE;", null, "uu = bb;", "ss = new Short(bb.shortValue());", "// 9 -> '9'\ncc = new Character((char)(bb.byteValue() + '0'));\n// or to get Unicode value\ncc = new Character((char)bb.shortValue());", "// best JDK 1.5+\nii = Integer.valueOf(bb.byteValue());\n// or JDK 1.4-\nii = new Integer(bb.byteValue());", "// best JDK 1.5+\nnn = Long.valueOf(bb.byteValue());\n// or JDK 1.4-\nnn = new Long(bb.byteValue());", "ff = new Float(bb.byteValue());", "dd = new Double(bb.byteValue());" }, { "t = uu.byteValue()!=0;", "b = uu.byteValue();", "u = uu.byteValue();", "s = (short)(uu.intValue() & 0xff);", "// 9 -> '9'\nc = (char)((uu.intValue() + '0') & 0xff);\n// or to get Unicode value\nc = (char)(uu.intValue() & 0xff);", "i = uu.intValue() & 0xff;", "n = uu.longValue() & 0xff;", "f = (float)(uu.intValue() & 0xff);", "d = (double)(uu.intValue() & 0xff);", "g = uu.toString();", "// best\ntt = (uu.byteValue()!='0')?Boolean.TRUE:Boolean.FALSE;\n// or\ntt = (uu.byteValue()!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = uu;", null, "ss = new Short((short)(uu.byteValue() & 0xff));", "// 9 -> '9'\ncc = new Character((char)((uu.intValue() + '0') & 0xff));\n// or to get Unicode value\ncc = new Character((char)(uu.intValue() & 0xff));", "// best JDK 1.5+\nii = Integer.valueOf(uu.intValue() & 0xff);\n// or JDK 1.4-\nii = new Integer(uu.intValue() & 0xff);", "// best JDK 1.5+\nnn = Long.valueOf(uu.longValue() & 0xff);\n// or JDK 1.4-\nnn = new Long(uu.longValue() & 0xff);", "ff = new Float(uu.intValue() & 0xff);", "dd = new Double(uu.intValue() & 0xff);" }, { "t = ss.shortValue()!=0;", "b = (byte)ss.shortValue();", "u = (byte)ss.shortValue();", "s = ss.shortValue();", "// 9 -> '9'\nc = (char)(ss.shortValue() + '0');\n// or to get Unicode value\nc = (char)ss.shortValue();", "i = ss.intValue(); ", "n = ss.longValue();", "f = ss.floatValue();", "d = ss.doubleValue();", "g = ss.toString();", "// best\ntt = (ss.shortValue()!='0')?Boolean.TRUE:Boolean.FALSE;\n// or\ntt = (ss.shortValue()!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte(ss.byteValue());", "uu = new Byte(ss.byteValue());", null, "// 9 -> '9'\ncc = new Character((char)(ss.shortValue() + '0'));\n// or to get Unicode value\ncc = new Character((char)ss.shortValue());", "// best JDK 1.5+\nii = Integer.valueOf(ss.shortValue());\n// or JDK 1.4-\nii = new Integer(ss.shortValue());", "// best JDK 1.5+\nnn = Long.valueOf(ss.shortValue());\n// or JDK 1.4-\nnn = new Long(ss.shortValue());", "ff = new Float(ss.shortValue());", "dd = new Double(ss.shortValue());" }, { "// to convert '0' or '1'\nt = cc.charValue()!='0';\n// to convert Unicode 0 or 1\nt = cc.charValue()!=0;", "// international\nb = (byte)Character.digit(cc.charValue(), 10 /* radix */);\n// fastest '9' -> 9\nb = (byte)(cc.charValue() - '0');\n// or to get Unicode value\nb = (byte)cc.charValue();", "// international\nu = (byte)Character.digit(cc.charValue(), 10 /* radix */);\n// fastest '9' -> 9\nu = (byte)(cc.charValue() - '0');\n// or to get Unicode value\nu = (byte)cc.charValue();", "// international\ns = (short)Character.digit(cc.charValue(), 10 /* radix */);\n// fastest '9' -> 9\ns = (short)(cc.charValue() - '0');\n// or to get Unicode value\ns = (short)cc.charValue();", "c = cc.charValue();", "// international\ni = Character.digit(cc.charValue(), 10 /* radix */);\n// fastest '9' -> 9\ni = cc.charValue() - '0';\n// or to get Unicode value\ni = cc.charValue(); // does not sign extend.", "// international\nn = Character.digit(cc.charValue(), 10 /* radix */);\n// fastest '9' -> 9\nn = cc.charValue() - '0';\n// or to get Unicode value\nn = cc.charValue(); // does not sign extend.", "f = cc.charValue(); // does not sign extend.", "d = cc.charValue(); // does not sign extend.", "g = cc.toString();", "// for '0' or '1'\ntt = (cc.charValue()!='0')?Boolean.TRUE:Boolean.FALSE;\n// or for Unicode 0 or 1\ntt = (cc.charValue()!=0)?Boolean.TRUE:Boolean.FALSE;", "// international\nbb = new Byte((byte)Character.digit(cc.charValue(), 10 /* radix */));\n// fastest '9' -> 9\nbb = new Byte((byte)(cc.charValue() - '0'));\n// or to get Unicode value\nbb = new Byte((byte)cc.charValue());", "// international\nuu = new Byte((byte)Character.digit(cc.charValue(), 10 /* radix */));\n// fastest '9' -> 9\nuu = new Byte((byte)(cc.charValue() - '0'));\n// or to get Unicode value\nuu = new Byte((byte)cc.charValue());", "// international\nss = new Short((short)Character.digit(cc.charValue(), 10 /* radix */));\n// fastest '9' -> 9\nss = new Short((short)(cc.charValue() - '0'));\n// or to get Unicode value\nss = new Short((short)cc.charValue());", null, "// international, JDK 1.5+\nii = Integer.valueOf(Character.digit(cc.charValue(), 10 /* radix */));\n// fastest '9' -> 9, JDK 1.5+\nii = Integer.valueOf(cc.charValue() - '0');\n// or to get Unicode value JDK 1.5+\nii = Integer.valueOf(cc.charValue());// international, JDK 1.4-\nii = new Integer(Character.digit(cc.charValue(), 10 /* radix */));\n// fastest '9' -> 9, JDK 1.4-\nii = new Integer(cc.charValue() - '0');\n// or to get Unicode value JDK 1.4-\nii = new Integer(cc.charValue());", "// international, JDK 1.5+\nnn = Long.valueOf(Character.digit(cc.charValue(), 10 /* radix */));\n// fastest '9' -> 9, JDK 1.5+\nnn = Long.valueOf(cc.charValue() - '0');\n// or to get Unicode value JDK 1.5+\nnn = Long.valueOf(cc.charValue());// international, JDK 1.4-\nnn = new Long(Character.digit(cc.charValue(), 10 /* radix */));\n// fastest '9' -> 9, JDK 1.4-\nnn = new Long(cc.charValue() - '0');\n// or to get Unicode value JDK 1.4-\nnn = new Long(cc.charValue());", "ff = new Float(cc.charValue()); // does not sign extend.", "dd = new Double(cc.charValue()); // does not sign extend." }, { "t = ii.intValue()!=0;", "b = (byte)ii.intValue();", "u = (byte)ii.intValue();", "s = (short)ii.intValue();", "c = (char)ii.intValue();", "i = ii.intValue();", "n = ii.intValue();", "f = ii.floatValue();", "d = ii.doubleValue();", "g = ii.toString();", "tt = (ii.intValue()!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte(ii.byteValue());", "uu = new Byte(ii.byteValue());", "ss = new Short(ii.shortValue());", "// 9 -> '9'\ncc = new Character((char)(ii.intValue() + '0'));\n// or to get Unicode value\ncc = new Character((char)ii.intValue());", null, "// best JDK 1.5+\nnn = Long.valueOf(ii.intValue());\n// or JDK 1.4-\nnn = new Long(ii.intValue());", "ff = new Float(ii.intValue());", "dd = new Double(ii.intValue());" }, { "t = nn.longValue()!=0;", "b = (byte)nn.intValue();", "u = (byte)nn.intValue();", "s = (short)nn.intValue();", "// 9 -> '9'\nc = (char)(nn.intValue() + '0');\n// or to get Unicode value\nc = (char)nn.intValue();", "i = nn.intValue();", "n = nn.longValue();", "f = nn.floatValue();", "d = nn.doubleValue();", "g = nn.toString();", "tt = (nn.longValue()!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte(nn.byteValue());", "uu = new Byte(nn.byteValue());", "ss = new Short(nn.shortValue());", "// 9 -> '9'\ncc = new Character((char)(nn.intValue() + '0'));\n// or to get Unicode value\ncc = new Character((char)nn.intValue());", "// best JDK 1.5+\nii = Integer.valueOf(nn.intValue());\n// or JDK 1.4-\nii = new Integer(nn.intValue());", null, "ff = new Float(nn.longValue());", "dd = new Double(nn.longValue());" }, { "t = ff.floatValue()!=0;", "b = (byte)ff.intValue();", "u = (byte)ff.intValue();", "s = (short)ff.intValue();", "c = (char)ff.intValue();", "i = ff.intValue();", "n = ff.longValue();", "f = ff.floatValue();", "d = ff.doubleValue();", "// 2 decimal places, rounded, locale-sensitive\njava.text.DecimalFormat df2\n = new java.text.DecimalFormat(\"###,##0.00\");\ng = df2.format(ff.floatValue());\n// or exponential scientific format, locale-sensitive.\njava.text.DecimalFormat de\n = new java.text.DecimalFormat(\"0.000000E00\");\ng = de.format(ff.floatValue()); \n// or best for readability and maintainability, locale-insensitive.\ng = ff.toString();", "tt = (ff.floatValue()!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte(ff.byteValue());", "uu = new Byte(ff.byteValue());", "ss = new Short(ff.shortValue());", "cc = new Character((char)ff.intValue());", "// best JDK 1.5+\nii = Integer.valueOf(ff.intValue());\n// or JDK 1.4-\nii = new Integer(ff.intValue());", "// best JDK 1.5+\nnn = Long.valueOf(ff.longValue());\n// or JDK 1.4-\nnn = new Long(ff.longValue());", null, "dd = new Double(ff.floatValue());" }, { "t = dd.doubleValue()!=0;", "b = (byte)dd.intValue();", "u = (byte)dd.intValue();", "s = (short)dd.intValue();", "c = (char)dd.intValue();", "i = dd.intValue();", "n = dd.longValue();", "f = dd.floatValue();", "d = dd.doubleValue();", "// 2 decimal places, rounded, locale-sensitive\njava.text.DecimalFormat df2\n = new java.text.DecimalFormat(\"###,##0.00\");\ng = df2.format(dd.doubleValue());\n// or exponential scientific format, locale sensitive.\njava.text.DecimalFormat de\n = new java.text.DecimalFormat(\"0.0000000000E00\");\ng = de.format(dd.doubleValue()); \n// or best for readability and maintainability, locale-insensitive\ng = dd.toString();", "tt = (dd.doubleValue()!=0)?Boolean.TRUE:Boolean.FALSE;", "bb = new Byte(dd.byteValue());", "uu = new Byte(dd.byteValue());", "ss = new Short(dd.shortValue());", "cc = new Character((char)dd.intValue());", "// best JDK 1.5+\nii = Integer.valueOf(dd.intValue());\n// or JDK 1.4-\nii = new Integer(dd.intValue());", "// best JDK 1.5+\nnn = Long.valueOf(dd.longValue());\n// or JDK 1.4-\nnn = new Long(dd.longValue());", "ff = new Float(dd.floatValue());", null } };
    }
}
