// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyFile$i$0$0$size;
import org.jruby.RubyFile$i$0$2$initialize19;
import org.jruby.runtime.Block;
import org.jruby.RubyFile$i$0$2$initialize;
import org.jruby.RubyFile$i$0$0$path;
import org.jruby.RubyFile$i$1$0$truncate;
import org.jruby.RubyFile$i$0$0$stat;
import org.jruby.RubyFile$i$2$0$lchown;
import org.jruby.RubyFile$i$0$0$inspect;
import org.jruby.RubyFile$i$0$0$mtime;
import org.jruby.RubyFile$i$1$0$lchmod;
import org.jruby.RubyFile$i$0$0$lstat;
import org.jruby.RubyFile$i$0$0$atime;
import org.jruby.RubyFile$i$0$0$ctime;
import org.jruby.RubyFile$i$2$0$chown;
import org.jruby.RubyFile$i$0$0$close;
import org.jruby.RubyFile$i$1$0$flock;
import org.jruby.RubyFile$i$1$0$chmod;
import org.jruby.RubyFile$s$0$1$realpath;
import org.jruby.RubyFile$s$0$1$realdirpath;
import org.jruby.RubyFile$s$1$0$path;
import org.jruby.RubyFile$s$2$0$truncate19;
import org.jruby.RubyFile$s$0$1$absolute_path;
import org.jruby.RubyFile$s$0$1$expand_path19;
import org.jruby.RubyFile$s$2$0$truncate;
import org.jruby.RubyFile$s$0$1$expand_path;
import org.jruby.CompatVersion;
import org.jruby.RubyFile$s$1$0$ftype;
import org.jruby.RubyFile$s$0$1$fnmatch;
import org.jruby.RubyFile$s$1$0$dirname;
import org.jruby.RubyString;
import org.jruby.RubyFile$s$0$0$join;
import org.jruby.RubyFile$s$1$0$stat;
import org.jruby.RubyFile$s$0$1$basename;
import org.jruby.RubyFile$s$0$0$lchown;
import org.jruby.RubyFile$s$2$0$rename;
import org.jruby.RubyFile$s$0$0$utime;
import org.jruby.RubyFile$s$0$0$unlink;
import org.jruby.RubyFile$s$1$0$mtime;
import org.jruby.RubyFile$s$0$1$umask;
import org.jruby.RubyFile$s$0$0$lchmod;
import org.jruby.RubyArray;
import org.jruby.RubyFile$s$1$0$split;
import org.jruby.RubyFile$s$1$0$readlink;
import org.jruby.RubyFile$s$2$0$link;
import org.jruby.RubyFile$s$1$0$lstat;
import org.jruby.RubyFile$s$1$0$extname;
import org.jruby.RubyFile$s$1$0$atime;
import org.jruby.RubyFile$s$1$0$ctime;
import org.jruby.RubyFile$s$0$0$chown;
import org.jruby.RubyFile$s$2$0$symlink;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyFile;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyFile$s$0$0$chmod;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyFile$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyFile$s$0$0$chmod(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "chmod", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "chmod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("chmod", javaMethod);
        javaMethod = new RubyFile$s$2$0$symlink(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "symlink", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "symlink", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("symlink", javaMethod);
        javaMethod = new RubyFile$s$0$0$chown(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "chown", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "chown", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("chown", javaMethod);
        javaMethod = new RubyFile$s$1$0$ctime(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "ctime", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "ctime", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("ctime", javaMethod);
        javaMethod = new RubyFile$s$1$0$atime(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "atime", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "atime", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("atime", javaMethod);
        javaMethod = new RubyFile$s$1$0$extname(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "extname", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "extname", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("extname", javaMethod);
        javaMethod = new RubyFile$s$1$0$lstat(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "lstat", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "lstat", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("lstat", javaMethod);
        javaMethod = new RubyFile$s$2$0$link(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "link", true, CallConfiguration.FrameBacktraceScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "link", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("link", javaMethod);
        javaMethod = new RubyFile$s$1$0$readlink(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "readlink", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "readlink", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("readlink", javaMethod);
        javaMethod = new RubyFile$s$1$0$split(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "split", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "split", RubyArray.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("split", javaMethod);
        javaMethod = new RubyFile$s$0$0$lchmod(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "lchmod", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "lchmod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("lchmod", javaMethod);
        javaMethod = new RubyFile$s$0$1$umask(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "umask", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "umask", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("umask", javaMethod);
        javaMethod = new RubyFile$s$1$0$mtime(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "mtime", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "mtime", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("mtime", javaMethod);
        javaMethod = new RubyFile$s$0$0$unlink(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "unlink", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "unlink", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("unlink", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("delete", javaMethod);
        javaMethod = new RubyFile$s$0$0$utime(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "utime", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "utime", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("utime", javaMethod);
        javaMethod = new RubyFile$s$2$0$rename(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "rename", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "rename", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("rename", javaMethod);
        javaMethod = new RubyFile$s$0$0$lchown(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "lchown", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "lchown", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("lchown", javaMethod);
        javaMethod = new RubyFile$s$0$1$basename(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "basename", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "basename", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("basename", javaMethod);
        javaMethod = new RubyFile$s$1$0$stat(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "stat", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "stat", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("stat", javaMethod);
        javaMethod = new RubyFile$s$0$0$join(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "join", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "join", RubyString.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("join", javaMethod);
        javaMethod = new RubyFile$s$1$0$dirname(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "dirname", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "dirname", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("dirname", javaMethod);
        javaMethod = new RubyFile$s$0$1$fnmatch(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "fnmatch", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "fnmatch", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        singletonClass.addMethodAtBootTimeOnly("fnmatch", javaMethod);
        singletonClass.addMethodAtBootTimeOnly("fnmatch?", javaMethod);
        javaMethod = new RubyFile$s$1$0$ftype(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "ftype", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "ftype", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("ftype", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFile.chmod", "chmod");
        runtime.addBoundMethod("org.jruby.RubyFile.symlink", "symlink");
        runtime.addBoundMethod("org.jruby.RubyFile.chown", "chown");
        runtime.addBoundMethod("org.jruby.RubyFile.ctime", "ctime");
        runtime.addBoundMethod("org.jruby.RubyFile.atime", "atime");
        runtime.addBoundMethod("org.jruby.RubyFile.extname", "extname");
        runtime.addBoundMethod("org.jruby.RubyFile.lstat", "lstat");
        runtime.addBoundMethod("org.jruby.RubyFile.link", "link");
        runtime.addBoundMethod("org.jruby.RubyFile.readlink", "readlink");
        runtime.addBoundMethod("org.jruby.RubyFile.split", "split");
        runtime.addBoundMethod("org.jruby.RubyFile.lchmod", "lchmod");
        runtime.addBoundMethod("org.jruby.RubyFile.umask", "umask");
        runtime.addBoundMethod("org.jruby.RubyFile.mtime", "mtime");
        runtime.addBoundMethod("org.jruby.RubyFile.unlink", "unlink");
        runtime.addBoundMethod("org.jruby.RubyFile.utime", "utime");
        runtime.addBoundMethod("org.jruby.RubyFile.rename", "rename");
        runtime.addBoundMethod("org.jruby.RubyFile.lchown", "lchown");
        runtime.addBoundMethod("org.jruby.RubyFile.basename", "basename");
        runtime.addBoundMethod("org.jruby.RubyFile.stat", "stat");
        runtime.addBoundMethod("org.jruby.RubyFile.join", "join");
        runtime.addBoundMethod("org.jruby.RubyFile.dirname", "dirname");
        runtime.addBoundMethod("org.jruby.RubyFile.fnmatch", "fnmatch");
        runtime.addBoundMethod("org.jruby.RubyFile.ftype", "ftype");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFile$s$0$1$expand_path(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "expand_path", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "expand_path", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("expand_path", javaMethod);
            javaMethod = new RubyFile$s$2$0$truncate(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "truncate", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "truncate", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("truncate", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFile.expand_path", "expand_path");
            runtime.addBoundMethod("org.jruby.RubyFile.truncate", "truncate");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFile$s$0$1$expand_path19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "expand_path19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "expand_path19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("expand_path", javaMethod);
            javaMethod = new RubyFile$s$0$1$absolute_path(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "absolute_path", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "absolute_path", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("absolute_path", javaMethod);
            javaMethod = new RubyFile$s$2$0$truncate19(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "truncate19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "truncate19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("truncate", javaMethod);
            javaMethod = new RubyFile$s$1$0$path(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "path", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "path", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("path", javaMethod);
            javaMethod = new RubyFile$s$0$1$realdirpath(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "realdirpath", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "realdirpath", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("realdirpath", javaMethod);
            javaMethod = new RubyFile$s$0$1$realpath(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "realpath", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "realpath", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            singletonClass.addMethodAtBootTimeOnly("realpath", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFile.expand_path19", "expand_path");
            runtime.addBoundMethod("org.jruby.RubyFile.absolute_path", "absolute_path");
            runtime.addBoundMethod("org.jruby.RubyFile.truncate19", "truncate");
            runtime.addBoundMethod("org.jruby.RubyFile.path", "path");
            runtime.addBoundMethod("org.jruby.RubyFile.realdirpath", "realdirpath");
            runtime.addBoundMethod("org.jruby.RubyFile.realpath", "realpath");
        }
        javaMethod = new RubyFile$i$1$0$chmod(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "chmod", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "chmod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("chmod", javaMethod);
        javaMethod = new RubyFile$i$1$0$flock(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "flock", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "flock", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("flock", javaMethod);
        javaMethod = new RubyFile$i$0$0$close(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "close", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("close", javaMethod);
        javaMethod = new RubyFile$i$2$0$chown(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "chown", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "chown", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("chown", javaMethod);
        javaMethod = new RubyFile$i$0$0$ctime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "ctime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "ctime", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("ctime", javaMethod);
        javaMethod = new RubyFile$i$0$0$atime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "atime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "atime", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("atime", javaMethod);
        javaMethod = new RubyFile$i$0$0$lstat(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "lstat", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "lstat", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("lstat", javaMethod);
        javaMethod = new RubyFile$i$1$0$lchmod(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "lchmod", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "lchmod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("lchmod", javaMethod);
        javaMethod = new RubyFile$i$0$0$mtime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "mtime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "mtime", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("mtime", javaMethod);
        javaMethod = new RubyFile$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "inspect", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyFile$i$2$0$lchown(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "lchown", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "lchown", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("lchown", javaMethod);
        javaMethod = new RubyFile$i$0$0$stat(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "stat", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "stat", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("stat", javaMethod);
        javaMethod = new RubyFile$i$1$0$truncate(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "truncate", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "truncate", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("truncate", javaMethod);
        javaMethod = new RubyFile$i$0$0$path(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "path", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFile.class, "path", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("path", javaMethod);
        cls.addMethodAtBootTimeOnly("to_path", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFile.chmod", "chmod");
        runtime.addBoundMethod("org.jruby.RubyFile.flock", "flock");
        runtime.addBoundMethod("org.jruby.RubyFile.close", "close");
        runtime.addBoundMethod("org.jruby.RubyFile.chown", "chown");
        runtime.addBoundMethod("org.jruby.RubyFile.ctime", "ctime");
        runtime.addBoundMethod("org.jruby.RubyFile.atime", "atime");
        runtime.addBoundMethod("org.jruby.RubyFile.lstat", "lstat");
        runtime.addBoundMethod("org.jruby.RubyFile.lchmod", "lchmod");
        runtime.addBoundMethod("org.jruby.RubyFile.mtime", "mtime");
        runtime.addBoundMethod("org.jruby.RubyFile.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyFile.lchown", "lchown");
        runtime.addBoundMethod("org.jruby.RubyFile.stat", "stat");
        runtime.addBoundMethod("org.jruby.RubyFile.truncate", "truncate");
        runtime.addBoundMethod("org.jruby.RubyFile.path", "path");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFile$i$0$2$initialize(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "initialize", IRubyObject.class, new Class[] { IRubyObject[].class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFile.initialize", "initialize");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFile$i$0$2$initialize19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "initialize19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "initialize19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            javaMethod = new RubyFile$i$0$0$size(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "size", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyFile.class, "size", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("size", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFile.initialize19", "initialize");
            runtime.addBoundMethod("org.jruby.RubyFile.size", "size");
        }
    }
}
