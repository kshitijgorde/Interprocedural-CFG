// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyFixnum;
import org.jruby.RubyProcess$s$0$0$spawn;
import org.jruby.RubyProcess$s$0$0$fork19;
import org.jruby.RubyProcess$s$0$0$fork;
import org.jruby.CompatVersion;
import org.jruby.RubyProcess$s$1$0$getrlimit;
import org.jruby.RubyProcess$s$0$0$getpgrp;
import org.jruby.RubyProcess$s$0$0$setsid;
import org.jruby.RubyProcess$s$0$0$wait;
import org.jruby.RubyProcess$s$1$0$getpgid;
import org.jruby.RubyProcess$s$0$0$gid;
import org.jruby.RubyProcess$s$0$0$setrlimit;
import org.jruby.RubyProcess$s$3$0$setpriority;
import org.jruby.RubyProcess$s$1$0$egid_set;
import org.jruby.RubyProcess$s$1$0$euid_set;
import org.jruby.RubyProcess$s$0$0$groups;
import org.jruby.RubyProcess$s$0$0$euid;
import org.jruby.runtime.Block;
import org.jruby.RubyProcess$s$0$0$times;
import org.jruby.RubyProcess$s$0$0$wait2;
import org.jruby.RubyProcess$s$0$0$uid;
import org.jruby.RubyProcess$s$0$1$exit;
import org.jruby.RubyProcess$s$0$0$ppid;
import org.jruby.RubyProcess$s$1$0$uid_set;
import org.jruby.RubyProcess$s$2$0$initgroups;
import org.jruby.RubyProcess$s$0$1$exit_bang;
import org.jruby.RubyProcess$s$0$1$abort;
import org.jruby.RubyProcess$s$1$0$groups_set;
import org.jruby.RubyProcess$s$0$0$maxgroups;
import org.jruby.RubyProcess$s$0$0$setpgrp;
import org.jruby.RubyProcess$s$2$0$setpgid;
import org.jruby.RubyProcess$s$2$0$getpriority;
import org.jruby.RubyProcess$s$0$0$waitpid;
import org.jruby.RubyProcess$s$1$0$detach;
import org.jruby.RubyProcess$s$1$0$maxgroups_set;
import org.jruby.RubyProcess$s$0$0$egid;
import org.jruby.RubyProcess$s$0$0$pid;
import org.jruby.RubyProcess$s$1$0$gid_set;
import org.jruby.RubyProcess$s$0$0$kill;
import org.jruby.RubyProcess$s$0$0$waitpid2;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyProcess;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyProcess$s$0$0$waitall;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyProcess$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyProcess$s$0$0$waitall(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "waitall", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "waitall", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("waitall", javaMethod);
        DynamicMethod moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("waitall", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$waitpid2(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "waitpid2", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "waitpid2", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("waitpid2", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("waitpid2", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$kill(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "kill", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "kill", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("kill", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("kill", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$gid_set(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "gid_set", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "gid_set", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("gid=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("gid=", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$pid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "pid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "pid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("pid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("pid", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$egid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "egid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "egid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("egid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("egid", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$maxgroups_set(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "maxgroups_set", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "maxgroups_set", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("maxgroups=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("maxgroups=", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$detach(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "detach", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "detach", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("detach", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("detach", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$waitpid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "waitpid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "waitpid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("waitpid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("waitpid", moduleMethod);
        javaMethod = new RubyProcess$s$2$0$getpriority(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 2, "getpriority", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "getpriority", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("getpriority", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("getpriority", moduleMethod);
        javaMethod = new RubyProcess$s$2$0$setpgid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 2, "setpgid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "setpgid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("setpgid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("setpgid", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$setpgrp(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "setpgrp", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "setpgrp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("setpgrp", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("setpgrp", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$maxgroups(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "maxgroups", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "maxgroups", IRubyObject.class, new Class[] { IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("maxgroups", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("maxgroups", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$groups_set(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "groups_set", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "groups_set", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("groups=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("groups=", moduleMethod);
        javaMethod = new RubyProcess$s$0$1$abort(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "abort", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "abort", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("abort", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("abort", moduleMethod);
        javaMethod = new RubyProcess$s$0$1$exit_bang(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "exit_bang", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "exit_bang", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("exit!", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("exit!", moduleMethod);
        javaMethod = new RubyProcess$s$2$0$initgroups(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 2, "initgroups", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "initgroups", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("initgroups", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("initgroups", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$uid_set(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "uid_set", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "uid_set", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("uid=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("uid=", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$ppid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "ppid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "ppid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("ppid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("ppid", moduleMethod);
        javaMethod = new RubyProcess$s$0$1$exit(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "exit", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "exit", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("exit", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("exit", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$uid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "uid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "uid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("uid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("uid", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$wait2(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "wait2", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "wait2", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("wait2", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("wait2", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$times(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "times", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "times", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("times", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("times", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$euid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "euid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "euid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("euid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("euid", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$groups(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "groups", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "groups", IRubyObject.class, new Class[] { IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("groups", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("groups", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$euid_set(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "euid_set", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "euid_set", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("euid=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("euid=", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$egid_set(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "egid_set", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "egid_set", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("egid=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("egid=", moduleMethod);
        javaMethod = new RubyProcess$s$3$0$setpriority(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 3, "setpriority", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "setpriority", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("setpriority", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("setpriority", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$setrlimit(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "setrlimit", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "setrlimit", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("setrlimit", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("setrlimit", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$gid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "gid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "gid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("gid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("gid", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$getpgid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "getpgid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "getpgid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("getpgid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("getpgid", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$wait(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "wait", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "wait", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
        cls.addMethodAtBootTimeOnly("wait", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("wait", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$setsid(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "setsid", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "setsid", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("setsid", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("setsid", moduleMethod);
        javaMethod = new RubyProcess$s$0$0$getpgrp(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "getpgrp", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "getpgrp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("getpgrp", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("getpgrp", moduleMethod);
        javaMethod = new RubyProcess$s$1$0$getrlimit(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "getrlimit", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyProcess.class, "getrlimit", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("getrlimit", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("getrlimit", moduleMethod);
        runtime.addBoundMethod("org.jruby.RubyProcess.waitall", "waitall");
        runtime.addBoundMethod("org.jruby.RubyProcess.waitpid2", "waitpid2");
        runtime.addBoundMethod("org.jruby.RubyProcess.kill", "kill");
        runtime.addBoundMethod("org.jruby.RubyProcess.gid_set", "gid=");
        runtime.addBoundMethod("org.jruby.RubyProcess.pid", "pid");
        runtime.addBoundMethod("org.jruby.RubyProcess.egid", "egid");
        runtime.addBoundMethod("org.jruby.RubyProcess.maxgroups_set", "maxgroups=");
        runtime.addBoundMethod("org.jruby.RubyProcess.detach", "detach");
        runtime.addBoundMethod("org.jruby.RubyProcess.waitpid", "waitpid");
        runtime.addBoundMethod("org.jruby.RubyProcess.getpriority", "getpriority");
        runtime.addBoundMethod("org.jruby.RubyProcess.setpgid", "setpgid");
        runtime.addBoundMethod("org.jruby.RubyProcess.setpgrp", "setpgrp");
        runtime.addBoundMethod("org.jruby.RubyProcess.maxgroups", "maxgroups");
        runtime.addBoundMethod("org.jruby.RubyProcess.groups_set", "groups=");
        runtime.addBoundMethod("org.jruby.RubyProcess.abort", "abort");
        runtime.addBoundMethod("org.jruby.RubyProcess.exit_bang", "exit!");
        runtime.addBoundMethod("org.jruby.RubyProcess.initgroups", "initgroups");
        runtime.addBoundMethod("org.jruby.RubyProcess.uid_set", "uid=");
        runtime.addBoundMethod("org.jruby.RubyProcess.ppid", "ppid");
        runtime.addBoundMethod("org.jruby.RubyProcess.exit", "exit");
        runtime.addBoundMethod("org.jruby.RubyProcess.uid", "uid");
        runtime.addBoundMethod("org.jruby.RubyProcess.wait2", "wait2");
        runtime.addBoundMethod("org.jruby.RubyProcess.times", "times");
        runtime.addBoundMethod("org.jruby.RubyProcess.euid", "euid");
        runtime.addBoundMethod("org.jruby.RubyProcess.groups", "groups");
        runtime.addBoundMethod("org.jruby.RubyProcess.euid_set", "euid=");
        runtime.addBoundMethod("org.jruby.RubyProcess.egid_set", "egid=");
        runtime.addBoundMethod("org.jruby.RubyProcess.setpriority", "setpriority");
        runtime.addBoundMethod("org.jruby.RubyProcess.setrlimit", "setrlimit");
        runtime.addBoundMethod("org.jruby.RubyProcess.gid", "gid");
        runtime.addBoundMethod("org.jruby.RubyProcess.getpgid", "getpgid");
        runtime.addBoundMethod("org.jruby.RubyProcess.wait", "wait");
        runtime.addBoundMethod("org.jruby.RubyProcess.setsid", "setsid");
        runtime.addBoundMethod("org.jruby.RubyProcess.getpgrp", "getpgrp");
        runtime.addBoundMethod("org.jruby.RubyProcess.getrlimit", "getrlimit");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyProcess$s$0$0$fork(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 0, "fork", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyProcess.class, "fork", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("fork", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("fork", moduleMethod);
            runtime.addBoundMethod("org.jruby.RubyProcess.fork", "fork");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyProcess$s$0$0$fork19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 0, "fork19", true, CallConfiguration.FrameNoneScopeNone, true);
            javaMethod.setNativeCall(RubyProcess.class, "fork19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("fork", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("fork", moduleMethod);
            javaMethod = new RubyProcess$s$0$0$spawn(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "spawn", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyProcess.class, "spawn", RubyFixnum.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class }, true);
            cls.addMethodAtBootTimeOnly("spawn", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("spawn", moduleMethod);
            runtime.addBoundMethod("org.jruby.RubyProcess.fork19", "fork");
            runtime.addBoundMethod("org.jruby.RubyProcess.spawn", "spawn");
        }
    }
}
