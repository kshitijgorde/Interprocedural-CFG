import java.util.Date;
import java.awt.image.ImageObserver;
import java.awt.Polygon;
import java.awt.Color;
import java.applet.AudioClip;
import java.awt.Graphics;
import java.awt.Image;
import java.applet.Applet;

// 
// Decompiled by Procyon v0.5.30
// 

public class piano extends Applet implements Runnable
{
    static int[] xx;
    static int[] yy;
    static int[] wktab;
    static int[] bktab;
    int n;
    static int rsize;
    static int f;
    Thread animator;
    Image ii;
    Image ii1;
    Graphics gg;
    Graphics gg1;
    Graphics gg2;
    AudioClip clip1;
    static int[][] ttab;
    static boolean[] key;
    
    public void init() {
        this.ii = this.createImage(640, 320);
        this.ii1 = this.createImage(256, piano.rsize);
        this.gg1 = this.ii1.getGraphics();
        this.gg = this.ii.getGraphics();
        this.gg2 = this.gg.create(192, 16, 256, 96);
        this.gg1.setColor(new Color(255, 255, 255));
        this.gg1.fillRect(0, 0, 256, piano.rsize);
        this.gg1.setColor(Color.black);
        for (int i = 0; i < piano.ttab.length; ++i) {
            for (int j = 0; j < piano.ttab[i].length; ++j) {
                this.gg1.drawLine(piano.ttab[i][j] * 3 + 24, piano.rsize - 1 - i * 4, piano.ttab[i][j] * 3 + 24, piano.rsize - 4 - i * 4);
            }
        }
        this.gg.setColor(new Color(192, 192, 192));
        this.gg.fillRect(0, 0, 640, 320);
    }
    
    public void draw3(final Graphics graphics, int n, int n2, final int n3, int n4, int n5, final int n6) {
        final int n7 = 320;
        final int n8 = 20;
        n = (n * (256 - n3) + n7 * n3) / 256;
        n2 = (n2 * (256 - n3) + n8 * n3) / 256;
        n4 = (n4 * (256 - n6) + n7 * n6) / 256;
        n5 = (n5 * (256 - n6) + n8 * n6) / 256;
        graphics.drawLine(n, n2, n4, n5);
    }
    
    public void add3(final Polygon polygon, int n, int n2, final int n3) {
        final int n4 = 320;
        final int n5 = 20;
        n = (n * (256 - n3) + n4 * n3) / 256;
        n2 = (n2 * (256 - n3) + n5 * n3) / 256;
        polygon.addPoint(n, n2);
    }
    
    public void drawkey(final Graphics graphics, final int n) {
        final int n2 = 6;
        final int n3 = n2 * 2;
        final int n4 = 25;
        final int n5 = piano.key[piano.wktab[(n + 70) % 7] + ((n + 70) / 7 - 10) * 12 + 36] ? 166 : 160;
        final Polygon polygon = new Polygon();
        this.add3(polygon, 320 + n * n3 - n2, n5, 0);
        this.add3(polygon, 320 + n * n3 + n2, n5, 0);
        this.add3(polygon, 320 + n * n3 + n2, n5, n4);
        this.add3(polygon, 320 + n * n3 - n2, n5, n4);
        this.add3(polygon, 320 + n * n3 - n2, n5, 0);
        graphics.setColor(Color.white);
        graphics.fillPolygon(polygon);
        graphics.setColor(Color.black);
        graphics.drawPolygon(polygon);
        final Polygon polygon2 = new Polygon();
        this.add3(polygon2, 320 + n * n3 - n2, n5, 0);
        this.add3(polygon2, 320 + n * n3 + n2, n5, 0);
        this.add3(polygon2, 320 + n * n3 + n2, 168, 0);
        this.add3(polygon2, 320 + n * n3 - n2, 168, 0);
        this.add3(polygon2, 320 + n * n3 - n2, n5, 0);
        graphics.setColor(new Color(224, 224, 224));
        graphics.fillPolygon(polygon2);
        graphics.setColor(Color.black);
        graphics.drawPolygon(polygon2);
    }
    
    public void drawbkey(final Graphics graphics, final int n) {
        final int n2 = 6;
        final int n3 = 3;
        final int n4 = n2 * 2;
        final int n5 = 25;
        int n6 = piano.bktab[(n + 70) % 7] + ((n + 70) / 7 - 10) * 12;
        if (n6 + 36 < 0) {
            n6 = -36;
        }
        final int n7 = piano.key[n6 + 36] ? 158 : 154;
        if (piano.bktab[(n + 70) % 7] >= 0) {
            if (n < 0) {
                final Polygon polygon = new Polygon();
                this.add3(polygon, 320 + n * n4 + n4 - n3, n7, n5 / 2);
                this.add3(polygon, 320 + n * n4 + n4 - n3, 160, n5 / 2);
                this.add3(polygon, 320 + n * n4 + n4 - n3, 160, n5);
                this.add3(polygon, 320 + n * n4 + n4 - n3, n7, n5);
                this.add3(polygon, 320 + n * n4 + n4 - n3, n7, n5 / 2);
                graphics.setColor(new Color(64, 64, 64));
                graphics.fillPolygon(polygon);
                graphics.setColor(Color.black);
                graphics.drawPolygon(polygon);
            }
            if (n > 0) {
                final Polygon polygon2 = new Polygon();
                this.add3(polygon2, 320 + n * n4 + n3, n7, n5 / 2);
                this.add3(polygon2, 320 + n * n4 + n3, 160, n5 / 2);
                this.add3(polygon2, 320 + n * n4 + n3, 160, n5);
                this.add3(polygon2, 320 + n * n4 + n3, n7, n5);
                this.add3(polygon2, 320 + n * n4 + n3, n7, n5 / 2);
                graphics.setColor(new Color(64, 64, 64));
                graphics.fillPolygon(polygon2);
                graphics.setColor(Color.black);
                graphics.drawPolygon(polygon2);
            }
            final Polygon polygon3 = new Polygon();
            this.add3(polygon3, 320 + n * n4 + n3, n7, n5 / 2);
            this.add3(polygon3, 320 + n * n4 + n4 - n3, n7, n5 / 2);
            this.add3(polygon3, 320 + n * n4 + n4 - n3, n7, n5);
            this.add3(polygon3, 320 + n * n4 + n3, n7, n5);
            this.add3(polygon3, 320 + n * n4 + n3, n7, n5 / 2);
            graphics.setColor(new Color(128, 128, 128));
            graphics.fillPolygon(polygon3);
            graphics.setColor(Color.black);
            graphics.drawPolygon(polygon3);
            final Polygon polygon4 = new Polygon();
            this.add3(polygon4, 320 + n * n4 + n3, n7, n5 / 2);
            this.add3(polygon4, 320 + n * n4 + n4 - n3, n7, n5 / 2);
            this.add3(polygon4, 320 + n * n4 + n4 - n3, 160, n5 / 2);
            this.add3(polygon4, 320 + n * n4 + n3, 160, n5 / 2);
            this.add3(polygon4, 320 + n * n4 + n3, n7, n5 / 2);
            graphics.setColor(new Color(64, 64, 64));
            graphics.fillPolygon(polygon4);
            graphics.setColor(Color.black);
            graphics.drawPolygon(polygon4);
        }
    }
    
    public void update(final Graphics graphics) {
        this.gg.setColor(new Color(192, 192, 192));
        this.gg.fillRect(0, 140, 640, 40);
        this.gg.setColor(Color.black);
        for (int i = 23; i > 0; --i) {
            this.drawkey(this.gg, i);
        }
        for (int j = -21; j < 0; ++j) {
            this.drawkey(this.gg, j);
        }
        this.drawkey(this.gg, 0);
        for (int k = 23; k > 0; --k) {
            this.drawbkey(this.gg, k);
        }
        for (int l = -21; l < 0; ++l) {
            this.drawbkey(this.gg, l);
        }
        this.drawbkey(this.gg, 0);
        this.gg2.drawImage(this.ii1, 0, 96 - piano.rsize + piano.f * 4 + 2, null);
        this.gg.setColor(Color.black);
        this.gg.drawLine(32, 8, 608, 8);
        this.gg.drawLine(32, 312, 608, 312);
        this.gg.drawLine(32, 8, 32, 312);
        this.gg.drawLine(608, 8, 608, 312);
        this.gg.drawLine(191, 15, 449, 15);
        this.gg.drawLine(191, 113, 449, 113);
        this.gg.drawLine(191, 15, 191, 113);
        this.gg.drawLine(449, 15, 449, 113);
        this.gg.drawLine(189, 13, 451, 13);
        this.gg.drawLine(189, 115, 451, 115);
        this.gg.drawLine(189, 13, 189, 115);
        this.gg.drawLine(451, 13, 451, 115);
        graphics.drawImage(this.ii, 0, 0, null);
    }
    
    public void run() {
        Thread.currentThread().setPriority(4);
        boolean b = false;
        final long time = new Date().getTime();
        int n = 2;
        while (this.animator != null) {
            ++this.n;
            if (this.n >= piano.ttab.length) {
                --this.n;
            }
            for (int i = 0; i < 128; ++i) {
                piano.key[i] = false;
            }
            for (int j = 0; j < piano.ttab[this.n].length; ++j) {
                piano.key[piano.ttab[this.n][j]] = true;
            }
            this.repaint(0, 0, 640, 320);
            n += 10;
            ++piano.f;
            do {
                try {
                    Thread.sleep(5L);
                }
                catch (InterruptedException ex) {
                    b = true;
                    break;
                }
            } while (new Date().getTime() - time <= n * 145125 / 10000);
            if (b) {
                return;
            }
        }
    }
    
    public void start() {
        this.n = 0;
        piano.f = 0;
        this.clip1 = this.getAudioClip(this.getCodeBase(), "test.au");
        if (this.clip1 != null) {
            this.clip1.play();
        }
        if (this.animator == null) {
            (this.animator = new Thread(this)).start();
        }
    }
    
    public void stop() {
        if (this.animator != null) {
            this.animator.stop();
            this.animator = null;
        }
        this.clip1.stop();
    }
    
    static {
        piano.xx = new int[1024];
        piano.yy = new int[1024];
        piano.wktab = new int[] { 0, 2, 4, 5, 7, 9, 11 };
        piano.bktab = new int[] { 1, 3, -1, 6, 8, 10, -1 };
        piano.rsize = 4096;
        piano.ttab = new int[][] { { 15, 27 }, new int[0], { 20, 32 }, { 44 }, { 27, 32, 36, 39, 51 }, { 44 }, { 27, 32, 36, 48 }, { 39, 51 }, { 21, 33 }, { 43 }, { 22, 34, 39, 51 }, { 43 }, { 27, 31, 37, 46 }, { 39, 51 }, { 27, 31, 37, 39, 51 }, { 39, 51 }, { 15, 27, 39, 51 }, { 39, 51 }, { 20, 32 }, { 44 }, { 27, 32, 36, 39, 51 }, { 44 }, { 27, 32, 36, 48 }, { 39, 51 }, { 21, 33 }, { 43 }, { 34, 22, 39, 51 }, { 43 }, { 27, 31, 37, 46 }, { 39, 51 }, { 27, 31, 37, 39, 51 }, { 39, 51 }, { 15, 27 }, { 39, 51 }, { 16, 28 }, { 44 }, { 47 }, { 40, 52 }, { 15, 27 }, { 39, 51 }, { 15, 27 }, { 39, 51 }, { 16, 28 }, { 44 }, { 47 }, { 52 }, { 15, 27 }, { 39, 51 }, new int[0], { 39, 51 }, new int[0], { 8 }, { 11 }, { 20 }, { 8 }, { 20 }, { 23 }, { 32 }, { 20 }, { 32 }, { 35 }, { 44 }, { 32 }, { 44 }, { 47 }, { 56 }, { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, { 56, 68 }, { 39, 44, 48, 56, 68 }, { 63 }, { 39, 44, 48, 65 }, { 60 }, { 39, 44, 48, 63 }, { 56, 65 }, { 39, 44, 48 }, { 52, 56 }, { 40, 44, 47, 52, 56 }, { 58 }, { 40, 44, 47, 52, 59 }, { 56 }, { 39, 44, 48, 58 }, { 51, 60 }, { 39, 44, 48 }, { 56 }, { 39, 44, 48, 51, 60 }, { 56 }, { 39, 43, 46, 51, 58 }, new int[0], { 44, 48, 51, 56 }, new int[0], new int[0], { 44, 56 }, { 26, 29, 32, 35, 44, 56 }, new int[0], { 26, 41, 32, 35, 44, 56 }, new int[0], { 26, 29, 32, 35, 44, 56 }, new int[0], { 26, 29, 32, 35, 44, 56 }, { 44, 56 }, { 27, 32, 36, 44, 56 }, { 51 }, { 27, 32, 36, 53 }, { 48 }, { 27, 32, 36, 51 }, { 44, 53 }, { 27, 32, 36 }, { 40, 44 }, { 28, 32, 35, 40, 44 }, { 46 }, { 28, 32, 35, 40, 47 }, { 44 }, { 27, 32, 36, 46 }, { 39, 48 }, { 27, 32, 36 }, { 44 }, { 27, 32, 36, 39, 48 }, { 44 }, { 27, 31, 34, 39, 46 }, new int[0], { 32, 36, 39, 44 }, new int[0], { 15, 27 }, new int[0], { 20, 32 }, { 44 }, { 27, 32, 36, 39, 51 }, { 44 }, { 27, 32, 36, 48 }, { 39, 51 }, { 21, 33 }, { 43 }, { 22, 34, 39, 51 }, { 43 }, { 27, 31, 37, 46 }, { 39, 51 }, { 27, 31, 37, 39, 51 }, { 39, 51 }, { 15, 27, 39, 51 }, { 39, 51 }, { 20, 32 }, { 44 }, { 27, 32, 36, 39, 51 }, { 44 }, { 27, 32, 36, 48 }, { 39, 51 }, { 21, 33 }, { 43 }, { 34, 22, 39, 51 }, { 43 }, { 27, 31, 37, 46 }, { 39, 51 }, { 27, 31, 37, 39, 51 }, { 39, 51 }, { 15, 27 }, { 39, 51 }, { 16, 28 }, { 44 }, { 47 }, { 40, 52 }, { 15, 27 }, { 39, 51 }, { 15, 27 }, { 39, 51 }, { 16, 28 }, { 44 }, { 47 }, { 52 }, { 15, 27 }, { 39, 51 }, new int[0], { 39, 51 }, new int[0], { 8 }, { 11 }, { 20 }, { 8 }, { 20 }, { 23 }, { 32 }, { 20 }, { 32 }, { 35 }, { 44 }, { 32 }, { 44 }, { 47 }, { 56 }, { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, { 56, 68 }, { 39, 44, 48, 56, 68 }, { 63 }, { 39, 44, 48, 65 }, { 60 }, { 39, 44, 48, 63 }, { 56, 65 }, { 39, 44, 48 }, { 52, 56 }, { 40, 44, 47, 52, 56 }, { 58 }, { 40, 44, 47, 52, 59 }, { 56 }, { 39, 44, 48, 58 }, { 51, 60 }, { 39, 44, 48 }, { 56 }, { 39, 44, 48, 51, 60 }, { 56 }, { 39, 43, 46, 51, 58 }, new int[0], { 44, 48, 51, 56 }, new int[0], new int[0], { 44, 56 }, { 26, 29, 32, 35, 44, 56 }, new int[0], { 26, 41, 32, 35, 44, 56 }, new int[0], { 26, 29, 32, 35, 44, 56 }, new int[0], { 26, 29, 32, 35, 44, 56 }, { 44, 56 }, { 27, 32, 36, 44, 56 }, { 51 }, { 27, 32, 36, 53 }, { 48 }, { 27, 32, 36, 51 }, { 44, 53 }, { 27, 32, 36 }, { 40, 44 }, { 28, 32, 35, 40, 44 }, { 46 }, { 28, 32, 35, 40, 47 }, { 44 }, { 27, 32, 36, 46 }, { 39, 48 }, { 27, 32, 36 }, { 44 }, { 27, 32, 36, 39, 48 }, { 44 }, { 27, 31, 34, 39, 46 }, new int[0], { 32, 36, 39, 44 }, new int[0], { 21, 33 }, new int[0], { 22, 34 }, { 55 }, { 27, 31, 37, 51, 63 }, { 55 }, { 15, 27, 58 }, { 50, 62 }, { 27, 31, 37 }, { 58 }, { 22, 34, 49, 61 }, { 55 }, { 27, 31, 37, 58 }, { 48, 60 }, { 15, 27, 48, 60 }, { 55 }, { 19, 31, 46, 58 }, { 55 }, { 20, 32 }, { 48 }, { 27, 32, 36, 44, 56 }, { 48 }, { 15, 27, 51 }, { 41, 53 }, { 27, 32, 36 }, { 48 }, { 20, 32, 44, 56 }, { 48 }, { 27, 32, 36, 51 }, { 41, 53 }, { 20, 32, 41, 53 }, { 48 }, { 21, 33, 41, 53 }, { 41, 53 }, { 22, 34 }, { 51 }, { 27, 31, 37, 43, 55 }, { 46 }, { 15, 27, 49 }, { 41, 53 }, { 27, 31, 37 }, { 51 }, { 22, 34, 43, 55 }, { 46 }, { 27, 31, 37, 49 }, { 41, 53 }, { 22, 34, 41, 53 }, { 49 }, { 23, 35, 41, 53 }, new int[0], { 24, 36 }, { 48 }, { 27, 32, 36, 44, 56 }, { 48 }, { 15, 27, 51 }, { 41, 53 }, { 27, 32, 36 }, { 48 }, { 20, 32, 44, 56 }, { 48 }, { 27, 32, 36, 51 }, { 41, 53 }, { 20, 32, 41, 53 }, { 48 }, { 21, 33, 41, 53 }, new int[0], { 22, 34 }, { 55 }, { 27, 31, 37, 51, 63 }, { 55 }, { 15, 27, 58 }, { 50, 62 }, { 27, 31, 37 }, { 58 }, { 22, 34, 49, 61 }, { 55 }, { 27, 31, 37, 58 }, { 48, 60 }, { 15, 27, 48, 60 }, { 55 }, { 19, 31, 46, 58 }, { 55 }, { 20, 32 }, { 48 }, { 27, 32, 36, 44, 56 }, { 48 }, { 15, 27, 51 }, { 41, 53 }, { 27, 32, 36, 41, 53 }, { 48 }, { 20, 32, 44, 56 }, new int[0], { 20, 32, 44, 56 }, new int[0], { 19, 31, 43, 55 }, new int[0], { 18, 30, 42, 54 }, new int[0], { 17, 29 }, { 41 }, { 17, 29, 45 }, { 48 }, { 21, 33, 53 }, { 48 }, { 21, 33, 45 }, { 41 }, { 22, 34 }, { 41 }, { 29, 34, 37, 46 }, { 49 }, { 29, 34, 37, 41, 53 }, new int[0], { 29, 34, 37, 41, 46, 49 }, new int[0], { 22, 29, 34, 38, 41, 44, 48 }, new int[0], { 22, 29, 34 }, { 38, 41, 44, 48 }, { 15, 27 }, { 37, 46 }, { 19, 31 }, { 39 }, { 20, 32, 36, 44 }, new int[0], { 27, 32, 36, 39, 51 }, new int[0], { 27, 32, 36, 39, 51 }, new int[0], { 21, 33, 39, 51 }, new int[0], { 22, 34 }, { 55 }, { 27, 31, 37, 51, 63 }, { 55 }, { 15, 27, 58 }, { 50, 62 }, { 27, 31, 37 }, { 58 }, { 22, 34, 49, 61 }, { 55 }, { 27, 31, 37, 58 }, { 48, 60 }, { 15, 27, 48, 60 }, { 55 }, { 19, 31, 46, 58 }, { 55 }, { 20, 32 }, { 48 }, { 27, 32, 36, 44, 56 }, { 48 }, { 15, 27, 51 }, { 41, 53 }, { 27, 32, 36 }, { 48 }, { 20, 32, 44, 56 }, { 48 }, { 27, 32, 36, 51 }, { 41, 53 }, { 20, 32, 41, 53 }, { 48 }, { 21, 33, 41, 53 }, { 41, 53 }, { 22, 34 }, { 51 }, { 27, 31, 37, 43, 55 }, { 46 }, { 15, 27, 49 }, { 41, 53 }, { 27, 31, 37 }, { 51 }, { 22, 34, 43, 55 }, { 46 }, { 27, 31, 37, 49 }, { 41, 53 }, { 22, 34, 41, 53 }, { 49 }, { 23, 35, 41, 53 }, new int[0], { 24, 36 }, { 48 }, { 27, 32, 36, 44, 56 }, { 48 }, { 15, 27, 51 }, { 41, 53 }, { 27, 32, 36 }, { 48 }, { 20, 32, 44, 56 }, { 48 }, { 27, 32, 36, 51 }, { 41, 53 }, { 20, 32, 41, 53 }, { 48 }, { 21, 33, 41, 53 }, new int[0], { 22, 34 }, { 55 }, { 27, 31, 37, 51, 63 }, { 55 }, { 15, 27, 58 }, { 50, 62 }, { 27, 31, 37 }, { 58 }, { 22, 34, 49, 61 }, { 55 }, { 27, 31, 37, 58 }, { 48, 60 }, { 15, 27, 48, 60 }, { 55 }, { 19, 31, 46, 58 }, { 55 }, { 20, 32 }, { 48 }, { 27, 32, 36, 44, 56 }, { 48 }, { 15, 27, 51 }, { 41, 53 }, { 27, 32, 36, 41, 53 }, { 48 }, { 20, 32, 44, 56 }, new int[0], { 20, 32, 44, 56 }, new int[0], { 19, 31, 43, 55 }, new int[0], { 18, 30, 42, 54 }, new int[0], { 17, 29 }, { 41 }, { 17, 29, 45 }, { 48 }, { 21, 33, 53 }, { 48 }, { 21, 33, 45 }, { 41 }, { 22, 34 }, { 41 }, { 29, 34, 37, 46 }, { 49 }, { 29, 34, 37, 41, 53 }, new int[0], { 29, 34, 37, 41, 46, 49 }, new int[0], { 22, 29, 34, 38, 41, 44, 48 }, new int[0], { 22, 29, 34 }, { 38, 41, 44, 48 }, { 15, 27 }, { 37, 46 }, { 19, 31 }, { 39 }, { 20, 32 }, { 44 }, { 27, 32, 36, 48 }, { 51 }, { 27, 32, 36, 44, 56 }, new int[0], { 15, 27 }, new int[0], { 20, 32 }, { 44 }, { 27, 32, 36, 39, 51 }, { 44 }, { 27, 32, 36, 48 }, { 39, 51 }, { 21, 33 }, { 43 }, { 22, 34, 39, 51 }, { 43 }, { 27, 31, 37, 46 }, { 39, 51 }, { 27, 31, 37, 39, 51 }, { 39, 51 }, { 15, 27, 39, 51 }, { 39, 51 }, { 20, 32 }, { 44 }, { 27, 32, 36, 39, 51 }, { 44 }, { 27, 32, 36, 48 }, { 39, 51 }, { 21, 33 }, { 43 }, { 34, 22, 39, 51 }, { 43 }, { 27, 31, 37, 46 }, { 39, 51 }, { 27, 31, 37, 39, 51 }, { 39, 51 }, { 15, 27 }, { 39, 51 }, { 16, 28 }, { 44 }, { 47 }, { 40, 52 }, { 15, 27 }, { 39, 51 }, { 15, 27 }, { 39, 51 }, { 16, 28 }, { 44 }, { 47 }, { 52 }, { 15, 27 }, { 39, 51 }, new int[0], { 39, 51 }, new int[0], { 8 }, { 11 }, { 20 }, { 8 }, { 20 }, { 23 }, { 32 }, { 20 }, { 32 }, { 35 }, { 44 }, { 32 }, { 44 }, { 47 }, { 56 }, { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, new int[0], { 38, 41, 44, 47, 56, 68 }, { 56, 68 }, { 39, 44, 48, 56, 68 }, { 63 }, { 39, 44, 48, 65 }, { 60 }, { 39, 44, 48, 63 }, { 56, 65 }, { 39, 44, 48 }, { 52, 56 }, { 40, 44, 47, 52, 56 }, { 58 }, { 40, 44, 47, 52, 59 }, { 56 }, { 39, 44, 48, 58 }, { 51, 60 }, { 39, 44, 48 }, { 56 }, { 39, 44, 48, 51, 60 }, { 56 }, { 39, 43, 46, 51, 58 }, new int[0], { 44, 48, 51, 56 }, new int[0], new int[0], { 44, 56 }, { 26, 29, 32, 35, 44, 56 }, new int[0], { 26, 41, 32, 35, 44, 56 }, new int[0], { 26, 29, 32, 35, 44, 56 }, new int[0], { 26, 29, 32, 35, 44, 56 }, { 44, 56 }, { 27, 32, 36, 44, 56 }, { 51 }, { 27, 32, 36, 53 }, { 48 }, { 27, 32, 36, 51 }, { 44, 53 }, { 27, 32, 36 }, { 40, 44 }, { 28, 32, 35, 40, 44 }, { 46 }, { 28, 32, 35, 40, 47 }, { 44 }, { 27, 32, 36, 46 }, { 39, 48 }, { 27, 32, 36 }, { 44 }, { 27, 32, 36, 39, 48 }, { 44 }, { 27, 31, 34, 39, 46 }, new int[0], { 32, 36, 39, 44 }, new int[0], { 44, 56 }, new int[0], { 27, 39, 44, 48, 51, 56 }, new int[0], { 15, 27, 44, 48, 51, 56 }, new int[0], { 32, 36, 42 }, { 46, 48, 51, 56 }, { 18, 30, 46, 48, 51, 56 }, { 48, 51 }, { 32, 36, 42, 46 }, new int[0], { 17, 29, 44, 48, 51, 56 }, new int[0], { 32, 36, 42 }, { 46, 48, 51, 56 }, { 15, 27, 46, 48, 51, 56 }, { 48, 51 }, { 12, 24, 46 }, { 48, 51 }, { 13, 25, 44 }, { 49 }, { 32, 37, 41, 46 }, { 49 }, { 20, 32, 53 }, { 44 }, { 32, 37, 41, 49 }, { 53 }, { 17, 29, 46 }, { 49 }, { 32, 37, 41, 53 }, { 44 }, { 13, 25, 44 }, { 53 }, { 14, 26, 46 }, { 53 }, { 15, 27, 44, 48, 51, 56 }, new int[0], { 32, 36, 42 }, { 46, 48, 51, 56 }, { 18, 30, 46, 48, 51, 56 }, { 48, 51 }, { 32, 36, 42, 46 }, new int[0], { 17, 29, 44, 48, 51, 56 }, new int[0], { 32, 36, 42 }, { 46, 48, 51, 56 }, { 15, 27, 46, 48, 51, 56 }, { 48, 51 }, { 12, 24, 46 }, { 48, 51 }, { 13, 25, 44 }, { 49 }, { 32, 37, 41, 46 }, { 49 }, { 20, 32, 53 }, { 44 }, { 32, 37, 41, 49 }, { 53 }, { 17, 29, 46 }, { 49 }, { 32, 37, 41, 53 }, { 44 }, { 13, 25, 44 }, { 53 }, { 12, 24, 45 }, { 51, 53 }, { 10, 22, 46, 50, 53, 58 }, new int[0], { 34, 38, 44 }, { 48, 50, 53, 58 }, { 14, 26, 48, 50, 53, 58 }, { 50, 53 }, { 34, 38, 44, 48 }, new int[0], { 17, 29, 46, 50, 53, 58 }, new int[0], { 34, 38, 44, 48, 50, 53, 58 }, { 48, 50, 53, 58 }, { 22, 34, 50, 53 }, { 48 }, { 34, 38, 44, 50, 53 }, new int[0], { 15, 27 }, { 51 }, { 34, 39, 42, 46, 58 }, { 51 }, { 18, 30, 54 }, { 48, 60 }, { 34, 39, 42 }, { 51 }, { 15, 27, 46, 58 }, { 51 }, { 34, 39, 42, 54 }, { 48, 60 }, { 18, 30, 48, 60 }, { 51 }, { 34, 39, 42, 46, 58 }, new int[0], { 31, 49, 52, 61 }, { 34 }, { 49, 52, 61 }, { 37 }, { 42, 48, 52, 60 }, { 37 }, { 34, 46, 52, 58 }, { 31 }, { 20, 32, 44, 53 }, { 49 }, { 32, 37, 41, 51 }, { 46, 54 }, { 22, 46, 54 }, { 46 }, { 32, 34, 38, 44, 53 }, new int[0], { 27, 34, 37, 43, 53 }, { 49 }, { 27, 34, 37, 51 }, { 42, 53 }, { 32, 36, 42, 53 }, { 48 }, { 32, 36, 42, 51 }, { 41, 49 }, { 25, 37, 41, 49 }, { 44, 56 }, { 32, 37, 41 }, { 53 }, { 32, 37, 41, 44, 56 }, { 53 }, { 14, 26, 44, 56 }, { 53 }, { 15, 27, 44, 48, 51, 56 }, new int[0], { 32, 36, 42 }, { 46, 48, 51, 56 }, { 18, 30, 46, 48, 51, 56 }, { 48, 51 }, { 32, 36, 42, 46 }, new int[0], { 17, 29, 44, 48, 51, 56 }, new int[0], { 32, 36, 42 }, { 46, 48, 51, 56 }, { 15, 27, 46, 48, 51, 56 }, { 48, 51 }, { 12, 24, 46 }, { 48, 51 }, { 13, 25, 44 }, { 49 }, { 32, 37, 41, 46 }, { 49 }, { 20, 32, 53 }, { 44 }, { 32, 37, 41, 49 }, { 53 }, { 17, 29, 46 }, { 49 }, { 32, 37, 41, 53 }, { 44 }, { 13, 25, 44 }, { 53 }, { 14, 26, 46 }, { 53 }, { 15, 27, 44, 48, 51, 56 }, new int[0], { 32, 36, 42 }, { 46, 48, 51, 56 }, { 18, 30, 46, 48, 51, 56 }, { 48, 51 }, { 32, 36, 42, 46 }, new int[0], { 17, 29, 44, 48, 51, 56 }, new int[0], { 32, 36, 42 }, { 46, 48, 51, 56 }, { 15, 27, 46, 48, 51, 56 }, { 48, 51 }, { 12, 24, 46 }, { 48, 51 }, { 13, 25, 44 }, { 49 }, { 32, 37, 41, 46 }, { 49 }, { 20, 32, 53 }, { 44 }, { 32, 37, 41, 49 }, { 53 }, { 17, 29, 46 }, { 49 }, { 32, 37, 41, 53 }, { 44 }, { 13, 25, 44 }, { 53 }, { 12, 24, 45 }, { 51, 53 }, { 10, 22, 46, 50, 53, 58 }, new int[0], { 34, 38, 44 }, { 48, 50, 53, 58 }, { 14, 26, 48, 50, 53, 58 }, { 50, 53 }, { 34, 38, 44, 48 }, new int[0], { 17, 29, 46, 50, 53, 58 }, new int[0], { 34, 38, 44, 48, 50, 53, 58 }, { 48, 50, 53, 58 }, { 22, 34, 50, 53 }, { 48 }, { 34, 38, 44, 50, 53 }, new int[0], { 15, 27 }, { 51 }, { 34, 39, 42, 46, 58 }, { 51 }, { 18, 30, 54 }, { 48, 60 }, { 34, 39, 42 }, { 51 }, { 15, 27, 46, 58 }, { 51 }, { 34, 39, 42, 54 }, { 48, 60 }, { 18, 30, 48, 60 }, { 51 }, { 34, 39, 42, 46, 58 }, new int[0], { 31, 49, 52, 61 }, { 34 }, { 49, 52, 61 }, { 37 }, { 42, 48, 52, 60 }, { 37 }, { 34, 46, 52, 58 }, { 31 }, { 20, 32, 44, 53 }, { 49 }, { 32, 37, 41, 51 }, { 46, 54 }, { 22, 46, 54 }, { 46 }, { 32, 34, 38, 44, 53 }, new int[0], { 27, 34, 37, 43, 53 }, { 49 }, { 27, 34, 37, 51 }, { 42, 53 }, { 32, 36, 42, 53 }, { 48 }, { 32, 36, 42, 51 }, { 41, 49 }, { 25, 37, 41, 49 }, { 49 }, { 20, 32, 53 }, { 56 }, { 13, 25, 49, 61 }, new int[0], { 24, 36 }, new int[0] };
        piano.key = new boolean[128];
    }
}
