// 
// Decompiled by Procyon v0.5.30
// 

class JupiterCompute
{
    final double K = 0.017453292519943295;
    double T;
    double L;
    double B;
    double R;
    double lambda;
    double beta;
    double eps;
    double x;
    double y;
    double z;
    double[] xyz;
    double deltaT;
    compute comp;
    double LL;
    double BB;
    double RR;
    
    public JupiterCompute(final double JD, final double dT) {
        this.xyz = new double[3];
        this.comp = new compute();
        this.deltaT = dT;
        final double JD2 = JD + this.deltaT / 86400.0;
        this.T = (JD2 - 2451545.0) / 36525.0;
        final double T1 = this.T;
        this.eps = 0.017453292519943295 * (23.433333333333334 + (21.448 - 46.815 * this.T - 5.9E-4 * this.T * this.T + 0.001813 * this.T * this.T * this.T) / 3600.0);
        this.T /= 10.0;
        this.L = (this.L0(this.T) + this.L1(this.T) * this.T + this.L2(this.T) * this.T * this.T + this.L3(this.T) * this.T * this.T * this.T + this.L4(this.T) * this.T * this.T * this.T * this.T + this.L5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        this.B = (this.B0(this.T) + this.B1(this.T) * this.T + this.B2(this.T) * this.T * this.T + this.B3(this.T) * this.T * this.T * this.T + this.B4(this.T) * this.T * this.T * this.T * this.T + this.B5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        this.R = (this.R0(this.T) + this.R1(this.T) * this.T + this.R2(this.T) * this.T * this.T + this.R3(this.T) * this.T * this.T * this.T + this.R4(this.T) * this.T * this.T * this.T * this.T + this.R5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        this.LL = this.L;
        this.BB = this.B;
        this.RR = this.R;
        EarthCompute earthComp = new EarthCompute(JD2, this.deltaT);
        double RE = earthComp.earthR();
        double BE = earthComp.earthB();
        double LE = earthComp.earthL();
        this.x = this.R * Math.cos(this.B) * Math.cos(this.L) - RE * Math.cos(BE) * Math.cos(LE);
        this.y = this.R * Math.cos(this.B) * Math.sin(this.L) - RE * Math.cos(BE) * Math.sin(LE);
        this.z = this.R * Math.sin(this.B) - RE * Math.sin(BE);
        double tau = 0.0057755183 * Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        this.T = (JD2 - 2451545.0 - tau) / 365250.0;
        this.L = (this.L0(this.T) + this.L1(this.T) * this.T + this.L2(this.T) * this.T * this.T + this.L3(this.T) * this.T * this.T * this.T + this.L4(this.T) * this.T * this.T * this.T * this.T + this.L5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        this.B = (this.B0(this.T) + this.B1(this.T) * this.T + this.B2(this.T) * this.T * this.T + this.B3(this.T) * this.T * this.T * this.T + this.B4(this.T) * this.T * this.T * this.T * this.T + this.B5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        this.R = (this.R0(this.T) + this.R1(this.T) * this.T + this.R2(this.T) * this.T * this.T + this.R3(this.T) * this.T * this.T * this.T + this.R4(this.T) * this.T * this.T * this.T * this.T + this.R5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        earthComp = new EarthCompute(JD2 - tau, this.deltaT);
        RE = earthComp.earthR();
        BE = earthComp.earthB();
        LE = earthComp.earthL();
        this.x = this.R * Math.cos(this.B) * Math.cos(this.L) - RE * Math.cos(BE) * Math.cos(LE);
        this.y = this.R * Math.cos(this.B) * Math.sin(this.L) - RE * Math.cos(BE) * Math.sin(LE);
        this.z = this.R * Math.sin(this.B) - RE * Math.sin(BE);
        tau = 0.0057755183 * Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        this.T = (JD2 - 2451545.0 - tau) / 365250.0;
        this.L = (this.L0(this.T) + this.L1(this.T) * this.T + this.L2(this.T) * this.T * this.T + this.L3(this.T) * this.T * this.T * this.T + this.L4(this.T) * this.T * this.T * this.T * this.T + this.L5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        this.B = (this.B0(this.T) + this.B1(this.T) * this.T + this.B2(this.T) * this.T * this.T + this.B3(this.T) * this.T * this.T * this.T + this.B4(this.T) * this.T * this.T * this.T * this.T + this.B5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        this.R = (this.R0(this.T) + this.R1(this.T) * this.T + this.R2(this.T) * this.T * this.T + this.R3(this.T) * this.T * this.T * this.T + this.R4(this.T) * this.T * this.T * this.T * this.T + this.R5(this.T) * this.T * this.T * this.T * this.T * this.T) / 1.0E8;
        earthComp = new EarthCompute(JD2 - tau, this.deltaT);
        RE = earthComp.earthR();
        BE = earthComp.earthB();
        LE = earthComp.earthL();
        this.x = this.R * Math.cos(this.B) * Math.cos(this.L) - RE * Math.cos(BE) * Math.cos(LE);
        this.y = this.R * Math.cos(this.B) * Math.sin(this.L) - RE * Math.cos(BE) * Math.sin(LE);
        this.z = this.R * Math.sin(this.B) - RE * Math.sin(BE);
        this.xyz[0] = this.R * Math.cos(this.B) * Math.cos(this.L);
        this.xyz[1] = this.R * Math.cos(this.B) * Math.sin(this.L);
        this.xyz[2] = this.R * Math.sin(this.B);
        this.lambda = Math.atan2(this.y, this.x) / 0.017453292519943295;
        if (this.lambda < 0.0) {
            this.lambda += 360.0;
        }
        this.beta = Math.atan2(this.z, Math.sqrt(this.x * this.x + this.y * this.y));
    }
    
    double earthDist() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    
    double heliocentricLambda() {
        double LH = this.LL / 0.017453292519943295 % 360.0;
        if (LH < 0.0) {
            LH += 360.0;
        }
        return LH;
    }
    
    double BETA() {
        return this.BB / 0.017453292519943295 % 360.0;
    }
    
    double R() {
        return this.RR;
    }
    
    double alpha() {
        double a = Math.atan2(Math.sin(0.017453292519943295 * this.lambda) * Math.cos(this.eps) - Math.tan(this.beta) * Math.sin(this.eps), Math.cos(0.017453292519943295 * this.lambda)) / 0.017453292519943295;
        if (a < 0.0) {
            a += 360.0;
        }
        return a;
    }
    
    double delta() {
        final double sinDelta = Math.sin(this.beta) * Math.cos(this.eps) + Math.cos(this.beta) * Math.sin(this.eps) * Math.sin(0.017453292519943295 * this.lambda);
        return Math.asin(sinDelta) / 0.017453292519943295 % 360.0;
    }
    
    double beta() {
        return this.beta / 0.017453292519943295;
    }
    
    double lambda() {
        return this.lambda;
    }
    
    double L0(final double t) {
        final double[][] L = { { 5.9954691E7, 0.0, 0.0 }, { 9695899.0, 5.0619179, 529.6909651 }, { 573610.0, 1.444062, 7.113547 }, { 306389.0, 5.417347, 1059.38193 }, { 97178.0, 4.14265, 632.78374 }, { 72903.0, 3.64043, 522.57742 }, { 64264.0, 3.41145, 103.09277 }, { 39806.0, 2.29377, 419.48464 }, { 38858.0, 1.27232, 316.39187 }, { 27965.0, 1.78455, 536.80451 }, { 13590.0, 5.77481, 1589.0729 }, { 8769.0, 3.63, 949.1756 }, { 8246.0, 3.5823, 206.1855 }, { 7368.0, 5.081, 735.8765 }, { 6263.0, 0.025, 213.2991 }, { 6114.0, 4.5132, 1162.4747 }, { 5305.0, 4.1863, 1052.2684 }, { 5305.0, 1.3067, 14.2271 }, { 4905.0, 1.3208, 110.2063 }, { 4647.0, 4.6996, 3.9322 }, { 3045.0, 4.3168, 426.5982 }, { 2610.0, 1.5667, 846.0828 }, { 2028.0, 1.0638, 3.1814 }, { 1921.0, 0.9717, 639.8973 }, { 1765.0, 2.1415, 1066.4955 }, { 1723.0, 3.8804, 1265.5675 }, { 1633.0, 3.582, 515.4639 }, { 1432.0, 4.2968, 625.6702 }, { 973.0, 4.098, 95.979 }, { 884.0, 2.437, 412.371 }, { 733.0, 6.085, 838.969 }, { 731.0, 3.806, 1581.959 }, { 709.0, 1.293, 742.99 }, { 692.0, 6.134, 2118.764 }, { 614.0, 4.109, 1478.867 }, { 582.0, 4.54, 309.278 }, { 495.0, 3.756, 323.505 }, { 441.0, 2.958, 454.909 }, { 417.0, 1.036, 2.448 }, { 390.0, 4.897, 1692.166 }, { 376.0, 4.703, 1368.66 }, { 341.0, 5.715, 533.623 }, { 330.0, 4.74, 0.048 }, { 262.0, 1.877, 0.963 }, { 261.0, 0.82, 380.128 }, { 257.0, 3.724, 199.072 }, { 244.0, 5.22, 728.763 }, { 235.0, 1.227, 909.819 }, { 220.0, 1.651, 543.918 }, { 207.0, 1.855, 525.759 }, { 202.0, 1.807, 1375.774 }, { 197.0, 5.293, 1155.361 }, { 175.0, 3.73, 942.062 }, { 175.0, 3.226, 1898.351 }, { 175.0, 5.91, 956.289 }, { 158.0, 4.365, 1795.258 }, { 151.0, 3.906, 74.782 }, { 149.0, 4.377, 1685.052 }, { 141.0, 3.136, 491.558 }, { 138.0, 1.318, 1169.588 }, { 131.0, 4.169, 1045.155 }, { 117.0, 2.5, 1596.186 }, { 117.0, 3.389, 0.521 }, { 106.0, 4.554, 526.51 } };
        double l0 = 0.0;
        for (int i = 0; i <= 63; ++i) {
            l0 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return l0;
    }
    
    double L1(final double t) {
        final double[][] L = { { 5.2993480757E10, 0.0, 0.0 }, { 489741.0, 4.220667, 529.690965 }, { 228919.0, 6.026475, 7.113547 }, { 27655.0, 4.57266, 1059.38193 }, { 20721.0, 5.45939, 522.57742 }, { 12106.0, 0.16986, 536.80451 }, { 6068.0, 4.4242, 103.0928 }, { 5434.0, 3.9848, 419.4846 }, { 4238.0, 5.8901, 14.2271 }, { 2212.0, 5.2677, 206.1855 }, { 1746.0, 4.9267, 1589.0729 }, { 1296.0, 5.5513, 3.1814 }, { 1173.0, 5.8565, 1052.2684 }, { 1163.0, 0.5145, 3.9322 }, { 1099.0, 5.307, 515.4639 }, { 1007.0, 0.4648, 735.8765 }, { 1004.0, 3.1504, 426.5982 }, { 848.0, 5.758, 110.206 }, { 827.0, 4.803, 213.299 }, { 816.0, 0.586, 1066.495 }, { 725.0, 5.518, 639.897 }, { 568.0, 5.989, 625.67 }, { 474.0, 4.132, 412.371 }, { 413.0, 5.737, 95.979 }, { 345.0, 4.242, 632.784 }, { 336.0, 3.732, 1162.475 }, { 234.0, 4.035, 949.176 }, { 234.0, 6.243, 309.278 }, { 199.0, 1.505, 838.969 }, { 195.0, 2.219, 323.505 }, { 187.0, 6.086, 742.99 }, { 184.0, 6.28, 543.918 }, { 171.0, 5.417, 199.072 }, { 131.0, 0.626, 728.763 }, { 115.0, 0.68, 846.083 }, { 115.0, 5.286, 2118.764 }, { 108.0, 4.493, 956.289 }, { 80.0, 5.82, 1045.15 }, { 72.0, 5.34, 942.06 }, { 70.0, 5.97, 532.87 }, { 67.0, 5.73, 21.34 }, { 66.0, 0.13, 526.51 }, { 65.0, 6.09, 1581.96 }, { 59.0, 0.59, 1155.36 }, { 58.0, 0.99, 1596.19 }, { 57.0, 5.97, 1169.59 }, { 57.0, 1.41, 533.62 }, { 55.0, 5.43, 10.29 }, { 52.0, 5.73, 117.32 }, { 52.0, 0.23, 1368.66 }, { 50.0, 6.08, 525.76 }, { 47.0, 3.63, 1478.87 }, { 47.0, 0.51, 1265.57 }, { 40.0, 4.16, 1692.17 }, { 34.0, 0.1, 302.16 }, { 33.0, 5.04, 220.41 }, { 32.0, 5.37, 508.35 }, { 29.0, 5.42, 1272.68 }, { 29.0, 3.36, 4.67 }, { 29.0, 0.76, 88.87 }, { 25.0, 1.61, 831.86 } };
        double l1 = 0.0;
        for (int i = 0; i <= 60; ++i) {
            l1 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return l1;
    }
    
    double L2(final double t) {
        final double[][] L = { { 47234.0, 4.32148, 7.11355 }, { 38966.0, 0.0, 0.0 }, { 30629.0, 2.93021, 529.69097 }, { 3189.0, 1.055, 522.5774 }, { 2729.0, 4.8455, 536.8045 }, { 2723.0, 3.4141, 1059.3819 }, { 1721.0, 4.1873, 14.2271 }, { 383.0, 5.768, 419.485 }, { 378.0, 0.76, 515.464 }, { 367.0, 6.055, 103.093 }, { 337.0, 3.786, 3.181 }, { 308.0, 0.694, 206.186 }, { 218.0, 3.814, 1589.073 }, { 199.0, 5.34, 1066.495 }, { 197.0, 2.484, 3.932 }, { 156.0, 1.406, 1052.268 }, { 146.0, 3.814, 639.897 }, { 142.0, 1.634, 426.598 }, { 130.0, 5.837, 412.371 }, { 117.0, 1.414, 625.67 }, { 97.0, 4.03, 110.21 }, { 91.0, 1.11, 95.98 }, { 87.0, 2.52, 632.78 }, { 79.0, 4.64, 543.92 }, { 72.0, 2.22, 735.88 }, { 58.0, 0.83, 199.07 }, { 57.0, 3.12, 213.3 }, { 49.0, 1.67, 309.28 }, { 40.0, 4.02, 21.34 }, { 40.0, 0.62, 323.51 }, { 36.0, 2.33, 728.76 }, { 29.0, 3.61, 10.29 }, { 28.0, 3.24, 838.97 }, { 26.0, 4.5, 742.99 }, { 26.0, 2.51, 1162.47 }, { 25.0, 1.22, 1045.15 }, { 24.0, 3.01, 956.29 }, { 19.0, 4.29, 532.87 }, { 18.0, 0.81, 508.35 }, { 17.0, 4.2, 2118.76 }, { 17.0, 1.83, 526.51 }, { 15.0, 5.81, 1596.19 }, { 15.0, 0.68, 942.06 }, { 15.0, 4.0, 117.32 }, { 14.0, 5.95, 316.39 }, { 14.0, 1.8, 302.16 }, { 13.0, 2.52, 88.87 }, { 13.0, 4.37, 1169.59 }, { 11.0, 4.44, 525.76 }, { 10.0, 1.72, 1581.96 }, { 9.0, 2.18, 1155.36 }, { 9.0, 3.29, 220.41 }, { 9.0, 3.32, 831.86 }, { 8.0, 5.76, 846.08 }, { 8.0, 2.71, 533.62 }, { 7.0, 2.18, 1265.57 }, { 6.0, 0.5, 949.18 } };
        double l2 = 0.0;
        for (int i = 0; i <= 56; ++i) {
            l2 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return l2;
    }
    
    double L3(final double t) {
        final double[][] L = { { 6502.0, 2.5986, 7.1135 }, { 1357.0, 1.3464, 529.691 }, { 471.0, 2.475, 14.227 }, { 417.0, 3.245, 536.805 }, { 353.0, 2.974, 522.577 }, { 155.0, 2.076, 1059.382 }, { 87.0, 2.51, 515.46 }, { 44.0, 0.0, 0.0 }, { 34.0, 3.83, 1066.5 }, { 28.0, 2.45, 206.19 }, { 24.0, 1.28, 412.37 }, { 23.0, 2.98, 543.92 }, { 20.0, 2.1, 639.9 }, { 20.0, 1.4, 419.48 }, { 19.0, 1.59, 103.09 }, { 17.0, 2.3, 21.34 }, { 17.0, 2.6, 1589.07 }, { 16.0, 3.15, 625.67 }, { 16.0, 3.36, 1052.27 }, { 13.0, 2.76, 95.98 }, { 13.0, 2.54, 199.07 }, { 13.0, 6.27, 426.6 }, { 9.0, 1.76, 10.29 }, { 9.0, 2.27, 110.21 }, { 7.0, 3.43, 309.28 }, { 7.0, 4.04, 728.76 }, { 6.0, 2.52, 508.35 }, { 5.0, 2.91, 1045.15 }, { 5.0, 5.25, 323.51 }, { 4.0, 4.3, 88.87 }, { 4.0, 3.52, 302.16 }, { 4.0, 4.09, 735.88 }, { 3.0, 1.43, 956.29 }, { 3.0, 4.36, 1596.19 }, { 3.0, 1.25, 213.3 }, { 3.0, 5.02, 838.97 }, { 3.0, 2.24, 117.32 }, { 2.0, 2.9, 742.99 }, { 2.0, 2.36, 942.06 } };
        double l3 = 0.0;
        for (int i = 0; i <= 38; ++i) {
            l3 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return l3;
    }
    
    double L4(final double t) {
        final double[][] L = { { 669.0, 0.853, 7.114 }, { 114.0, 3.142, 0.0 }, { 100.0, 0.743, 14.227 }, { 50.0, 1.65, 536.8 }, { 44.0, 5.82, 529.69 }, { 32.0, 4.86, 522.58 }, { 15.0, 4.29, 515.46 }, { 9.0, 0.71, 1059.38 }, { 5.0, 1.3, 543.92 }, { 4.0, 2.32, 1066.5 }, { 4.0, 0.48, 21.34 }, { 3.0, 3.0, 412.37 }, { 2.0, 0.4, 639.9 }, { 2.0, 4.26, 199.07 }, { 2.0, 4.91, 625.67 }, { 2.0, 4.26, 206.19 }, { 1.0, 5.26, 1052.27 }, { 1.0, 4.72, 95.98 }, { 1.0, 1.29, 1589.07 } };
        double l4 = 0.0;
        for (int i = 0; i < 19; ++i) {
            l4 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return l4;
    }
    
    double L5(final double t) {
        final double[][] L = { { 50.0, 5.26, 7.11 }, { 16.0, 5.25, 14.23 }, { 4.0, 0.01, 536.8 }, { 2.0, 1.1, 522.58 }, { 1.0, 3.14, 0.0 } };
        double l5 = 0.0;
        for (int i = 0; i < 5; ++i) {
            l5 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return l5;
    }
    
    double B0(final double t) {
        final double[][] L = { { 2268616.0, 3.5585261, 529.6909651 }, { 110090.0, 0.0, 0.0 }, { 109972.0, 3.908093, 1059.38193 }, { 8101.0, 3.6051, 522.5774 }, { 6438.0, 0.3063, 536.8045 }, { 6044.0, 4.2588, 1589.0729 }, { 1107.0, 2.9853, 1162.4747 }, { 944.0, 1.675, 426.598 }, { 942.0, 2.936, 1052.268 }, { 894.0, 1.754, 7.114 }, { 836.0, 5.179, 103.093 }, { 767.0, 2.155, 632.784 }, { 684.0, 3.678, 213.299 }, { 629.0, 0.643, 1066.495 }, { 559.0, 0.014, 846.083 }, { 532.0, 2.703, 110.206 }, { 464.0, 1.173, 949.176 }, { 431.0, 2.608, 419.485 }, { 351.0, 4.611, 2118.764 }, { 132.0, 4.778, 742.99 }, { 123.0, 3.35, 1692.166 }, { 116.0, 1.387, 323.505 }, { 115.0, 5.049, 316.392 }, { 104.0, 3.701, 515.464 }, { 103.0, 2.319, 1478.867 }, { 102.0, 3.153, 1581.959 } };
        double b0 = 0.0;
        for (int i = 0; i <= 25; ++i) {
            b0 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return b0;
    }
    
    double B1(final double t) {
        final double[][] L = { { 177352.0, 5.701665, 529.690965 }, { 3230.0, 5.7794, 1059.3819 }, { 3081.0, 5.4746, 522.5774 }, { 2212.0, 4.7348, 536.8045 }, { 1694.0, 3.1416, 0.0 }, { 346.0, 4.746, 1052.268 }, { 234.0, 5.189, 1066.495 }, { 196.0, 6.186, 7.114 }, { 150.0, 3.927, 1589.073 }, { 114.0, 3.439, 632.784 }, { 97.0, 2.91, 949.18 }, { 82.0, 5.08, 1162.47 }, { 77.0, 2.51, 103.09 }, { 77.0, 0.61, 419.48 }, { 74.0, 5.5, 515.46 }, { 61.0, 5.45, 213.3 }, { 50.0, 3.95, 735.88 }, { 46.0, 0.54, 110.21 }, { 45.0, 1.9, 846.08 }, { 37.0, 4.7, 543.92 }, { 36.0, 6.11, 316.39 }, { 32.0, 4.92, 1581.96 } };
        double b1 = 0.0;
        for (int i = 0; i <= 21; ++i) {
            b1 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return b1;
    }
    
    double B2(final double t) {
        final double[][] L = { { 8094.0, 1.4632, 529.691 }, { 813.0, 3.1416, 0.0 }, { 742.0, 0.957, 522.577 }, { 399.0, 2.899, 536.805 }, { 342.0, 1.447, 1059.382 }, { 74.0, 0.41, 1052.27 }, { 46.0, 3.48, 1066.5 }, { 30.0, 1.93, 1589.07 }, { 29.0, 0.99, 515.46 }, { 23.0, 4.27, 7.11 }, { 14.0, 2.92, 543.92 }, { 12.0, 5.22, 632.78 }, { 11.0, 4.88, 949.18 }, { 6.0, 6.21, 1045.15 } };
        double b2 = 0.0;
        for (int i = 0; i <= 13; ++i) {
            b2 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return b2;
    }
    
    double B3(final double t) {
        final double[][] L = { { 252.0, 3.381, 529.691 }, { 122.0, 2.733, 522.577 }, { 49.0, 1.04, 536.8 }, { 11.0, 2.31, 1052.27 }, { 8.0, 2.77, 515.46 }, { 7.0, 4.25, 1059.38 }, { 6.0, 1.78, 1066.5 }, { 4.0, 1.13, 543.92 }, { 3.0, 3.14, 0.0 } };
        double b3 = 0.0;
        for (int i = 0; i <= 8; ++i) {
            b3 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return b3;
    }
    
    double B4(final double t) {
        final double[][] L = { { 15.0, 4.53, 522.58 }, { 5.0, 4.47, 529.69 }, { 4.0, 5.44, 536.8 }, { 3.0, 0.0, 0.0 }, { 2.0, 4.52, 515.46 }, { 1.0, 4.2, 1052.27 } };
        double b4 = 0.0;
        for (int i = 0; i <= 5; ++i) {
            b4 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return b4;
    }
    
    double B5(final double t) {
        final double[][] L = { { 1.0, 0.09, 522.58 } };
        double b5 = 0.0;
        for (int i = 0; i < 1; ++i) {
            b5 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return b5;
    }
    
    double R0(final double t) {
        final double[][] L = { { 5.20887429E8, 0.0, 0.0 }, { 2.5209327E7, 3.4910864, 529.69096509 }, { 610600.0, 3.841154, 1059.38193 }, { 282029.0, 2.574199, 632.783739 }, { 187647.0, 2.075904, 522.577418 }, { 86793.0, 0.71001, 419.48464 }, { 72063.0, 0.21466, 536.80451 }, { 65517.0, 5.97996, 316.39187 }, { 30135.0, 2.16132, 949.17561 }, { 29135.0, 1.67759, 103.09277 }, { 23947.0, 0.27458, 7.11355 }, { 23453.0, 3.54023, 735.87651 }, { 22284.0, 4.19363, 1589.0729 }, { 13033.0, 2.96043, 1162.4747 }, { 12749.0, 2.7155, 1052.26838 }, { 9703.0, 1.9067, 206.1855 }, { 9161.0, 4.4135, 213.2991 }, { 7895.0, 2.4791, 426.5982 }, { 7058.0, 2.1818, 1265.5675 }, { 6138.0, 6.2642, 846.0828 }, { 5477.0, 5.6573, 639.8973 }, { 4170.0, 2.0161, 515.4639 }, { 4137.0, 2.7222, 625.6702 }, { 3503.0, 0.5653, 1066.4955 }, { 2617.0, 2.0099, 1581.9593 }, { 2500.0, 4.5518, 838.9693 }, { 2128.0, 6.1275, 742.9901 }, { 1912.0, 0.8562, 412.3711 }, { 1611.0, 3.0887, 1368.6603 }, { 1479.0, 2.6803, 1478.8666 }, { 1231.0, 1.8904, 323.5054 }, { 1217.0, 1.8017, 110.2063 }, { 1015.0, 1.3867, 454.9094 }, { 999.0, 2.872, 309.278 }, { 961.0, 4.549, 2118.764 }, { 886.0, 4.148, 533.623 }, { 821.0, 1.593, 1898.351 }, { 812.0, 5.941, 909.819 }, { 777.0, 3.677, 728.736 }, { 727.0, 3.988, 1155.361 }, { 655.0, 2.791, 1685.052 }, { 654.0, 3.382, 1692.166 }, { 621.0, 4.823, 956.289 }, { 615.0, 2.276, 942.062 }, { 562.0, 0.081, 543.918 }, { 542.0, 0.284, 525.795 } };
        double r0 = 0.0;
        for (int i = 0; i <= 45; ++i) {
            r0 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return r0;
    }
    
    double R1(final double t) {
        final double[][] L = { { 1271802.0, 2.6493751, 529.6909651 }, { 61662.0, 3.00076, 1059.38193 }, { 53444.0, 3.89718, 522.57742 }, { 41390.0, 0.0, 0.0 }, { 31185.0, 4.88277, 536.80451 }, { 11847.0, 2.4133, 419.48464 }, { 9166.0, 4.7598, 7.1135 }, { 3404.0, 3.3469, 1589.0729 }, { 3203.0, 5.2108, 735.8765 }, { 3176.0, 2.793, 103.0928 }, { 2806.0, 3.7422, 515.4639 }, { 2677.0, 4.3305, 1052.2684 }, { 2600.0, 3.6344, 206.1855 }, { 2412.0, 1.4695, 426.5982 }, { 2101.0, 3.9276, 639.8973 }, { 1646.0, 5.3095, 1066.4955 }, { 1641.0, 4.4163, 625.6702 }, { 1050.0, 3.1611, 213.2991 }, { 1025.0, 2.5543, 412.3711 }, { 806.0, 2.678, 632.784 }, { 741.0, 2.171, 1162.475 }, { 677.0, 6.25, 838.969 }, { 567.0, 4.577, 742.99 }, { 485.0, 2.469, 949.176 }, { 469.0, 4.71, 543.918 }, { 445.0, 0.403, 323.505 }, { 416.0, 5.368, 728.763 }, { 402.0, 4.605, 309.278 }, { 347.0, 4.681, 14.227 }, { 338.0, 3.168, 956.289 }, { 261.0, 5.343, 846.083 }, { 247.0, 3.923, 942.062 }, { 220.0, 4.842, 1368.66 }, { 203.0, 5.6, 1155.361 }, { 200.0, 4.439, 1045.155 }, { 197.0, 3.706, 2118.764 }, { 196.0, 3.759, 199.072 }, { 184.0, 4.265, 95.979 }, { 180.0, 4.402, 532.872 }, { 170.0, 4.846, 526.51 }, { 146.0, 6.13, 533.623 }, { 133.0, 1.322, 110.206 }, { 132.0, 4.512, 525.759 } };
        double r1 = 0.0;
        for (int i = 0; i <= 42; ++i) {
            r1 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return r1;
    }
    
    double R2(final double t) {
        final double[][] L = { { 79645.0, 1.35866, 529.69097 }, { 8252.0, 5.7777, 522.5774 }, { 7030.0, 3.2748, 536.8045 }, { 5314.0, 1.8384, 1059.3819 }, { 1861.0, 2.9768, 7.1135 }, { 964.0, 5.48, 515.464 }, { 836.0, 4.199, 419.485 }, { 498.0, 3.142, 0.0 }, { 427.0, 2.228, 639.897 }, { 406.0, 3.783, 1066.495 }, { 377.0, 2.242, 1589.073 }, { 363.0, 5.368, 206.186 }, { 342.0, 6.099, 1052.268 }, { 339.0, 6.127, 625.67 }, { 333.0, 0.003, 426.598 }, { 280.0, 4.262, 412.371 }, { 257.0, 0.963, 632.784 }, { 230.0, 0.705, 735.877 }, { 201.0, 3.069, 543.918 }, { 200.0, 4.429, 103.093 }, { 139.0, 2.932, 14.227 }, { 114.0, 0.787, 728.763 }, { 95.0, 1.7, 838.97 }, { 86.0, 5.14, 323.51 }, { 83.0, 0.06, 309.28 }, { 80.0, 2.98, 742.99 }, { 75.0, 1.6, 956.29 }, { 70.0, 1.51, 213.3 }, { 67.0, 5.47, 199.07 }, { 62.0, 6.1, 1045.15 }, { 56.0, 0.96, 1162.47 }, { 52.0, 5.58, 942.06 }, { 50.0, 2.72, 532.87 }, { 45.0, 5.52, 508.35 }, { 44.0, 0.27, 526.51 }, { 40.0, 5.95, 95.98 } };
        double r2 = 0.0;
        for (int i = 0; i <= 35; ++i) {
            r2 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return r2;
    }
    
    double R3(final double t) {
        final double[][] L = { { 3519.0, 6.058, 529.691 }, { 1073.0, 1.6732, 536.8045 }, { 916.0, 1.413, 522.577 }, { 342.0, 0.523, 1059.382 }, { 255.0, 1.196, 7.114 }, { 222.0, 0.952, 515.464 }, { 90.0, 3.14, 0.0 }, { 69.0, 2.27, 1066.5 }, { 58.0, 1.41, 543.92 }, { 58.0, 0.53, 639.9 }, { 51.0, 5.98, 412.37 }, { 47.0, 1.58, 625.67 }, { 43.0, 6.12, 419.48 }, { 37.0, 1.18, 14.23 }, { 34.0, 1.67, 1052.27 }, { 34.0, 0.85, 206.19 }, { 31.0, 1.04, 1589.07 }, { 30.0, 4.63, 426.6 }, { 21.0, 2.5, 728.76 }, { 15.0, 0.89, 199.07 }, { 14.0, 0.96, 508.35 }, { 13.0, 1.5, 1045.15 }, { 12.0, 2.61, 735.88 }, { 12.0, 3.56, 323.51 }, { 11.0, 1.79, 309.28 }, { 11.0, 6.28, 956.29 }, { 10.0, 6.26, 103.09 }, { 9.0, 3.45, 838.97 } };
        double r3 = 0.0;
        for (int i = 0; i < 28; ++i) {
            r3 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return r3;
    }
    
    double R4(final double t) {
        final double[][] L = { { 129.0, 0.084, 536.805 }, { 113.0, 4.249, 529.691 }, { 83.0, 3.3, 522.58 }, { 38.0, 2.73, 515.46 }, { 27.0, 5.69, 7.11 }, { 18.0, 5.4, 1059.38 }, { 13.0, 6.02, 543.92 }, { 9.0, 0.77, 1066.5 }, { 8.0, 5.68, 14.23 }, { 7.0, 1.43, 412.37 }, { 6.0, 5.12, 639.9 }, { 5.0, 3.34, 625.67 }, { 3.0, 3.4, 1052.27 }, { 3.0, 4.16, 728.76 }, { 3.0, 2.9, 426.6 } };
        double r4 = 0.0;
        for (int i = 0; i < 15; ++i) {
            r4 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return r4;
    }
    
    double R5(final double t) {
        final double[][] L = { { 11.0, 4.75, 536.8 }, { 4.0, 5.92, 522.58 }, { 2.0, 5.57, 515.46 }, { 2.0, 4.3, 543.92 }, { 2.0, 3.69, 7.11 }, { 2.0, 4.13, 1059.38 }, { 2.0, 5.49, 1066.5 } };
        double r5 = 0.0;
        for (int i = 0; i < 7; ++i) {
            r5 += L[i][0] * Math.cos(L[i][1] + L[i][2] * t);
        }
        return r5;
    }
}
