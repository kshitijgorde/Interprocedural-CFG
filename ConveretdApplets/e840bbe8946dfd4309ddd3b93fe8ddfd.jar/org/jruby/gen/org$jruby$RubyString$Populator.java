// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.compiler.ASTInspector;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyString$i$0$0$strip_bang19;
import org.jruby.RubyString$i$0$0$hex19;
import org.jruby.RubyString$i$count19;
import org.jruby.RubyString$i$0$0$each_codepoint;
import org.jruby.RubyString$i$gsub_bang19;
import org.jruby.RubyString$i$0$0$oct19;
import org.jruby.RubyString$i$squeeze19;
import org.jruby.RubyString$i$encode_bang;
import org.jruby.RubyString$i$1$0$op_ge19;
import org.jruby.RubyString$i$chomp19;
import org.jruby.RubyString$i$0$0$inspect19;
import org.jruby.RubyString$i$0$0$reverse19;
import org.jruby.RubyString$i$0$0$reverse_bang19;
import org.jruby.RubyString$i$0$0$upcase19;
import org.jruby.RubyString$i$0$0$chop19;
import org.jruby.RubyString$i$0$0$rstrip19;
import org.jruby.RubyString$i$op_aref19;
import org.jruby.RubyString$i$delete19;
import org.jruby.RubyString$i$0$0$length19;
import org.jruby.RubyString$i$0$0$to_f19;
import org.jruby.RubyString$i$sub_bang19;
import org.jruby.RubyString$i$0$0$lstrip19;
import org.jruby.RubyString$i$0$0$each_char19;
import org.jruby.RubyString$i$0$0$lstrip_bang19;
import org.jruby.RubyString$i$0$0$capitalize_bang19;
import org.jruby.RubyString$i$each_line19;
import org.jruby.RubyString$i$1$0$replace19;
import org.jruby.RubyString$i$1$0$op_mul19;
import org.jruby.RubyString$i$1$0$op_le19;
import org.jruby.RubyString$i$ljust19;
import org.jruby.RubyString$i$0$0$chop_bang19;
import org.jruby.RubyString$i$0$0$codepoints;
import org.jruby.RubyString$i$2$0$insert19;
import org.jruby.RubyString$i$center19;
import org.jruby.RubyString$i$gsub19;
import org.jruby.RubyString$i$0$0$swapcase19;
import org.jruby.RubyString$i$chomp_bang19;
import org.jruby.RubyString$i$1$0$concat19;
import org.jruby.RubyString$i$0$0$to_r;
import org.jruby.RubyString$i$1$0$force_encoding;
import org.jruby.RubyString$i$to_i19;
import org.jruby.RubyString$i$0$0$dump19;
import org.jruby.RubyString$i$rindex19;
import org.jruby.RubyString$i$0$0$chars19;
import org.jruby.RubyString$i$match19;
import org.jruby.RubyString$i$0$0$swapcase_bang19;
import org.jruby.RubyString$i$1$0$op_equal19;
import org.jruby.RubyString$i$1$0$casecmp19;
import org.jruby.RubyString$i$0$0$upcase_bang19;
import org.jruby.RubyString$i$sub19;
import org.jruby.RubyString$i$lines;
import org.jruby.RubyString$i$index19;
import org.jruby.RubyString$i$0$0$ascii_only_p;
import org.jruby.RubyString$i$rjust19;
import org.jruby.RubyString$i$0$0$intern19;
import org.jruby.RubyString$i$squeeze_bang19;
import org.jruby.RubyString$i$0$0$capitalize19;
import org.jruby.RubyString$i$0$0$to_c;
import org.jruby.RubyString$i$0$0$strip19;
import org.jruby.RubyString$i$initialize19;
import org.jruby.RubyString$i$0$0$chr;
import org.jruby.RubyString$i$split19;
import org.jruby.RubyString$i$delete_bang19;
import org.jruby.RubyString$i$1$0$getbyte;
import org.jruby.RubyString$i$0$0$downcase19;
import org.jruby.RubyString$i$1$0$include_p19;
import org.jruby.RubyString$i$2$0$tr_s19;
import org.jruby.RubyString$i$0$0$ord;
import org.jruby.RubyString$i$encode;
import org.jruby.RubyString$i$2$0$tr_s_bang19;
import org.jruby.RubyString$i$1$0$op_match19;
import org.jruby.RubyString$i$0$0$succ19;
import org.jruby.RubyString$i$0$0$clear;
import org.jruby.RubyString$i$1$0$op_lt19;
import org.jruby.RubyString$i$2$0$setbyte;
import org.jruby.RubyString$i$slice_bang19;
import org.jruby.RubyString$i$1$0$scan19;
import org.jruby.RubyString$i$1$0$str_eql_p19;
import org.jruby.RubyString$i$0$0$encoding;
import org.jruby.RubyString$i$1$0$op_cmp19;
import org.jruby.RubyString$i$op_aset19;
import org.jruby.RubyString$i$0$0$succ_bang19;
import org.jruby.RubyString$i$2$0$tr19;
import org.jruby.RubyString$i$upto19;
import org.jruby.RubyString$i$1$0$op_plus19;
import org.jruby.RubyString$i$0$0$downcase_bang19;
import org.jruby.RubyString$i$0$0$rstrip_bang19;
import org.jruby.RubyString$i$0$0$valid_encoding_p;
import org.jruby.RubyString$i$1$0$op_gt19;
import org.jruby.RubyString$i$0$0$strip_bang;
import org.jruby.RubyString$i$0$0$hex;
import org.jruby.RubyString$i$count;
import org.jruby.RubyString$i$gsub_bang;
import org.jruby.RubyString$i$0$0$oct;
import org.jruby.RubyString$i$squeeze;
import org.jruby.RubyString$i$1$0$op_ge;
import org.jruby.RubyString$i$chomp;
import org.jruby.RubyString$i$0$0$inspect;
import org.jruby.RubyString$i$0$0$reverse;
import org.jruby.RubyString$i$0$0$reverse_bang;
import org.jruby.RubyString$i$0$0$upcase;
import org.jruby.RubyString$i$0$0$chop;
import org.jruby.RubyString$i$0$0$rstrip;
import org.jruby.RubyString$i$op_aref;
import org.jruby.RubyString$i$delete;
import org.jruby.RubyString$i$0$0$length;
import org.jruby.RubyString$i$0$0$to_f;
import org.jruby.RubyString$i$sub_bang;
import org.jruby.RubyString$i$0$0$lstrip;
import org.jruby.RubyString$i$0$0$each_char18;
import org.jruby.RubyString$i$0$0$lstrip_bang;
import org.jruby.RubyString$i$0$0$capitalize_bang;
import org.jruby.RubyString$i$each_line18;
import org.jruby.RubyString$i$ljust;
import org.jruby.RubyString$i$1$0$replace;
import org.jruby.RubyString$i$1$0$op_mul;
import org.jruby.RubyString$i$1$0$op_le;
import org.jruby.RubyString$i$0$0$chop_bang;
import org.jruby.RubyString$i$2$0$insert;
import org.jruby.RubyString$i$center;
import org.jruby.RubyString$i$gsub;
import org.jruby.RubyString$i$0$0$swapcase;
import org.jruby.RubyString$i$chomp_bang;
import org.jruby.RubyString$i$1$0$concat;
import org.jruby.RubyString$i$to_i;
import org.jruby.RubyString$i$0$0$dump;
import org.jruby.RubyString$i$rindex;
import org.jruby.RubyString$i$0$0$chars18;
import org.jruby.RubyString$i$1$0$match;
import org.jruby.RubyString$i$0$0$swapcase_bang;
import org.jruby.RubyString$i$1$0$op_equal;
import org.jruby.RubyString$i$1$0$casecmp;
import org.jruby.RubyString$i$0$0$upcase_bang;
import org.jruby.RubyString$i$sub;
import org.jruby.RubyString$i$lines18;
import org.jruby.RubyString$i$index;
import org.jruby.RubyString$i$rjust;
import org.jruby.RubySymbol;
import org.jruby.RubyString$i$0$0$intern;
import org.jruby.RubyString$i$squeeze_bang;
import org.jruby.RubyString$i$2$0$tr_bang;
import org.jruby.RubyString$i$0$0$capitalize;
import org.jruby.RubyString$i$0$0$strip;
import org.jruby.RubyString$i$initialize;
import org.jruby.RubyString$i$split;
import org.jruby.RubyString$i$delete_bang;
import org.jruby.RubyString$i$0$0$downcase;
import org.jruby.RubyString$i$1$0$include_p;
import org.jruby.RubyString$i$2$0$tr_s;
import org.jruby.RubyString$i$2$0$tr_s_bang;
import org.jruby.RubyString$i$1$0$op_match;
import org.jruby.RubyString$i$0$0$succ;
import org.jruby.RubyString$i$1$0$op_lt;
import org.jruby.RubyString$i$1$0$scan;
import org.jruby.RubyString$i$slice_bang;
import org.jruby.RubyString$i$1$0$str_eql_p;
import org.jruby.RubyString$i$each18;
import org.jruby.RubyString$i$1$0$op_cmp;
import org.jruby.RubyString$i$op_aset;
import org.jruby.RubyString$i$0$0$succ_bang;
import org.jruby.RubyString$i$2$0$tr;
import org.jruby.RubyString$i$upto18;
import org.jruby.RubyString$i$1$0$op_plus;
import org.jruby.RubyString$i$0$0$downcase_bang;
import org.jruby.RubyString$i$0$0$rstrip_bang;
import org.jruby.RubyString$i$1$0$op_gt;
import org.jruby.RubyString$i$1$0$rpartition;
import org.jruby.RubyString$i$1$0$op_format;
import org.jruby.RubyString$i$0$0$each_byte19;
import org.jruby.RubyString$i$2$0$tr_bang19;
import org.jruby.RubyString$i$1$0$crypt;
import org.jruby.RubyBoolean;
import org.jruby.RubyString$i$0$0$empty_p;
import org.jruby.RubyArray;
import org.jruby.RubyString$i$1$0$unpack;
import org.jruby.RubyString$i$partition;
import org.jruby.RubyString$i$0$0$bytesize;
import org.jruby.runtime.Block;
import org.jruby.RubyString$i$0$0$bytes;
import org.jruby.RubyString$i$end_with_p;
import org.jruby.RubyFixnum;
import org.jruby.RubyString$i$0$0$hash;
import org.jruby.RubyString$i$0$0$to_s;
import org.jruby.RubyString$i$start_with_p;
import org.jruby.RubyString$i$sum;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyString;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyString$s$1$0$try_convert;
import org.jruby.runtime.Visibility;
import org.jruby.CompatVersion;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyString$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            final JavaMethod javaMethod = new RubyString$s$1$0$try_convert(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "try_convert", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "try_convert", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("try_convert", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyString.try_convert", "try_convert");
        }
        JavaMethod javaMethod = new RubyString$i$sum(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "sum", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("sum", javaMethod);
        javaMethod = new RubyString$i$start_with_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "start_with_p", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("start_with?", javaMethod);
        javaMethod = new RubyString$i$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "to_s", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        cls.addMethodAtBootTimeOnly("to_str", javaMethod);
        javaMethod = new RubyString$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "hash", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new RubyString$i$end_with_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "end_with_p", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("end_with?", javaMethod);
        javaMethod = new RubyString$i$0$0$bytes(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "bytes", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "bytes", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("bytes", javaMethod);
        javaMethod = new RubyString$i$0$0$bytesize(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "bytesize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "bytesize", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("bytesize", javaMethod);
        javaMethod = new RubyString$i$partition(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "partition", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("partition", javaMethod);
        javaMethod = new RubyString$i$1$0$unpack(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "unpack", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "unpack", RubyArray.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("unpack", javaMethod);
        javaMethod = new RubyString$i$0$0$empty_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "empty_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "empty_p", RubyBoolean.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("empty?", javaMethod);
        javaMethod = new RubyString$i$1$0$crypt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "crypt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "crypt", RubyString.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("crypt", javaMethod);
        javaMethod = new RubyString$i$2$0$tr_bang19(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 2, "tr_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "tr_bang19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("tr!", javaMethod);
        javaMethod = new RubyString$i$0$0$each_byte19(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_byte19", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "each_byte19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_byte", javaMethod);
        javaMethod = new RubyString$i$1$0$op_format(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_format", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "op_format", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("%", javaMethod);
        javaMethod = new RubyString$i$1$0$rpartition(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "rpartition", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyString.class, "rpartition", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("rpartition", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyString.sum", "sum");
        runtime.addBoundMethod("org.jruby.RubyString.start_with_p", "start_with?");
        runtime.addBoundMethod("org.jruby.RubyString.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyString.hash", "hash");
        runtime.addBoundMethod("org.jruby.RubyString.end_with_p", "end_with?");
        runtime.addBoundMethod("org.jruby.RubyString.bytes", "bytes");
        runtime.addBoundMethod("org.jruby.RubyString.bytesize", "bytesize");
        runtime.addBoundMethod("org.jruby.RubyString.partition", "partition");
        runtime.addBoundMethod("org.jruby.RubyString.unpack", "unpack");
        runtime.addBoundMethod("org.jruby.RubyString.empty_p", "empty?");
        runtime.addBoundMethod("org.jruby.RubyString.crypt", "crypt");
        runtime.addBoundMethod("org.jruby.RubyString.tr_bang19", "tr!");
        runtime.addBoundMethod("org.jruby.RubyString.each_byte19", "each_byte");
        runtime.addBoundMethod("org.jruby.RubyString.op_format", "%");
        runtime.addBoundMethod("org.jruby.RubyString.rpartition", "rpartition");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyString$i$1$0$op_gt(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_gt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly(">", javaMethod);
            javaMethod = new RubyString$i$0$0$rstrip_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "rstrip_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "rstrip_bang", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("rstrip!", javaMethod);
            javaMethod = new RubyString$i$0$0$downcase_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "downcase_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "downcase_bang", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("downcase!", javaMethod);
            javaMethod = new RubyString$i$1$0$op_plus(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_plus", IRubyObject.class, new Class[] { ThreadContext.class, RubyString.class }, false);
            cls.addMethodAtBootTimeOnly("+", javaMethod);
            javaMethod = new RubyString$i$upto18(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "upto18", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("upto", javaMethod);
            javaMethod = new RubyString$i$2$0$tr(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "tr", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "tr", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("tr", javaMethod);
            javaMethod = new RubyString$i$0$0$succ_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "succ_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "succ_bang", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("succ!", javaMethod);
            cls.addMethodAtBootTimeOnly("next!", javaMethod);
            javaMethod = new RubyString$i$op_aset(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "op_aset", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("[]=", javaMethod);
            javaMethod = new RubyString$i$1$0$op_cmp(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_cmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=>", javaMethod);
            javaMethod = new RubyString$i$each18(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "each18", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("each", javaMethod);
            javaMethod = new RubyString$i$1$0$str_eql_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "str_eql_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "str_eql_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("eql?", javaMethod);
            javaMethod = new RubyString$i$slice_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "slice_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("slice!", javaMethod);
            javaMethod = new RubyString$i$1$0$scan(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "scan", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "scan", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("scan", javaMethod);
            javaMethod = new RubyString$i$1$0$op_lt(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_lt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<", javaMethod);
            javaMethod = new RubyString$i$0$0$succ(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "succ", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "succ", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("succ", javaMethod);
            cls.addMethodAtBootTimeOnly("next", javaMethod);
            javaMethod = new RubyString$i$1$0$op_match(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_match", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_match", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("=~", javaMethod);
            javaMethod = new RubyString$i$2$0$tr_s_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "tr_s_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "tr_s_bang", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("tr_s!", javaMethod);
            javaMethod = new RubyString$i$2$0$tr_s(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "tr_s", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "tr_s", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("tr_s", javaMethod);
            javaMethod = new RubyString$i$1$0$include_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "include_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "include_p", RubyBoolean.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("include?", javaMethod);
            javaMethod = new RubyString$i$0$0$downcase(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "downcase", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "downcase", RubyString.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("downcase", javaMethod);
            javaMethod = new RubyString$i$delete_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "delete_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("delete!", javaMethod);
            javaMethod = new RubyString$i$split(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "split", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("split", javaMethod);
            javaMethod = new RubyString$i$initialize(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            javaMethod = new RubyString$i$0$0$strip(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "strip", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "strip", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("strip", javaMethod);
            javaMethod = new RubyString$i$0$0$capitalize(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "capitalize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "capitalize", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("capitalize", javaMethod);
            javaMethod = new RubyString$i$2$0$tr_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "tr_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "tr_bang", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("tr!", javaMethod);
            javaMethod = new RubyString$i$squeeze_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "squeeze_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("squeeze!", javaMethod);
            javaMethod = new RubyString$i$0$0$intern(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "intern", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "intern", RubySymbol.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("to_sym", javaMethod);
            cls.addMethodAtBootTimeOnly("intern", javaMethod);
            javaMethod = new RubyString$i$rjust(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "rjust", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("rjust", javaMethod);
            javaMethod = new RubyString$i$index(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "index", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("index", javaMethod);
            javaMethod = new RubyString$i$lines18(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "lines18", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("lines", javaMethod);
            javaMethod = new RubyString$i$sub(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "sub", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("sub", javaMethod);
            javaMethod = new RubyString$i$0$0$upcase_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "upcase_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "upcase_bang", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("upcase!", javaMethod);
            javaMethod = new RubyString$i$1$0$casecmp(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "casecmp", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "casecmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("casecmp", javaMethod);
            javaMethod = new RubyString$i$1$0$op_equal(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("==", javaMethod);
            javaMethod = new RubyString$i$0$0$swapcase_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "swapcase_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "swapcase_bang", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("swapcase!", javaMethod);
            javaMethod = new RubyString$i$1$0$match(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "match", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "match", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("match", javaMethod);
            javaMethod = new RubyString$i$0$0$chars18(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "chars18", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "chars18", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("chars", javaMethod);
            javaMethod = new RubyString$i$rindex(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "rindex", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("rindex", javaMethod);
            javaMethod = new RubyString$i$0$0$dump(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "dump", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "dump", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("dump", javaMethod);
            javaMethod = new RubyString$i$to_i(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "to_i", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("to_i", javaMethod);
            javaMethod = new RubyString$i$1$0$concat(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "concat", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "concat", RubyString.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("concat", javaMethod);
            cls.addMethodAtBootTimeOnly("<<", javaMethod);
            javaMethod = new RubyString$i$chomp_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "chomp_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("chomp!", javaMethod);
            javaMethod = new RubyString$i$0$0$swapcase(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "swapcase", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "swapcase", RubyString.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("swapcase", javaMethod);
            javaMethod = new RubyString$i$gsub(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "gsub", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("gsub", javaMethod);
            javaMethod = new RubyString$i$center(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "center", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("center", javaMethod);
            javaMethod = new RubyString$i$2$0$insert(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "insert", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "insert", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("insert", javaMethod);
            javaMethod = new RubyString$i$0$0$chop_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "chop_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "chop_bang", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("chop!", javaMethod);
            javaMethod = new RubyString$i$1$0$op_le(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_le", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=", javaMethod);
            javaMethod = new RubyString$i$1$0$op_mul(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_mul", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("*", javaMethod);
            javaMethod = new RubyString$i$1$0$replace(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "replace", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "replace", IRubyObject.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("replace", javaMethod);
            cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
            javaMethod = new RubyString$i$ljust(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "ljust", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("ljust", javaMethod);
            javaMethod = new RubyString$i$each_line18(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "each_line18", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("each_line", javaMethod);
            javaMethod = new RubyString$i$0$0$capitalize_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "capitalize_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "capitalize_bang", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("capitalize!", javaMethod);
            javaMethod = new RubyString$i$0$0$lstrip_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "lstrip_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "lstrip_bang", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("lstrip!", javaMethod);
            javaMethod = new RubyString$i$0$0$each_char18(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "each_char18", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "each_char18", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("each_char", javaMethod);
            javaMethod = new RubyString$i$0$0$lstrip(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "lstrip", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "lstrip", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("lstrip", javaMethod);
            javaMethod = new RubyString$i$sub_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "sub_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("sub!", javaMethod);
            javaMethod = new RubyString$i$0$0$to_f(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "to_f", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("to_f", javaMethod);
            javaMethod = new RubyString$i$0$0$length(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "length", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "length", RubyFixnum.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("length", javaMethod);
            cls.addMethodAtBootTimeOnly("size", javaMethod);
            javaMethod = new RubyString$i$delete(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "delete", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("delete", javaMethod);
            javaMethod = new RubyString$i$op_aref(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("[]", javaMethod);
            cls.addMethodAtBootTimeOnly("slice", javaMethod);
            javaMethod = new RubyString$i$0$0$rstrip(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "rstrip", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "rstrip", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("rstrip", javaMethod);
            javaMethod = new RubyString$i$0$0$chop(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "chop", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "chop", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("chop", javaMethod);
            javaMethod = new RubyString$i$0$0$upcase(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "upcase", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "upcase", RubyString.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("upcase", javaMethod);
            javaMethod = new RubyString$i$0$0$reverse_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "reverse_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "reverse_bang", RubyString.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("reverse!", javaMethod);
            javaMethod = new RubyString$i$0$0$reverse(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "reverse", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "reverse", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("reverse", javaMethod);
            javaMethod = new RubyString$i$0$0$inspect(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "inspect", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("inspect", javaMethod);
            javaMethod = new RubyString$i$chomp(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "chomp", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("chomp", javaMethod);
            javaMethod = new RubyString$i$1$0$op_ge(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_ge", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly(">=", javaMethod);
            javaMethod = new RubyString$i$squeeze(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "squeeze", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("squeeze", javaMethod);
            javaMethod = new RubyString$i$0$0$oct(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "oct", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "oct", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("oct", javaMethod);
            javaMethod = new RubyString$i$gsub_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "gsub_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("gsub!", javaMethod);
            javaMethod = new RubyString$i$count(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "count", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("count", javaMethod);
            javaMethod = new RubyString$i$0$0$hex(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "hex", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "hex", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("hex", javaMethod);
            javaMethod = new RubyString$i$0$0$strip_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "strip_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "strip_bang", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("strip!", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyString.op_gt", ">");
            runtime.addBoundMethod("org.jruby.RubyString.rstrip_bang", "rstrip!");
            runtime.addBoundMethod("org.jruby.RubyString.downcase_bang", "downcase!");
            runtime.addBoundMethod("org.jruby.RubyString.op_plus", "+");
            runtime.addBoundMethod("org.jruby.RubyString.upto18", "upto");
            runtime.addBoundMethod("org.jruby.RubyString.tr", "tr");
            runtime.addBoundMethod("org.jruby.RubyString.succ_bang", "succ!");
            runtime.addBoundMethod("org.jruby.RubyString.op_aset", "[]=");
            runtime.addBoundMethod("org.jruby.RubyString.op_cmp", "<=>");
            runtime.addBoundMethod("org.jruby.RubyString.each18", "each");
            runtime.addBoundMethod("org.jruby.RubyString.str_eql_p", "eql?");
            runtime.addBoundMethod("org.jruby.RubyString.slice_bang", "slice!");
            runtime.addBoundMethod("org.jruby.RubyString.scan", "scan");
            runtime.addBoundMethod("org.jruby.RubyString.op_lt", "<");
            runtime.addBoundMethod("org.jruby.RubyString.succ", "succ");
            runtime.addBoundMethod("org.jruby.RubyString.op_match", "=~");
            runtime.addBoundMethod("org.jruby.RubyString.tr_s_bang", "tr_s!");
            runtime.addBoundMethod("org.jruby.RubyString.tr_s", "tr_s");
            runtime.addBoundMethod("org.jruby.RubyString.include_p", "include?");
            runtime.addBoundMethod("org.jruby.RubyString.downcase", "downcase");
            runtime.addBoundMethod("org.jruby.RubyString.delete_bang", "delete!");
            runtime.addBoundMethod("org.jruby.RubyString.split", "split");
            runtime.addBoundMethod("org.jruby.RubyString.initialize", "initialize");
            runtime.addBoundMethod("org.jruby.RubyString.strip", "strip");
            runtime.addBoundMethod("org.jruby.RubyString.capitalize", "capitalize");
            runtime.addBoundMethod("org.jruby.RubyString.tr_bang", "tr!");
            runtime.addBoundMethod("org.jruby.RubyString.squeeze_bang", "squeeze!");
            runtime.addBoundMethod("org.jruby.RubyString.intern", "to_sym");
            runtime.addBoundMethod("org.jruby.RubyString.rjust", "rjust");
            runtime.addBoundMethod("org.jruby.RubyString.index", "index");
            runtime.addBoundMethod("org.jruby.RubyString.lines18", "lines");
            runtime.addBoundMethod("org.jruby.RubyString.sub", "sub");
            runtime.addBoundMethod("org.jruby.RubyString.upcase_bang", "upcase!");
            runtime.addBoundMethod("org.jruby.RubyString.casecmp", "casecmp");
            runtime.addBoundMethod("org.jruby.RubyString.op_equal", "==");
            runtime.addBoundMethod("org.jruby.RubyString.swapcase_bang", "swapcase!");
            runtime.addBoundMethod("org.jruby.RubyString.match", "match");
            runtime.addBoundMethod("org.jruby.RubyString.chars18", "chars");
            runtime.addBoundMethod("org.jruby.RubyString.rindex", "rindex");
            runtime.addBoundMethod("org.jruby.RubyString.dump", "dump");
            runtime.addBoundMethod("org.jruby.RubyString.to_i", "to_i");
            runtime.addBoundMethod("org.jruby.RubyString.concat", "concat");
            runtime.addBoundMethod("org.jruby.RubyString.chomp_bang", "chomp!");
            runtime.addBoundMethod("org.jruby.RubyString.swapcase", "swapcase");
            runtime.addBoundMethod("org.jruby.RubyString.gsub", "gsub");
            runtime.addBoundMethod("org.jruby.RubyString.center", "center");
            runtime.addBoundMethod("org.jruby.RubyString.insert", "insert");
            runtime.addBoundMethod("org.jruby.RubyString.chop_bang", "chop!");
            runtime.addBoundMethod("org.jruby.RubyString.op_le", "<=");
            runtime.addBoundMethod("org.jruby.RubyString.op_mul", "*");
            runtime.addBoundMethod("org.jruby.RubyString.replace", "replace");
            runtime.addBoundMethod("org.jruby.RubyString.ljust", "ljust");
            runtime.addBoundMethod("org.jruby.RubyString.each_line18", "each_line");
            runtime.addBoundMethod("org.jruby.RubyString.capitalize_bang", "capitalize!");
            runtime.addBoundMethod("org.jruby.RubyString.lstrip_bang", "lstrip!");
            runtime.addBoundMethod("org.jruby.RubyString.each_char18", "each_char");
            runtime.addBoundMethod("org.jruby.RubyString.lstrip", "lstrip");
            runtime.addBoundMethod("org.jruby.RubyString.sub_bang", "sub!");
            runtime.addBoundMethod("org.jruby.RubyString.to_f", "to_f");
            runtime.addBoundMethod("org.jruby.RubyString.length", "length");
            runtime.addBoundMethod("org.jruby.RubyString.delete", "delete");
            runtime.addBoundMethod("org.jruby.RubyString.op_aref", "[]");
            runtime.addBoundMethod("org.jruby.RubyString.rstrip", "rstrip");
            runtime.addBoundMethod("org.jruby.RubyString.chop", "chop");
            runtime.addBoundMethod("org.jruby.RubyString.upcase", "upcase");
            runtime.addBoundMethod("org.jruby.RubyString.reverse_bang", "reverse!");
            runtime.addBoundMethod("org.jruby.RubyString.reverse", "reverse");
            runtime.addBoundMethod("org.jruby.RubyString.inspect", "inspect");
            runtime.addBoundMethod("org.jruby.RubyString.chomp", "chomp");
            runtime.addBoundMethod("org.jruby.RubyString.op_ge", ">=");
            runtime.addBoundMethod("org.jruby.RubyString.squeeze", "squeeze");
            runtime.addBoundMethod("org.jruby.RubyString.oct", "oct");
            runtime.addBoundMethod("org.jruby.RubyString.gsub_bang", "gsub!");
            runtime.addBoundMethod("org.jruby.RubyString.count", "count");
            runtime.addBoundMethod("org.jruby.RubyString.hex", "hex");
            runtime.addBoundMethod("org.jruby.RubyString.strip_bang", "strip!");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyString$i$1$0$op_gt19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_gt19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_gt19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly(">", javaMethod);
            javaMethod = new RubyString$i$0$0$valid_encoding_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "valid_encoding_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "valid_encoding_p", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("valid_encoding?", javaMethod);
            javaMethod = new RubyString$i$0$0$rstrip_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "rstrip_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "rstrip_bang19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("rstrip!", javaMethod);
            javaMethod = new RubyString$i$0$0$downcase_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "downcase_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "downcase_bang19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("downcase!", javaMethod);
            javaMethod = new RubyString$i$1$0$op_plus19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_plus19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_plus19", IRubyObject.class, new Class[] { ThreadContext.class, RubyString.class }, false);
            cls.addMethodAtBootTimeOnly("+", javaMethod);
            javaMethod = new RubyString$i$upto19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "upto19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("upto", javaMethod);
            javaMethod = new RubyString$i$2$0$tr19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "tr19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "tr19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("tr", javaMethod);
            javaMethod = new RubyString$i$0$0$succ_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "succ_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "succ_bang19", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("succ!", javaMethod);
            cls.addMethodAtBootTimeOnly("next!", javaMethod);
            javaMethod = new RubyString$i$op_aset19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "op_aset19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("[]=", javaMethod);
            javaMethod = new RubyString$i$1$0$op_cmp19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_cmp19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_cmp19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=>", javaMethod);
            javaMethod = new RubyString$i$0$0$encoding(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "encoding", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "encoding", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("encoding", javaMethod);
            javaMethod = new RubyString$i$1$0$str_eql_p19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "str_eql_p19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "str_eql_p19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("eql?", javaMethod);
            javaMethod = new RubyString$i$1$0$scan19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "scan19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "scan19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("scan", javaMethod);
            javaMethod = new RubyString$i$slice_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "slice_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("slice!", javaMethod);
            javaMethod = new RubyString$i$2$0$setbyte(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "setbyte", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "setbyte", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("setbyte", javaMethod);
            javaMethod = new RubyString$i$1$0$op_lt19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_lt19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_lt19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<", javaMethod);
            javaMethod = new RubyString$i$0$0$clear(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "clear", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "clear", RubyString.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("clear", javaMethod);
            javaMethod = new RubyString$i$0$0$succ19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "succ19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "succ19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("succ", javaMethod);
            cls.addMethodAtBootTimeOnly("next", javaMethod);
            javaMethod = new RubyString$i$1$0$op_match19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_match19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_match19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("=~", javaMethod);
            javaMethod = new RubyString$i$2$0$tr_s_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "tr_s_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "tr_s_bang19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("tr_s!", javaMethod);
            javaMethod = new RubyString$i$encode(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "encode", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("encode", javaMethod);
            javaMethod = new RubyString$i$0$0$ord(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "ord", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "ord", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("ord", javaMethod);
            javaMethod = new RubyString$i$2$0$tr_s19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "tr_s19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "tr_s19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("tr_s", javaMethod);
            javaMethod = new RubyString$i$1$0$include_p19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "include_p19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "include_p19", RubyBoolean.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("include?", javaMethod);
            javaMethod = new RubyString$i$0$0$downcase19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "downcase19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "downcase19", RubyString.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("downcase", javaMethod);
            javaMethod = new RubyString$i$1$0$getbyte(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "getbyte", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "getbyte", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("getbyte", javaMethod);
            javaMethod = new RubyString$i$delete_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "delete_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("delete!", javaMethod);
            javaMethod = new RubyString$i$split19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "split19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("split", javaMethod);
            javaMethod = new RubyString$i$0$0$chr(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "chr", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "chr", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("chr", javaMethod);
            javaMethod = new RubyString$i$initialize19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "initialize19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            javaMethod = new RubyString$i$0$0$strip19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "strip19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "strip19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("strip", javaMethod);
            javaMethod = new RubyString$i$0$0$to_c(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_c", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "to_c", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("to_c", javaMethod);
            javaMethod = new RubyString$i$0$0$capitalize19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "capitalize19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "capitalize19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("capitalize", javaMethod);
            javaMethod = new RubyString$i$squeeze_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "squeeze_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("squeeze!", javaMethod);
            javaMethod = new RubyString$i$0$0$intern19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "intern19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "intern19", RubySymbol.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("to_sym", javaMethod);
            cls.addMethodAtBootTimeOnly("intern", javaMethod);
            javaMethod = new RubyString$i$rjust19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "rjust19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("rjust", javaMethod);
            javaMethod = new RubyString$i$0$0$ascii_only_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "ascii_only_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "ascii_only_p", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("ascii_only?", javaMethod);
            javaMethod = new RubyString$i$index19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "index19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("index", javaMethod);
            javaMethod = new RubyString$i$lines(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "lines", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("lines", javaMethod);
            javaMethod = new RubyString$i$sub19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "sub19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("sub", javaMethod);
            javaMethod = new RubyString$i$0$0$upcase_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "upcase_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "upcase_bang19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("upcase!", javaMethod);
            javaMethod = new RubyString$i$1$0$casecmp19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "casecmp19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "casecmp19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("casecmp", javaMethod);
            javaMethod = new RubyString$i$1$0$op_equal19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_equal19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_equal19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("==", javaMethod);
            javaMethod = new RubyString$i$0$0$swapcase_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "swapcase_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "swapcase_bang19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("swapcase!", javaMethod);
            javaMethod = new RubyString$i$match19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "match19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("match", javaMethod);
            javaMethod = new RubyString$i$0$0$chars19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "chars19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "chars19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("chars", javaMethod);
            javaMethod = new RubyString$i$rindex19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "rindex19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("rindex", javaMethod);
            javaMethod = new RubyString$i$0$0$dump19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "dump19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "dump19", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("dump", javaMethod);
            javaMethod = new RubyString$i$to_i19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "to_i19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("to_i", javaMethod);
            javaMethod = new RubyString$i$1$0$force_encoding(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "force_encoding", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "force_encoding", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("force_encoding", javaMethod);
            javaMethod = new RubyString$i$0$0$to_r(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_r", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "to_r", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("to_r", javaMethod);
            javaMethod = new RubyString$i$1$0$concat19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "concat19", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "concat19", RubyString.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("concat", javaMethod);
            cls.addMethodAtBootTimeOnly("<<", javaMethod);
            javaMethod = new RubyString$i$chomp_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "chomp_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("chomp!", javaMethod);
            javaMethod = new RubyString$i$0$0$swapcase19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "swapcase19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "swapcase19", RubyString.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("swapcase", javaMethod);
            javaMethod = new RubyString$i$gsub19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "gsub19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("gsub", javaMethod);
            javaMethod = new RubyString$i$center19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "center19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("center", javaMethod);
            javaMethod = new RubyString$i$2$0$insert19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 2, "insert19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "insert19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("insert", javaMethod);
            javaMethod = new RubyString$i$0$0$codepoints(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "codepoints", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "codepoints", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("codepoints", javaMethod);
            javaMethod = new RubyString$i$0$0$chop_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "chop_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "chop_bang19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("chop!", javaMethod);
            javaMethod = new RubyString$i$ljust19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "ljust19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("ljust", javaMethod);
            javaMethod = new RubyString$i$1$0$op_le19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_le19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_le19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=", javaMethod);
            javaMethod = new RubyString$i$1$0$op_mul19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_mul19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_mul19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("*", javaMethod);
            javaMethod = new RubyString$i$1$0$replace19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "replace19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "replace19", RubyString.class, new Class[] { IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("replace", javaMethod);
            cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
            javaMethod = new RubyString$i$each_line19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "each_line19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("each_line", javaMethod);
            javaMethod = new RubyString$i$0$0$capitalize_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "capitalize_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "capitalize_bang19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("capitalize!", javaMethod);
            javaMethod = new RubyString$i$0$0$lstrip_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "lstrip_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "lstrip_bang19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("lstrip!", javaMethod);
            javaMethod = new RubyString$i$0$0$each_char19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "each_char19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "each_char19", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("each_char", javaMethod);
            javaMethod = new RubyString$i$0$0$lstrip19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "lstrip19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "lstrip19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("lstrip", javaMethod);
            javaMethod = new RubyString$i$sub_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "sub_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("sub!", javaMethod);
            javaMethod = new RubyString$i$0$0$to_f19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_f19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "to_f19", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("to_f", javaMethod);
            javaMethod = new RubyString$i$0$0$length19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "length19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "length19", RubyFixnum.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("length", javaMethod);
            cls.addMethodAtBootTimeOnly("size", javaMethod);
            javaMethod = new RubyString$i$delete19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "delete19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("delete", javaMethod);
            javaMethod = new RubyString$i$op_aref19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "op_aref19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("[]", javaMethod);
            cls.addMethodAtBootTimeOnly("slice", javaMethod);
            javaMethod = new RubyString$i$0$0$rstrip19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "rstrip19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "rstrip19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("rstrip", javaMethod);
            javaMethod = new RubyString$i$0$0$chop19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "chop19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "chop19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("chop", javaMethod);
            javaMethod = new RubyString$i$0$0$upcase19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "upcase19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "upcase19", RubyString.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("upcase", javaMethod);
            javaMethod = new RubyString$i$0$0$reverse_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "reverse_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "reverse_bang19", RubyString.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("reverse!", javaMethod);
            javaMethod = new RubyString$i$0$0$reverse19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "reverse19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "reverse19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("reverse", javaMethod);
            javaMethod = new RubyString$i$0$0$inspect19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "inspect19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "inspect19", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("inspect", javaMethod);
            javaMethod = new RubyString$i$chomp19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "chomp19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("chomp", javaMethod);
            javaMethod = new RubyString$i$1$0$op_ge19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_ge19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "op_ge19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly(">=", javaMethod);
            javaMethod = new RubyString$i$encode_bang(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "encode_bang", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("encode!", javaMethod);
            javaMethod = new RubyString$i$squeeze19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "squeeze19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("squeeze", javaMethod);
            javaMethod = new RubyString$i$0$0$oct19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "oct19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "oct19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("oct", javaMethod);
            javaMethod = new RubyString$i$gsub_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "gsub_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("gsub!", javaMethod);
            javaMethod = new RubyString$i$0$0$each_codepoint(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "each_codepoint", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "each_codepoint", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("each_codepoint", javaMethod);
            javaMethod = new RubyString$i$count19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "count19", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("count", javaMethod);
            javaMethod = new RubyString$i$0$0$hex19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "hex19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "hex19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("hex", javaMethod);
            javaMethod = new RubyString$i$0$0$strip_bang19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "strip_bang19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyString.class, "strip_bang19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("strip!", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyString.op_gt19", ">");
            runtime.addBoundMethod("org.jruby.RubyString.valid_encoding_p", "valid_encoding?");
            runtime.addBoundMethod("org.jruby.RubyString.rstrip_bang19", "rstrip!");
            runtime.addBoundMethod("org.jruby.RubyString.downcase_bang19", "downcase!");
            runtime.addBoundMethod("org.jruby.RubyString.op_plus19", "+");
            runtime.addBoundMethod("org.jruby.RubyString.upto19", "upto");
            runtime.addBoundMethod("org.jruby.RubyString.tr19", "tr");
            runtime.addBoundMethod("org.jruby.RubyString.succ_bang19", "succ!");
            runtime.addBoundMethod("org.jruby.RubyString.op_aset19", "[]=");
            runtime.addBoundMethod("org.jruby.RubyString.op_cmp19", "<=>");
            runtime.addBoundMethod("org.jruby.RubyString.encoding", "encoding");
            runtime.addBoundMethod("org.jruby.RubyString.str_eql_p19", "eql?");
            runtime.addBoundMethod("org.jruby.RubyString.scan19", "scan");
            runtime.addBoundMethod("org.jruby.RubyString.slice_bang19", "slice!");
            runtime.addBoundMethod("org.jruby.RubyString.setbyte", "setbyte");
            runtime.addBoundMethod("org.jruby.RubyString.op_lt19", "<");
            runtime.addBoundMethod("org.jruby.RubyString.clear", "clear");
            runtime.addBoundMethod("org.jruby.RubyString.succ19", "succ");
            runtime.addBoundMethod("org.jruby.RubyString.op_match19", "=~");
            runtime.addBoundMethod("org.jruby.RubyString.tr_s_bang19", "tr_s!");
            runtime.addBoundMethod("org.jruby.RubyString.encode", "encode");
            runtime.addBoundMethod("org.jruby.RubyString.ord", "ord");
            runtime.addBoundMethod("org.jruby.RubyString.tr_s19", "tr_s");
            runtime.addBoundMethod("org.jruby.RubyString.include_p19", "include?");
            runtime.addBoundMethod("org.jruby.RubyString.downcase19", "downcase");
            runtime.addBoundMethod("org.jruby.RubyString.getbyte", "getbyte");
            runtime.addBoundMethod("org.jruby.RubyString.delete_bang19", "delete!");
            runtime.addBoundMethod("org.jruby.RubyString.split19", "split");
            runtime.addBoundMethod("org.jruby.RubyString.chr", "chr");
            runtime.addBoundMethod("org.jruby.RubyString.initialize19", "initialize");
            runtime.addBoundMethod("org.jruby.RubyString.strip19", "strip");
            runtime.addBoundMethod("org.jruby.RubyString.to_c", "to_c");
            runtime.addBoundMethod("org.jruby.RubyString.capitalize19", "capitalize");
            runtime.addBoundMethod("org.jruby.RubyString.squeeze_bang19", "squeeze!");
            runtime.addBoundMethod("org.jruby.RubyString.intern19", "to_sym");
            runtime.addBoundMethod("org.jruby.RubyString.rjust19", "rjust");
            runtime.addBoundMethod("org.jruby.RubyString.ascii_only_p", "ascii_only?");
            runtime.addBoundMethod("org.jruby.RubyString.index19", "index");
            runtime.addBoundMethod("org.jruby.RubyString.lines", "lines");
            runtime.addBoundMethod("org.jruby.RubyString.sub19", "sub");
            runtime.addBoundMethod("org.jruby.RubyString.upcase_bang19", "upcase!");
            runtime.addBoundMethod("org.jruby.RubyString.casecmp19", "casecmp");
            runtime.addBoundMethod("org.jruby.RubyString.op_equal19", "==");
            runtime.addBoundMethod("org.jruby.RubyString.swapcase_bang19", "swapcase!");
            runtime.addBoundMethod("org.jruby.RubyString.match19", "match");
            runtime.addBoundMethod("org.jruby.RubyString.chars19", "chars");
            runtime.addBoundMethod("org.jruby.RubyString.rindex19", "rindex");
            runtime.addBoundMethod("org.jruby.RubyString.dump19", "dump");
            runtime.addBoundMethod("org.jruby.RubyString.to_i19", "to_i");
            runtime.addBoundMethod("org.jruby.RubyString.force_encoding", "force_encoding");
            runtime.addBoundMethod("org.jruby.RubyString.to_r", "to_r");
            runtime.addBoundMethod("org.jruby.RubyString.concat19", "concat");
            runtime.addBoundMethod("org.jruby.RubyString.chomp_bang19", "chomp!");
            runtime.addBoundMethod("org.jruby.RubyString.swapcase19", "swapcase");
            runtime.addBoundMethod("org.jruby.RubyString.gsub19", "gsub");
            runtime.addBoundMethod("org.jruby.RubyString.center19", "center");
            runtime.addBoundMethod("org.jruby.RubyString.insert19", "insert");
            runtime.addBoundMethod("org.jruby.RubyString.codepoints", "codepoints");
            runtime.addBoundMethod("org.jruby.RubyString.chop_bang19", "chop!");
            runtime.addBoundMethod("org.jruby.RubyString.ljust19", "ljust");
            runtime.addBoundMethod("org.jruby.RubyString.op_le19", "<=");
            runtime.addBoundMethod("org.jruby.RubyString.op_mul19", "*");
            runtime.addBoundMethod("org.jruby.RubyString.replace19", "replace");
            runtime.addBoundMethod("org.jruby.RubyString.each_line19", "each_line");
            runtime.addBoundMethod("org.jruby.RubyString.capitalize_bang19", "capitalize!");
            runtime.addBoundMethod("org.jruby.RubyString.lstrip_bang19", "lstrip!");
            runtime.addBoundMethod("org.jruby.RubyString.each_char19", "each_char");
            runtime.addBoundMethod("org.jruby.RubyString.lstrip19", "lstrip");
            runtime.addBoundMethod("org.jruby.RubyString.sub_bang19", "sub!");
            runtime.addBoundMethod("org.jruby.RubyString.to_f19", "to_f");
            runtime.addBoundMethod("org.jruby.RubyString.length19", "length");
            runtime.addBoundMethod("org.jruby.RubyString.delete19", "delete");
            runtime.addBoundMethod("org.jruby.RubyString.op_aref19", "[]");
            runtime.addBoundMethod("org.jruby.RubyString.rstrip19", "rstrip");
            runtime.addBoundMethod("org.jruby.RubyString.chop19", "chop");
            runtime.addBoundMethod("org.jruby.RubyString.upcase19", "upcase");
            runtime.addBoundMethod("org.jruby.RubyString.reverse_bang19", "reverse!");
            runtime.addBoundMethod("org.jruby.RubyString.reverse19", "reverse");
            runtime.addBoundMethod("org.jruby.RubyString.inspect19", "inspect");
            runtime.addBoundMethod("org.jruby.RubyString.chomp19", "chomp");
            runtime.addBoundMethod("org.jruby.RubyString.op_ge19", ">=");
            runtime.addBoundMethod("org.jruby.RubyString.encode_bang", "encode!");
            runtime.addBoundMethod("org.jruby.RubyString.squeeze19", "squeeze");
            runtime.addBoundMethod("org.jruby.RubyString.oct19", "oct");
            runtime.addBoundMethod("org.jruby.RubyString.gsub_bang19", "gsub!");
            runtime.addBoundMethod("org.jruby.RubyString.each_codepoint", "each_codepoint");
            runtime.addBoundMethod("org.jruby.RubyString.count19", "count");
            runtime.addBoundMethod("org.jruby.RubyString.hex19", "hex");
            runtime.addBoundMethod("org.jruby.RubyString.strip_bang19", "strip!");
        }
    }
    
    static {
        ASTInspector.addScopeAwareMethods("index", "sub!", "sub", "[]", "slice", "split", "[]=", "match", "rindex", "scan", "slice!", "to_r", "to_c", "gsub", "=~", "gsub!");
    }
}
