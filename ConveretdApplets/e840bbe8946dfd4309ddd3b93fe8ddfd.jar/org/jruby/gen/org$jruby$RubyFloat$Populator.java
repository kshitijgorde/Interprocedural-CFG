// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyFloat$i$1$0$divmod19;
import org.jruby.RubyFloat$i$0$0$numerator;
import org.jruby.RubyFloat$i$0$0$denominator;
import org.jruby.RubyFloat$i$1$0$op_mod19;
import org.jruby.RubyFloat$i$1$0$op_pow19;
import org.jruby.RubyFloat$i$1$0$magnitude;
import org.jruby.RubyFloat$i$0$1$rationalize;
import org.jruby.RubyFloat$i$0$1$round;
import org.jruby.RubyFloat$i$0$0$to_r;
import org.jruby.RubyFloat$i$0$0$magnitude;
import org.jruby.RubyFloat$i$1$0$divmod;
import org.jruby.RubyFloat$i$1$0$op_mod;
import org.jruby.RubyFloat$i$0$0$nan_p;
import org.jruby.RubyFloat$i$0$0$finite_p;
import org.jruby.RubyFloat$i$1$0$op_ge;
import org.jruby.RubyFloat$i$1$0$coerce;
import org.jruby.RubyFloat$i$0$0$ceil;
import org.jruby.RubyFloat$i$1$0$op_minus;
import org.jruby.RubyFixnum;
import org.jruby.RubyFloat$i$0$0$hash;
import org.jruby.RubyFloat$i$0$0$floor;
import org.jruby.RubyFloat$i$0$0$infinite_p;
import org.jruby.RubyFloat$i$0$0$to_f;
import org.jruby.RubyFloat$i$1$0$op_fdiv;
import org.jruby.RubyFloat$i$1$0$op_le;
import org.jruby.RubyFloat$i$1$0$op_mul;
import org.jruby.RubyFloat$i$1$0$op_lt;
import org.jruby.RubyFloat$i$0$0$truncate;
import org.jruby.RubyFloat$i$1$0$eql_p;
import org.jruby.RubyFloat$i$1$0$op_cmp;
import org.jruby.RubyFloat$i$0$0$to_s;
import org.jruby.RubyFloat$i$1$0$op_pow;
import org.jruby.RubyFloat$i$1$0$op_equal;
import org.jruby.RubyFloat$i$0$0$zero_p;
import org.jruby.RubyFloat$i$0$0$round;
import org.jruby.RubyFloat$i$1$0$op_plus;
import org.jruby.RubyFloat$i$0$0$op_uminus;
import org.jruby.RubyFloat$i$0$0$abs;
import org.jruby.RubyFloat$i$1$0$op_gt;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyFloat;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyFloat$s$1$0$induced_from;
import org.jruby.runtime.Visibility;
import org.jruby.CompatVersion;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyFloat$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            final JavaMethod javaMethod = new RubyFloat$s$1$0$induced_from(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "induced_from", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "induced_from", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("induced_from", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFloat.induced_from", "induced_from");
        }
        JavaMethod javaMethod = new RubyFloat$i$1$0$op_gt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_gt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">", javaMethod);
        javaMethod = new RubyFloat$i$0$0$abs(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "abs", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "abs", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("abs", javaMethod);
        javaMethod = new RubyFloat$i$0$0$op_uminus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "op_uminus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_uminus", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("-@", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_plus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_plus", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new RubyFloat$i$0$0$round(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "round", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "round", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("round", javaMethod);
        javaMethod = new RubyFloat$i$0$0$zero_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "zero_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "zero_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("zero?", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_equal(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_pow(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_pow", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_pow", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("**", javaMethod);
        javaMethod = new RubyFloat$i$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "to_s", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_cmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new RubyFloat$i$1$0$eql_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "eql_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "eql_p", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("eql?", javaMethod);
        javaMethod = new RubyFloat$i$0$0$truncate(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "truncate", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "truncate", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("truncate", javaMethod);
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        cls.addMethodAtBootTimeOnly("to_int", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_lt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_lt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_mul(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_mul", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_le(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_le", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_fdiv(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_fdiv", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_fdiv", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("/", javaMethod);
        javaMethod = new RubyFloat$i$0$0$to_f(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "to_f", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new RubyFloat$i$0$0$infinite_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "infinite_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "infinite_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("infinite?", javaMethod);
        javaMethod = new RubyFloat$i$0$0$floor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "floor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "floor", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("floor", javaMethod);
        javaMethod = new RubyFloat$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "hash", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_minus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_minus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_minus", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("-", javaMethod);
        javaMethod = new RubyFloat$i$0$0$ceil(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "ceil", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "ceil", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("ceil", javaMethod);
        javaMethod = new RubyFloat$i$1$0$coerce(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "coerce", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "coerce", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("coerce", javaMethod);
        javaMethod = new RubyFloat$i$1$0$op_ge(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "op_ge", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">=", javaMethod);
        javaMethod = new RubyFloat$i$0$0$finite_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "finite_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "finite_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("finite?", javaMethod);
        javaMethod = new RubyFloat$i$0$0$nan_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "nan_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFloat.class, "nan_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("nan?", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFloat.op_gt", ">");
        runtime.addBoundMethod("org.jruby.RubyFloat.abs", "abs");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_uminus", "-@");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_plus", "+");
        runtime.addBoundMethod("org.jruby.RubyFloat.round", "round");
        runtime.addBoundMethod("org.jruby.RubyFloat.zero_p", "zero?");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_equal", "==");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_pow", "**");
        runtime.addBoundMethod("org.jruby.RubyFloat.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_cmp", "<=>");
        runtime.addBoundMethod("org.jruby.RubyFloat.eql_p", "eql?");
        runtime.addBoundMethod("org.jruby.RubyFloat.truncate", "truncate");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_lt", "<");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_mul", "*");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_le", "<=");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_fdiv", "/");
        runtime.addBoundMethod("org.jruby.RubyFloat.to_f", "to_f");
        runtime.addBoundMethod("org.jruby.RubyFloat.infinite_p", "infinite?");
        runtime.addBoundMethod("org.jruby.RubyFloat.floor", "floor");
        runtime.addBoundMethod("org.jruby.RubyFloat.hash", "hash");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_minus", "-");
        runtime.addBoundMethod("org.jruby.RubyFloat.ceil", "ceil");
        runtime.addBoundMethod("org.jruby.RubyFloat.coerce", "coerce");
        runtime.addBoundMethod("org.jruby.RubyFloat.op_ge", ">=");
        runtime.addBoundMethod("org.jruby.RubyFloat.finite_p", "finite?");
        runtime.addBoundMethod("org.jruby.RubyFloat.nan_p", "nan?");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFloat$i$1$0$op_mod(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_mod", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "op_mod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("%", javaMethod);
            cls.addMethodAtBootTimeOnly("modulo", javaMethod);
            javaMethod = new RubyFloat$i$1$0$divmod(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "divmod", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "divmod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("divmod", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFloat.op_mod", "%");
            runtime.addBoundMethod("org.jruby.RubyFloat.divmod", "divmod");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFloat$i$0$0$magnitude(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "magnitude", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "magnitude", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("magnitude", javaMethod);
            javaMethod = new RubyFloat$i$0$0$to_r(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_r", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "to_r", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("to_r", javaMethod);
            javaMethod = new RubyFloat$i$0$1$round(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "round", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "round", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("round", javaMethod);
            javaMethod = new RubyFloat$i$0$1$rationalize(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "rationalize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "rationalize", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("rationalize", javaMethod);
            javaMethod = new RubyFloat$i$1$0$magnitude(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "magnitude", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "magnitude", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("quo", javaMethod);
            javaMethod = new RubyFloat$i$1$0$op_pow19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_pow19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "op_pow19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("**", javaMethod);
            javaMethod = new RubyFloat$i$1$0$op_mod19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_mod19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "op_mod19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("%", javaMethod);
            cls.addMethodAtBootTimeOnly("modulo", javaMethod);
            javaMethod = new RubyFloat$i$0$0$denominator(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "denominator", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "denominator", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("denominator", javaMethod);
            javaMethod = new RubyFloat$i$0$0$numerator(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "numerator", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "numerator", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("numerator", javaMethod);
            javaMethod = new RubyFloat$i$1$0$divmod19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "divmod19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFloat.class, "divmod19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("divmod", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFloat.magnitude", "magnitude");
            runtime.addBoundMethod("org.jruby.RubyFloat.to_r", "to_r");
            runtime.addBoundMethod("org.jruby.RubyFloat.round", "round");
            runtime.addBoundMethod("org.jruby.RubyFloat.rationalize", "rationalize");
            runtime.addBoundMethod("org.jruby.RubyFloat.magnitude", "quo");
            runtime.addBoundMethod("org.jruby.RubyFloat.op_pow19", "**");
            runtime.addBoundMethod("org.jruby.RubyFloat.op_mod19", "%");
            runtime.addBoundMethod("org.jruby.RubyFloat.denominator", "denominator");
            runtime.addBoundMethod("org.jruby.RubyFloat.numerator", "numerator");
            runtime.addBoundMethod("org.jruby.RubyFloat.divmod19", "divmod");
        }
    }
}
