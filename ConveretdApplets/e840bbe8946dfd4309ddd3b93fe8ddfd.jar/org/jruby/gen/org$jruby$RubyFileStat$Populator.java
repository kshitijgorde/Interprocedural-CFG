// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyFileStat$i$0$0$worldReadable;
import org.jruby.runtime.ThreadContext;
import org.jruby.RubyFileStat$i$0$0$worldWritable;
import org.jruby.RubyFileStat$i$1$0$initialize19;
import org.jruby.runtime.Block;
import org.jruby.RubyFileStat$i$1$0$initialize;
import org.jruby.CompatVersion;
import org.jruby.RubyFileStat$i$0$0$ino;
import org.jruby.RubyFileStat$i$0$0$directory_p;
import org.jruby.RubyFileStat$i$1$0$initialize_copy;
import org.jruby.RubyFileStat$i$0$0$gid;
import org.jruby.RubyFileStat$i$0$0$chardev_p;
import org.jruby.RubyFileStat$i$0$0$executable_p;
import org.jruby.RubyFileStat$i$0$0$rdev;
import org.jruby.RubyFileStat$i$0$0$sticky_p;
import org.jruby.RubyFileStat$i$0$0$inspect;
import org.jruby.RubyFileStat$i$0$0$size_p;
import org.jruby.RubyFileStat$i$0$0$mtime;
import org.jruby.RubyFileStat$i$0$0$dev;
import org.jruby.RubyFileStat$i$0$0$readable_p;
import org.jruby.RubyFileStat$i$0$0$writable_p;
import org.jruby.RubyFileStat$i$0$0$mode;
import org.jruby.RubyFileStat$i$0$0$uid;
import org.jruby.RubyFileStat$i$0$0$setuid_p;
import org.jruby.RubyFileStat$i$0$0$ctime;
import org.jruby.RubyFileStat$i$0$0$readableReal_p;
import org.jruby.RubyString;
import org.jruby.RubyFileStat$i$0$0$ftype;
import org.jruby.RubyFileStat$i$0$0$devMajor;
import org.jruby.RubyFileStat$i$0$0$size;
import org.jruby.RubyFileStat$i$0$0$rdevMajor;
import org.jruby.RubyFileStat$i$0$0$blocks;
import org.jruby.RubyFileStat$i$0$0$writableReal_p;
import org.jruby.RubyFileStat$i$0$0$pipe_p;
import org.jruby.RubyFileStat$i$0$0$owned_p;
import org.jruby.RubyFileStat$i$1$0$cmp;
import org.jruby.RubyFileStat$i$0$0$rdevMinor;
import org.jruby.RubyFixnum;
import org.jruby.RubyFileStat$i$0$0$blksize;
import org.jruby.RubyBoolean;
import org.jruby.RubyFileStat$i$0$0$file_p;
import org.jruby.RubyFileStat$i$0$0$zero_p;
import org.jruby.RubyFileStat$i$0$0$group_owned_p;
import org.jruby.RubyFileStat$i$0$0$devMinor;
import org.jruby.RubyFileStat$i$0$0$blockdev_p;
import org.jruby.RubyFileStat$i$0$0$nlink;
import org.jruby.RubyFileStat$i$0$0$atime;
import org.jruby.RubyFileStat$i$0$0$setgid_p;
import org.jruby.RubyFileStat$i$0$0$socket_p;
import org.jruby.RubyFileStat$i$0$0$symlink_p;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyFileStat;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyFileStat$i$0$0$executableReal_p;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyFileStat$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyFileStat$i$0$0$executableReal_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "executableReal_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "executableReal_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("executable_real?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$symlink_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "symlink_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "symlink_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("symlink?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$socket_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "socket_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "socket_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("socket?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$setgid_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "setgid_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "setgid_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("setgid?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$atime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "atime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "atime", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("atime", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$nlink(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "nlink", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "nlink", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("nlink", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$blockdev_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "blockdev_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "blockdev_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("blockdev?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$devMinor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "devMinor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "devMinor", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("dev_minor", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$group_owned_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "group_owned_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "group_owned_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("grpowned?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$zero_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "zero_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "zero_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("zero?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$file_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "file_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "file_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("file?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$blksize(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "blksize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "blksize", RubyFixnum.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("blksize", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$rdevMinor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rdevMinor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "rdevMinor", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("rdev_minor", javaMethod);
        javaMethod = new RubyFileStat$i$1$0$cmp(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "cmp", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "cmp", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$owned_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "owned_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "owned_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("owned?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$pipe_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pipe_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "pipe_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("pipe?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$writableReal_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "writableReal_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "writableReal_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("writable_real?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$blocks(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "blocks", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "blocks", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("blocks", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$rdevMajor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rdevMajor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "rdevMajor", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("rdev_major", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$size(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "size", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "size", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$devMajor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "devMajor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "devMajor", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("dev_major", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$ftype(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "ftype", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "ftype", RubyString.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("ftype", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$readableReal_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "readableReal_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "readableReal_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("readable_real?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$ctime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "ctime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "ctime", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("ctime", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$setuid_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "setuid_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "setuid_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("setuid?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$uid(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "uid", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "uid", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("uid", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$mode(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "mode", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "mode", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("mode", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$writable_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "writable_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "writable_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("writable?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$readable_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "readable_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "readable_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("readable?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$dev(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "dev", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "dev", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("dev", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$mtime(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "mtime", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "mtime", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("mtime", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$size_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "size_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "size_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("size?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "inspect", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$sticky_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "sticky_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "sticky_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("sticky?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$rdev(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rdev", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "rdev", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("rdev", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$executable_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "executable_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "executable_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("executable?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$chardev_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "chardev_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "chardev_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("chardev?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$gid(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "gid", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "gid", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("gid", javaMethod);
        javaMethod = new RubyFileStat$i$1$0$initialize_copy(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "initialize_copy", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "initialize_copy", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("initialize_copy", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$directory_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "directory_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "directory_p", RubyBoolean.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("directory?", javaMethod);
        javaMethod = new RubyFileStat$i$0$0$ino(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "ino", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFileStat.class, "ino", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("ino", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFileStat.executableReal_p", "executable_real?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.symlink_p", "symlink?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.socket_p", "socket?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.setgid_p", "setgid?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.atime", "atime");
        runtime.addBoundMethod("org.jruby.RubyFileStat.nlink", "nlink");
        runtime.addBoundMethod("org.jruby.RubyFileStat.blockdev_p", "blockdev?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.devMinor", "dev_minor");
        runtime.addBoundMethod("org.jruby.RubyFileStat.group_owned_p", "grpowned?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.zero_p", "zero?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.file_p", "file?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.blksize", "blksize");
        runtime.addBoundMethod("org.jruby.RubyFileStat.rdevMinor", "rdev_minor");
        runtime.addBoundMethod("org.jruby.RubyFileStat.cmp", "<=>");
        runtime.addBoundMethod("org.jruby.RubyFileStat.owned_p", "owned?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.pipe_p", "pipe?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.writableReal_p", "writable_real?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.blocks", "blocks");
        runtime.addBoundMethod("org.jruby.RubyFileStat.rdevMajor", "rdev_major");
        runtime.addBoundMethod("org.jruby.RubyFileStat.size", "size");
        runtime.addBoundMethod("org.jruby.RubyFileStat.devMajor", "dev_major");
        runtime.addBoundMethod("org.jruby.RubyFileStat.ftype", "ftype");
        runtime.addBoundMethod("org.jruby.RubyFileStat.readableReal_p", "readable_real?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.ctime", "ctime");
        runtime.addBoundMethod("org.jruby.RubyFileStat.setuid_p", "setuid?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.uid", "uid");
        runtime.addBoundMethod("org.jruby.RubyFileStat.mode", "mode");
        runtime.addBoundMethod("org.jruby.RubyFileStat.writable_p", "writable?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.readable_p", "readable?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.dev", "dev");
        runtime.addBoundMethod("org.jruby.RubyFileStat.mtime", "mtime");
        runtime.addBoundMethod("org.jruby.RubyFileStat.size_p", "size?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyFileStat.sticky_p", "sticky?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.rdev", "rdev");
        runtime.addBoundMethod("org.jruby.RubyFileStat.executable_p", "executable?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.chardev_p", "chardev?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.gid", "gid");
        runtime.addBoundMethod("org.jruby.RubyFileStat.initialize_copy", "initialize_copy");
        runtime.addBoundMethod("org.jruby.RubyFileStat.directory_p", "directory?");
        runtime.addBoundMethod("org.jruby.RubyFileStat.ino", "ino");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFileStat$i$1$0$initialize(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFileStat.class, "initialize", IRubyObject.class, new Class[] { IRubyObject.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFileStat.initialize", "initialize");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFileStat$i$1$0$initialize19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 1, "initialize19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFileStat.class, "initialize19", IRubyObject.class, new Class[] { IRubyObject.class, Block.class }, false);
            cls.addMethodAtBootTimeOnly("initialize", javaMethod);
            javaMethod = new RubyFileStat$i$0$0$worldWritable(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "worldWritable", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFileStat.class, "worldWritable", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("world_writable?", javaMethod);
            javaMethod = new RubyFileStat$i$0$0$worldReadable(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "worldReadable", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFileStat.class, "worldReadable", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("world_readable?", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFileStat.initialize19", "initialize");
            runtime.addBoundMethod("org.jruby.RubyFileStat.worldWritable", "world_writable?");
            runtime.addBoundMethod("org.jruby.RubyFileStat.worldReadable", "world_readable?");
        }
    }
}
