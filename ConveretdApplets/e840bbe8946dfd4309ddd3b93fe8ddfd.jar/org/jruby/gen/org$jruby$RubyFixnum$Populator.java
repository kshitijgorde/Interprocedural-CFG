// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyFixnum$i$1$0$divmod19;
import org.jruby.RubyFixnum$i$0$0$even_p;
import org.jruby.RubyFixnum$i$1$0$op_mod19;
import org.jruby.RubyFixnum$i$1$0$op_le19;
import org.jruby.RubyFixnum$i$1$0$op_lt19;
import org.jruby.RubyFixnum$i$1$0$op_ge19;
import org.jruby.RubyFixnum$i$1$0$div_div19;
import org.jruby.RubyFixnum$i$1$0$op_cmp19;
import org.jruby.RubyFixnum$i$0$0$pred;
import org.jruby.RubyBoolean;
import org.jruby.RubyFixnum$i$0$0$odd_p;
import org.jruby.RubyFixnum$i$1$0$op_equal19;
import org.jruby.RubyFixnum$i$1$0$op_pow_19;
import org.jruby.RubyFixnum$i$0$0$magnitude;
import org.jruby.RubyFixnum$i$1$0$op_gt19;
import org.jruby.RubyFixnum$i$1$0$divmod;
import org.jruby.RubyFixnum$i$1$0$op_mod;
import org.jruby.RubyFixnum$i$1$0$op_equal;
import org.jruby.RubyFixnum$i$1$0$op_le;
import org.jruby.RubyFixnum$i$1$0$quo;
import org.jruby.RubyFixnum$i$1$0$op_lt;
import org.jruby.RubyFixnum$i$1$0$div_div;
import org.jruby.RubyFixnum$i$1$0$op_ge;
import org.jruby.RubyFixnum$i$1$0$op_gt;
import org.jruby.RubyFixnum$i$1$0$op_cmp;
import org.jruby.RubyFixnum$i$1$0$op_mul;
import org.jruby.RubyFixnum$i$0$0$to_sym;
import org.jruby.RubyFixnum$i$0$0$size;
import org.jruby.RubyFixnum$i$1$0$op_and;
import org.jruby.RubyFixnum$i$1$0$op_lshift;
import org.jruby.RubyFixnum$i$1$0$op_or;
import org.jruby.RubyFixnum$i$1$0$op_rshift;
import org.jruby.RubyFixnum$i$1$0$op_minus;
import org.jruby.RubyFixnum$i$0$0$id;
import org.jruby.RubyFixnum$i$1$0$op_pow;
import org.jruby.RubyFixnum$i$to_s;
import org.jruby.RubyFixnum$i$0$0$zero_p;
import org.jruby.runtime.Block;
import org.jruby.RubyFixnum$i$0$0$times;
import org.jruby.RubyFixnum$i$1$0$op_aref;
import org.jruby.RubyFixnum$i$1$0$op_plus;
import org.jruby.RubyFixnum$i$0$0$op_uminus;
import org.jruby.RubyFixnum$i$0$0$to_f;
import org.jruby.RubyFixnum$i$0$0$abs;
import org.jruby.RubyFixnum$i$0$0$op_neg;
import org.jruby.RubyFixnum$i$0$0$id2name;
import org.jruby.RubyFixnum$i$1$0$op_xor;
import org.jruby.runtime.ThreadContext;
import org.jruby.RubyFixnum$i$1$0$op_div;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyFixnum;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyFixnum$s$1$0$induced_from;
import org.jruby.runtime.Visibility;
import org.jruby.CompatVersion;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyFixnum$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            final JavaMethod javaMethod = new RubyFixnum$s$1$0$induced_from(singletonClass, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "induced_from", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "induced_from", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
            singletonClass.addMethodAtBootTimeOnly("induced_from", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFixnum.induced_from", "induced_from");
        }
        JavaMethod javaMethod = new RubyFixnum$i$1$0$op_div(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_div", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_div", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("/", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_xor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_xor", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_xor", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("^", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$id2name(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "id2name", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "id2name", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("id2name", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$op_neg(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "op_neg", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_neg", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("~", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$abs(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "abs", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "abs", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("abs", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$to_f(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "to_f", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$op_uminus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "op_uminus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_uminus", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("-@", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_plus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_plus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_plus", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_aref(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_aref", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("[]", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$times(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "times", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "times", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("times", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$zero_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "zero_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "zero_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("zero?", javaMethod);
        javaMethod = new RubyFixnum$i$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_pow(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_pow", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_pow", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("**", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$id(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "id", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "id", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("id", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_minus(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_minus", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_minus", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("-", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_rshift(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_rshift", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_rshift", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly(">>", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_or(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_or", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_or", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("|", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_lshift(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_lshift", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_lshift", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<<", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_and(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_and", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_and", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("&", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$size(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "size", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "size", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("size", javaMethod);
        javaMethod = new RubyFixnum$i$0$0$to_sym(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_sym", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "to_sym", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_sym", javaMethod);
        javaMethod = new RubyFixnum$i$1$0$op_mul(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyFixnum.class, "op_mul", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_div", "/");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_xor", "^");
        runtime.addBoundMethod("org.jruby.RubyFixnum.id2name", "id2name");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_neg", "~");
        runtime.addBoundMethod("org.jruby.RubyFixnum.abs", "abs");
        runtime.addBoundMethod("org.jruby.RubyFixnum.to_f", "to_f");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_uminus", "-@");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_plus", "+");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_aref", "[]");
        runtime.addBoundMethod("org.jruby.RubyFixnum.times", "times");
        runtime.addBoundMethod("org.jruby.RubyFixnum.zero_p", "zero?");
        runtime.addBoundMethod("org.jruby.RubyFixnum.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_pow", "**");
        runtime.addBoundMethod("org.jruby.RubyFixnum.id", "id");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_minus", "-");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_rshift", ">>");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_or", "|");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_lshift", "<<");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_and", "&");
        runtime.addBoundMethod("org.jruby.RubyFixnum.size", "size");
        runtime.addBoundMethod("org.jruby.RubyFixnum.to_sym", "to_sym");
        runtime.addBoundMethod("org.jruby.RubyFixnum.op_mul", "*");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFixnum$i$1$0$op_cmp(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_cmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=>", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_gt(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_gt", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_gt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly(">", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_ge(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_ge", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_ge", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly(">=", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$div_div(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "div_div", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "div_div", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("div", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_lt(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_lt", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_lt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$quo(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "quo", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "quo", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("quo", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_le(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_le", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_le", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_equal(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("==", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_mod(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_mod", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_mod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("%", javaMethod);
            cls.addMethodAtBootTimeOnly("modulo", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$divmod(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "divmod", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "divmod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("divmod", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_cmp", "<=>");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_gt", ">");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_ge", ">=");
            runtime.addBoundMethod("org.jruby.RubyFixnum.div_div", "div");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_lt", "<");
            runtime.addBoundMethod("org.jruby.RubyFixnum.quo", "quo");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_le", "<=");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_equal", "==");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_mod", "%");
            runtime.addBoundMethod("org.jruby.RubyFixnum.divmod", "divmod");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyFixnum$i$1$0$op_gt19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_gt19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_gt19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly(">", javaMethod);
            javaMethod = new RubyFixnum$i$0$0$magnitude(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "magnitude", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "magnitude", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("magnitude", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_pow_19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_pow_19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_pow_19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("**", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_equal19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_equal19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_equal19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("==", javaMethod);
            javaMethod = new RubyFixnum$i$0$0$odd_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "odd_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "odd_p", RubyBoolean.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("odd?", javaMethod);
            javaMethod = new RubyFixnum$i$0$0$pred(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "pred", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "pred", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("pred", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_cmp19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_cmp19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_cmp19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=>", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$div_div19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "div_div19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "div_div19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("div", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_ge19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_ge19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_ge19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly(">=", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_lt19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_lt19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_lt19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_le19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_le19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_le19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$op_mod19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_mod19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "op_mod19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("%", javaMethod);
            cls.addMethodAtBootTimeOnly("modulo", javaMethod);
            javaMethod = new RubyFixnum$i$0$0$even_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "even_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "even_p", RubyBoolean.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("even?", javaMethod);
            javaMethod = new RubyFixnum$i$1$0$divmod19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "divmod19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyFixnum.class, "divmod19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("divmod", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_gt19", ">");
            runtime.addBoundMethod("org.jruby.RubyFixnum.magnitude", "magnitude");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_pow_19", "**");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_equal19", "==");
            runtime.addBoundMethod("org.jruby.RubyFixnum.odd_p", "odd?");
            runtime.addBoundMethod("org.jruby.RubyFixnum.pred", "pred");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_cmp19", "<=>");
            runtime.addBoundMethod("org.jruby.RubyFixnum.div_div19", "div");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_ge19", ">=");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_lt19", "<");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_le19", "<=");
            runtime.addBoundMethod("org.jruby.RubyFixnum.op_mod19", "%");
            runtime.addBoundMethod("org.jruby.RubyFixnum.even_p", "even?");
            runtime.addBoundMethod("org.jruby.RubyFixnum.divmod19", "divmod");
        }
    }
}
