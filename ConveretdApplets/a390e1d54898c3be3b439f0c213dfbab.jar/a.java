import java.awt.Image;
import java.awt.Graphics;

// 
// Decompiled by Procyon v0.5.30
// 

public class a
{
    private final int for = 1421;
    private Graphics if;
    private statisk[] new;
    private dynamisk[] int;
    byte[] a;
    private Image[] do;
    
    a() {
        this.new = new statisk[473];
        this.int = new dynamisk[473];
    }
    
    public Graphics a() {
        return this.if.create();
    }
    
    public statisk[] a(final int n, final Image[] do1) {
        this.do = do1;
        this.a = new byte[1422];
        this.a = this.a(n);
        int n2 = 5;
        int n3 = 35;
        int n4 = 2;
        int n5 = 0;
        for (int i = 0; i < 1421; ++i) {
            switch (this.a[i]) {
                case 9: {}
                case 0: {
                    this.int[0] = new lSkib(n2, n3, do1[0], do1[6], 30, 10);
                    break;
                }
                case 1: {
                    this.int[1] = new sSkib(n2, n3, do1[1], do1[7], 30, 20);
                    break;
                }
                case 2: {
                    this.int[n4] = new lKlods(n2, n3, do1[2], 10, 10);
                    ++n4;
                    break;
                }
                case 3: {
                    this.int[n4] = new sKlods(n2, n3, do1[3], 20, 20);
                    ++n4;
                    break;
                }
                case 4: {
                    this.new[n5] = new lSten(n2, n3, do1[4], 10, 10);
                    ++n5;
                    break;
                }
                case 5: {
                    this.new[n5] = new sSten(n2, n3, do1[5], 20, 20);
                    ++n5;
                    break;
                }
            }
            if ((i + 1) % 49 == 0 && i + 1 != 0) {
                n3 += 10;
                n2 = 5;
            }
            else {
                n2 += 10;
            }
        }
        return this.new;
    }
    
    public statisk[] if(final int n) {
        this.a = new byte[1422];
        this.a = this.a(n);
        this.new = new statisk[473];
        this.int = new dynamisk[473];
        int n2 = 5;
        int n3 = 35;
        int n4 = 2;
        int n5 = 0;
        for (int i = 0; i < 1421; ++i) {
            switch (this.a[i]) {
                case 9: {}
                case 0: {
                    this.int[0] = new lSkib(n2, n3, this.do[0], this.do[6], 30, 10);
                    break;
                }
                case 1: {
                    this.int[1] = new sSkib(n2, n3, this.do[1], this.do[7], 30, 20);
                    break;
                }
                case 2: {
                    this.int[n4] = new lKlods(n2, n3, this.do[2], 10, 10);
                    ++n4;
                    break;
                }
                case 3: {
                    this.int[n4] = new sKlods(n2, n3, this.do[3], 20, 20);
                    ++n4;
                    break;
                }
                case 4: {
                    this.new[n5] = new lSten(n2, n3, this.do[4], 10, 10);
                    ++n5;
                    break;
                }
                case 5: {
                    this.new[n5] = new sSten(n2, n3, this.do[5], 20, 20);
                    ++n5;
                    break;
                }
            }
            if ((i + 1) % 49 == 0 && i + 1 != 0) {
                n3 += 10;
                n2 = 5;
            }
            else {
                n2 += 10;
            }
        }
        return this.new;
    }
    
    public boolean a(final e e) {
        int n = e.for() - 5;
        int n2 = e.if() - 35;
        int n3 = e.do() / 10;
        int n4 = e.int() / 10;
        if (n % 10 != 0) {
            n -= 5;
            ++n3;
        }
        if (n2 % 10 != 0) {
            n2 -= 5;
            ++n4;
        }
        final int n5 = n / 10;
        final int n6 = n2 / 10;
        for (int i = 0; i < n4; ++i) {
            for (int j = 0; j < n3; ++j) {
                final byte b = this.a[(n6 + i) * 49 + (n5 + j)];
                if (b > 3 && b < 9) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public statisk[] if() {
        this.new = new statisk[473];
        this.int = new dynamisk[473];
        int n = 5;
        int n2 = 35;
        int n3 = 2;
        int n4 = 0;
        for (int i = 0; i < 1421; ++i) {
            switch (this.a[i]) {
                case 9: {}
                case 0: {
                    this.int[0] = new lSkib(n, n2, this.do[0], this.do[6], 30, 10);
                    break;
                }
                case 1: {
                    this.int[1] = new sSkib(n, n2, this.do[1], this.do[7], 30, 20);
                    break;
                }
                case 2: {
                    this.int[n3] = new lKlods(n, n2, this.do[2], 10, 10);
                    ++n3;
                    break;
                }
                case 3: {
                    this.int[n3] = new sKlods(n, n2, this.do[3], 20, 20);
                    ++n3;
                    break;
                }
                case 4: {
                    this.new[n4] = new lSten(n, n2, this.do[4], 10, 10);
                    ++n4;
                    break;
                }
                case 5: {
                    this.new[n4] = new sSten(n, n2, this.do[5], 20, 20);
                    ++n4;
                    break;
                }
            }
            if ((i + 1) % 49 == 0 && i + 1 != 0) {
                n2 += 10;
                n = 5;
            }
            else {
                n += 10;
            }
        }
        return this.new;
    }
    
    public dynamisk[] for() {
        return this.int;
    }
    
    public statisk[] do() {
        return this.new;
    }
    
    private byte[] a(final int n) {
        final byte[] array = null;
        if (n == 0) {
            return new byte[] { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 0, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 4, 4, 5, 7, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 5, 7, 9, 9, 9, 7, 7, 5, 7, 7, 7, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 3, 9, 4, 9, 9, 9, 4, 7, 7, 9, 9, 9, 4, 4, 7, 7, 4, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 1, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 9, 9, 9, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 5, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 7, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 3, 9, 5, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 4, 4, 4, 9, 9, 4, 4, 4, 4, 9, 9, 7, 7, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 4, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 2, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 5, 7, 9, 2, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 4, 4, 4, 9, 4, 4, 4, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 4, 9, 9, 9, 9, 4, 9, 9, 7, 7, 9, 9, 9, 9, 2, 5, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 4, 9, 9, 4, 9, 9, 4, 4, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 2, 2, 2, 9, 9, 9, 2, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 };
        }
        if (n == 1) {
            return new byte[] { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 1, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 7, 7, 9, 9, 9, 5, 7, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 7, 7, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 4, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 5, 7, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 4, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 4, 4, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 7, 7, 9, 9, 9, 5, 7, 9, 9, 9, 4, 5, 7, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 5, 7, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 4, 4, 9, 9, 9, 7, 7, 9, 9, 9, 4, 7, 7, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 7, 7, 9, 9, 9, 5, 7, 9, 9, 9, 4, 4, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 4, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 4, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 7, 5, 7, 5, 7, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 7, 7, 7, 7, 7, 7, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 5, 7, 5, 7, 5, 7, 4, 3, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4, 9, 9, 9, 4, 4, 5, 7, 5, 7, 5, 7, 5, 7, 4, 9, 9, 9, 9, 4, 4, 5, 7, 4, 4, 4, 5, 7, 9, 9, 9, 4, 4, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 4, 9, 3, 9, 9, 5, 7, 7, 7, 5, 7, 4, 7, 7, 9, 9, 9, 4, 9, 9, 9, 9, 2, 3, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 4, 4, 7, 7, 4, 4, 4, 9, 9, 9, 4, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 5, 7, 4, 4, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 5, 7, 9, 9, 9, 4, 9, 9, 9, 7, 7, 9, 9, 9, 2, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 9, 9, 9, 5, 7, 5, 7, 5, 7, 5, 7, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 5, 7, 5, 7, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 4, 9, 9, 9, 5, 7, 5, 7, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 9, 9, 9, 5, 7, 5, 7, 5, 7, 5, 7, 4, 9, 9, 9, 5, 7, 9, 9, 9, 9, 5, 7, 9, 9, 9, 4, 9, 9, 9, 7, 7, 7, 7, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 5, 7, 4, 4, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 4, 9, 9, 9, 7, 7, 9, 9, 9, 9, 7, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 7, 7, 4, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 2, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 };
        }
        if (n == 2) {
            return new byte[] { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 5, 7, 5, 7, 4, 4, 4, 4, 4, 5, 7, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 4, 4, 4, 3, 9, 9, 5, 7, 9, 9, 9, 7, 7, 7, 7, 5, 7, 9, 9, 9, 7, 7, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 5, 7, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 4, 4, 4, 9, 7, 7, 9, 9, 9, 5, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 7, 7, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 2, 9, 3, 9, 9, 7, 7, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 3, 9, 9, 4, 9, 9, 9, 9, 4, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 4, 9, 9, 4, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 2, 4, 9, 9, 9, 2, 5, 7, 4, 5, 7, 4, 4, 5, 7, 4, 4, 9, 3, 9, 2, 9, 9, 4, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 9, 2, 9, 9, 9, 4, 9, 9, 9, 9, 7, 7, 4, 7, 7, 9, 9, 7, 7, 4, 4, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 2, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 4, 9, 9, 9, 2, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 2, 2, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 4, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 9, 4, 7, 7, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 4, 4, 4, 9, 9, 4, 4, 9, 9, 9, 4, 4, 5, 7, 5, 7, 5, 7, 5, 7, 9, 3, 9, 9, 4, 4, 4, 9, 9, 9, 5, 7, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 4, 4, 5, 7, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 4, 4, 4, 5, 7, 4, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 7, 7, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 7, 7, 4, 4, 4, 5, 7, 9, 9, 9, 4, 4, 4, 4, 3, 9, 9, 4, 4, 4, 9, 9, 9, 9, 9, 4, 4, 5, 7, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 4, 7, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 7, 7, 5, 7, 4, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 5, 7, 5, 7, 9, 2, 9, 4, 4, 9, 4, 5, 7, 5, 7, 5, 7, 4, 4, 9, 9, 9, 9, 9, 3, 9, 7, 7, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 7, 7, 7, 7, 9, 9, 9, 4, 9, 9, 9, 7, 7, 7, 7, 7, 7, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 4, 4, 9, 9, 9, 9, 2, 3, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 5, 7, 4, 9, 9, 9, 4, 4, 4, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 7, 7, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 9, 9, 9, 4, 9, 9, 9, 1, 9, 9, 4, 4, 9, 9, 9, 9, 9, 3, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 0, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 };
        }
        if (n == 3) {
            return new byte[] { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 4, 3, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 9, 9, 9, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 2, 2, 2, 2, 2, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 2, 9, 4, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 9, 9, 9, 3, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 5, 7, 2, 9, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 7, 7, 9, 9, 9, 9, 9, 2, 9, 9, 9, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 2, 9, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 3, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 5, 7, 4, 4, 4, 9, 9, 2, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 7, 7, 4, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 9, 2, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 4, 4, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 4, 7, 7, 4, 4, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 3, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 7, 7, 9, 2, 9, 4, 4, 4, 9, 9, 9, 2, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 3, 9, 9, 9, 9, 9, 4, 9, 9, 9, 5, 7, 9, 9, 9, 4, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 7, 7, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 2, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 4, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 5, 7, 9, 9, 9, 5, 7, 4, 9, 9, 9, 2, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 2, 9, 9, 9, 4, 7, 7, 9, 9, 9, 9, 4, 9, 9, 9, 4, 9, 9, 9, 7, 7, 9, 9, 9, 7, 7, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 3, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 5, 7, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 7, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 2, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 7, 7, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 3, 9, 4, 4, 4, 4, 4, 4, 4, 9, 2, 9, 4, 9, 9, 9, 9, 5, 7, 9, 9, 5, 7, 4, 5, 7, 9, 9, 9, 9, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 2, 9, 9, 9, 7, 7, 9, 9, 7, 7, 4, 7, 7, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 };
        }
        if (n == 4) {
            return new byte[] { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 0, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 4, 4, 9, 9, 9, 9, 2, 9, 9, 9, 5, 7, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 4, 9, 9, 9, 5, 7, 5, 7, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 4, 9, 9, 9, 7, 7, 7, 7, 4, 4, 5, 7, 9, 9, 9, 4, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 4, 4, 9, 9, 9, 4, 9, 9, 9, 4, 4, 5, 7, 5, 7, 7, 7, 9, 9, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 9, 9, 9, 9, 2, 9, 9, 9, 4, 7, 7, 7, 7, 4, 4, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 5, 7, 4, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 7, 7, 4, 4, 4, 4, 5, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 2, 4, 4, 4, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 5, 7, 4, 4, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 7, 7, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 2, 5, 7, 4, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 2, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 5, 7, 4, 9, 9, 4, 4, 3, 9, 9, 4, 9, 9, 9, 5, 7, 4, 9, 7, 7, 4, 4, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 3, 9, 4, 9, 9, 9, 4, 9, 9, 9, 7, 7, 4, 9, 4, 4, 4, 9, 9, 9, 4, 3, 9, 9, 7, 7, 4, 9, 9, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 2, 9, 3, 9, 9, 9, 9, 9, 9, 5, 7, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 4, 4, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 4, 4, 9, 9, 9, 9, 2, 3, 9, 9, 9, 9, 7, 7, 3, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 5, 7, 4, 4, 4, 9, 9, 9, 4, 4, 4, 4, 4, 9, 9, 9, 4, 5, 7, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 9, 9, 4, 9, 9, 9, 9, 9, 2, 9, 9, 9, 2, 9, 9, 7, 7, 4, 5, 7, 9, 9, 9, 5, 7, 9, 9, 9, 7, 7, 9, 9, 9, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 4, 4, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 4, 4, 7, 7, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 2, 9, 9, 9, 2, 9, 9, 9, 9, 9, 5, 7, 9, 9, 4, 9, 9, 9, 7, 7, 4, 4, 5, 7, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 2, 9, 9, 7, 7, 9, 9, 4, 9, 9, 9, 9, 9, 4, 4, 7, 7, 9, 9, 9, 9, 2, 9, 9, 9, 5, 7, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 3, 9, 4, 3, 9, 9, 9, 9, 4, 4, 5, 7, 9, 9, 9, 9, 4, 9, 9, 9, 7, 7, 9, 9, 9, 5, 7, 5, 9, 5, 9, 5, 9, 5, 9, 5, 9, 5, 7, 4, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 4, 4, 7, 7, 9, 9, 9, 3, 9, 9, 9, 9, 4, 4, 9, 9, 9, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 4, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 2, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 4, 4, 9, 9, 9, 9, 9, 5, 7, 9, 9, 9, 4, 9, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 9, 9, 9, 9, 9, 9, 9, 7, 7, 4, 4, 9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 4, 4, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 7, 4, 4, 9, 9, 4, 4, 5, 7, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 4, 9, 9, 9, 9, 4, 7, 7 };
        }
        return array;
    }
}
