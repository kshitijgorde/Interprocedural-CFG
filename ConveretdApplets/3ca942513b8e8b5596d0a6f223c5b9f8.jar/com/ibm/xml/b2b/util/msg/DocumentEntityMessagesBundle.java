// 
// Decompiled by Procyon v0.5.30
// 

package com.ibm.xml.b2b.util.msg;

public final class DocumentEntityMessagesBundle extends ErrorMessageBundle
{
    private static final Object[][] CONTENTS;
    private static final String[] MESSAGE_KEYS;
    
    protected Object[][] getContents() {
        return DocumentEntityMessagesBundle.CONTENTS;
    }
    
    public String getString(final int n) {
        return this.getString(DocumentEntityMessagesBundle.MESSAGE_KEYS[n]);
    }
    
    static {
        CONTENTS = new Object[][] { { "BadMessageKey", "The error message corresponding to the message key can not be found." }, { "FormatFailed", "An internal error occurred while formatting the following message:\n  " }, { "RootElementRequired", "The root element is required in a well-formed document." }, { "InvalidCharInCDSect", "An invalid XML character (Unicode: 0x{0}) was found in the CDATA section." }, { "InvalidCharInContent", "An invalid XML character (Unicode: 0x{0}) was found in the element content of the document." }, { "InvalidCharInMisc", "An invalid XML character (Unicode: 0x{0}) was found in markup after the end of the element content." }, { "InvalidCharInProlog", "An invalid XML character (Unicode: 0x{0}) was found in the prolog of the document." }, { "CDEndInContent", "The character sequence \"]]>\" must not appear in content unless used to mark the end of a CDATA section." }, { "CDSectUnterminated", "The CDATA section must end with \"]]>\"." }, { "EqRequiredInXMLDecl", "The ''='' character must follow \"{0}\" in the XML declaration." }, { "QuoteRequiredInXMLDecl", "The value following \"{0}\" in the XML declaration must be a quoted string." }, { "XMLDeclUnterminated", "The XML declaration must end with \"?>\"." }, { "VersionInfoRequired", "The version is required in the XML declaration." }, { "MarkupNotRecognizedInProlog", "The markup in the document preceding the root element must be well-formed." }, { "MarkupNotRecognizedInMisc", "The markup in the document following the root element must be well-formed." }, { "SDDeclInvalid", "The standalone document declaration value must be \"yes\" or \"no\", not \"{0}\"." }, { "ETagRequired", "The element type \"{0}\" does not match the expected end-tag \"</{1}>\"." }, { "ElementUnterminated", "Element type \"{0}\" must be followed by either attribute specifications, \">\" or \"/>\"." }, { "EqRequiredInAttribute", "Attribute name \"{1}\" must be followed by the ''='' character." }, { "AttributeNotUnique", "Attribute \"{1}\" was already specified for element \"{0}\"." }, { "ETagUnterminated", "The end-tag for element type \"{0}\" must end with a ''>'' delimiter." }, { "MarkupNotRecognizedInContent", "The content of elements must consist of well-formed character data or markup." }, { "ElementEntityMismatch", "The element \"{0}\" must start and end within the same entity." }, { "InvalidCharInAttValue", "An invalid XML character (Unicode: 0x{2}) was found in the value of attribute \"{1}\"." }, { "InvalidCharInComment", "An invalid XML character (Unicode: 0x{0}) was found in the comment." }, { "InvalidCharInPI", "An invalid XML character (Unicode: 0x{0}) was found in the processing instruction." }, { "QuoteRequiredInAttValue", "The value of attribute \"{1}\" must begin with either a single or double quote character." }, { "LessthanInAttValue", "The value of attribute \"{1}\" must not contain the ''<'' character." }, { "AttributeValueUnterminated", "The value for attribute \"{1}\" must end with the matching quote character." }, { "InvalidCommentStart", "The comment must begin with \"<!--\"." }, { "DashDashInComment", "The string \"--\" is not permitted within comments." }, { "CommentUnterminated", "The comment must end with \"-->\"." }, { "PITargetRequired", "The processing instruction must begin with the name of the target." }, { "SpaceRequiredInPI", "White space is required between the processing instruction target and data." }, { "PIUnterminated", "The processing instruction must end with \"?>\"." }, { "ReservedPITarget", "The processing instruction target matching \"[xX][mM][lL]\" is not allowed." }, { "VersionNotSupported", "XML version \"{0}\" is not supported." }, { "DigitRequiredInCharRef", "A decimal representation must immediately follow the \"&#\" in a character reference." }, { "HexdigitRequiredInCharRef", "A hexadecimal representation must immediately follow the \"&#x\" in a character reference." }, { "SemicolonRequiredInCharRef", "The character reference must end with the ';' delimiter." }, { "InvalidCharRef", "Character reference \"&#{0}\" is an invalid XML character." }, { "NameRequiredInReference", "The entity name must immediately follow the '&' in the entity reference." }, { "SemicolonRequiredInReference", "The reference to entity \"{0}\" must end with the '';'' delimiter." }, { "EqRequiredInTextDecl", "The ''='' character must follow \"{0}\" in the text declaration." }, { "QuoteRequiredInTextDecl", "The value following \"{0}\" in the text declaration must be a quoted string." }, { "SpaceRequiredInTextDecl", "White space is required between the version and the encoding declaration." }, { "TextDeclUnterminated", "The text declaration must end with \"?>\"." }, { "EncodingDeclRequired", "The encoding declaration is required in the text declaration." }, { "EncodingDeclInvalid", "Invalid encoding name \"{0}\"." }, { "EntityNotDeclared", "The general entity \"{0}\" was referenced, but not declared." }, { "ColonInName", "Namespaces disallows ':' except in element types or attribute names." }, { "TwoColonsInQName", "Namespaces allows only one ':' in element types or attribute names." }, { "PrefixDeclared", "The namespace prefix \"{0}\" was not declared." }, { "PrefixLegal", "The namespace prefix \"xml\" is not bound to a legal namespace name." }, { "NamespaceNameEmpty", "The namespace name declared for prefix \"{0}\" may not be empty." }, { "NamespaceReserved", "The namespace prefix \"{0}\" is bound to reserved namespace name \"{1}\"." }, { "NamespacePrefixReserved", "The namespace prefix \"xmlns\" must not be declared." } };
        MESSAGE_KEYS = new String[] { "RootElementRequired", "InvalidCharInCDSect", "InvalidCharInContent", "InvalidCharInMisc", "InvalidCharInProlog", "CDEndInContent", "CDSectUnterminated", "EqRequiredInXMLDecl", "QuoteRequiredInXMLDecl", "XMLDeclUnterminated", "VersionInfoRequired", "MarkupNotRecognizedInProlog", "MarkupNotRecognizedInMisc", "SDDeclInvalid", "ETagRequired", "ElementUnterminated", "EqRequiredInAttribute", "AttributeNotUnique", "ETagUnterminated", "MarkupNotRecognizedInContent", "ElementEntityMismatch", "InvalidCharInAttValue", "InvalidCharInComment", "InvalidCharInPI", "QuoteRequiredInAttValue", "LessthanInAttValue", "AttributeValueUnterminated", "InvalidCommentStart", "DashDashInComment", "CommentUnterminated", "PITargetRequired", "SpaceRequiredInPI", "PIUnterminated", "ReservedPITarget", "VersionNotSupported", "DigitRequiredInCharRef", "HexdigitRequiredInCharRef", "SemicolonRequiredInCharRef", "InvalidCharRef", "NameRequiredInReference", "SemicolonRequiredInReference", "EqRequiredInTextDecl", "QuoteRequiredInTextDecl", "SpaceRequiredInTextDecl", "TextDeclUnterminated", "EncodingDeclRequired", "EncodingDeclInvalid", "EntityNotDeclared", "ColonInName", "TwoColonsInQName", "PrefixDeclared", "PrefixLegal", "NamespaceNameEmpty", "NamespaceReserved", "NamespacePrefixReserved" };
    }
}
