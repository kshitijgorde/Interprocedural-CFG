// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.compiler.ASTInspector;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$getc;
import org.jruby.RubyZlib$RubyGzipReader$i$0$1$read;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$lineno;
import org.jruby.RubyZlib$RubyGzipReader$i$0$1$each_line;
import org.jruby.RubyZlib$RubyGzipReader$i$1$0$ungetc;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$each_byte;
import org.jruby.RubyZlib$RubyGzipReader$i$1$0$set_lineno;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$readchar;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$unused;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$pos;
import org.jruby.RubyZlib$RubyGzipReader$i$0$1$each;
import org.jruby.RubyZlib$RubyGzipReader$i$1$0$initialize;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$eof;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$eof_p;
import org.jruby.RubyZlib$RubyGzipReader$i$0$1$gets;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$crc;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$readline;
import org.jruby.RubyZlib$RubyGzipReader$i$0$1$readlines;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$close;
import org.jruby.RubyZlib$RubyGzipReader$i$0$0$rewind;
import org.jruby.RubyZlib$RubyGzipReader$s$0$0$newInstance;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Block;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyZlib;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyZlib$RubyGzipReader$s$1$0$open;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyZlib$RubyGzipReader$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyZlib$RubyGzipReader$s$1$0$open(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "open", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "open", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("open", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$s$0$0$newInstance(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "newInstance", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "newInstance", RubyZlib.RubyGzipReader.class, new Class[] { IRubyObject.class, IRubyObject[].class, Block.class }, true);
        singletonClass.addMethodAtBootTimeOnly("new", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.open", "open");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.newInstance", "new");
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$rewind(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "rewind", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "rewind", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("rewind", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$close(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "close", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "close", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("close", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$1$readlines(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "readlines", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "readlines", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("readlines", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$readline(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "readline", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "readline", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("readline", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$crc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "crc", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "crc", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("crc", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$1$gets(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "gets", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "gets", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("gets", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$eof_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "eof_p", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "eof_p", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("eof?", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$eof(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "eof", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "eof", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("eof", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$1$0$initialize(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "initialize", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "initialize", IRubyObject.class, new Class[] { IRubyObject.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("initialize", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$1$each(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "each", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "each", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$pos(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "pos", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "pos", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("pos", javaMethod);
        cls.addMethodAtBootTimeOnly("tell", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$unused(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "unused", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "unused", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("unused", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$readchar(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "readchar", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "readchar", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("readchar", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$1$0$set_lineno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "set_lineno", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "set_lineno", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("lineno=", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$each_byte(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "each_byte", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "each_byte", IRubyObject.class, new Class[] { ThreadContext.class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_byte", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$1$0$ungetc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "ungetc", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "ungetc", IRubyObject.class, new Class[] { IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("ungetc", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$1$each_line(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "each_line", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "each_line", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class, Block.class }, false);
        cls.addMethodAtBootTimeOnly("each_line", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$lineno(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "lineno", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "lineno", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("lineno", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$1$read(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "read", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "read", IRubyObject.class, new Class[] { IRubyObject[].class }, false);
        cls.addMethodAtBootTimeOnly("read", javaMethod);
        javaMethod = new RubyZlib$RubyGzipReader$i$0$0$getc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "getc", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyZlib.RubyGzipReader.class, "getc", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("getc", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.rewind", "rewind");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.close", "close");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.readlines", "readlines");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.readline", "readline");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.crc", "crc");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.gets", "gets");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.eof_p", "eof?");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.eof", "eof");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.initialize", "initialize");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.each", "each");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.pos", "pos");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.unused", "unused");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.readchar", "readchar");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.set_lineno", "lineno=");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.each_byte", "each_byte");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.ungetc", "ungetc");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.each_line", "each_line");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.lineno", "lineno");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.read", "read");
        runtime.addBoundMethod("org.jruby.RubyZlib.RubyGzipReader.getc", "getc");
    }
    
    static {
        ASTInspector.addScopeAwareMethods("readline", "gets");
    }
}
