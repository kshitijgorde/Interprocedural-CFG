// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyEnumerable$s$0$0$each_entry;
import org.jruby.RubyEnumerable$s$chunk;
import org.jruby.RubyEnumerable$s$0$0$zip19;
import org.jruby.RubyEnumerable$s$0$0$map19;
import org.jruby.RubyEnumerable$s$0$0$collect_concat19;
import org.jruby.RubyEnumerable$s$join;
import org.jruby.RubyEnumerable$s$to_a19;
import org.jruby.RubyEnumerable$s$0$0$collect19;
import org.jruby.RubyEnumerable$s$0$0$each_with_index19;
import org.jruby.RubyEnumerable$s$0$0$flat_map19;
import org.jruby.RubyEnumerable$s$0$0$zip;
import org.jruby.RubyEnumerable$s$to_a;
import org.jruby.RubyEnumerable$s$0$0$collect;
import org.jruby.RubyEnumerable$s$0$0$each_with_index;
import org.jruby.CompatVersion;
import org.jruby.RubyEnumerable$s$reverse_each;
import org.jruby.RubyEnumerable$s$find;
import org.jruby.RubyEnumerable$s$count;
import org.jruby.RubyEnumerable$s$detect;
import org.jruby.RubyEnumerable$s$0$0$group_by;
import org.jruby.RubyEnumerable$s$0$0$min_by;
import org.jruby.RubyEnumerable$s$0$0$partition;
import org.jruby.RubyEnumerable$s$0$0$one_p;
import org.jruby.RubyEnumerable$s$0$0$any_p;
import org.jruby.RubyEnumerable$s$0$0$reject;
import org.jruby.RubyEnumerable$s$1$0$drop;
import org.jruby.RubyEnumerable$s$0$0$select;
import org.jruby.RubyEnumerable$s$find_index;
import org.jruby.RubyEnumerable$s$cycle;
import org.jruby.RubyEnumerable$s$1$0$take;
import org.jruby.RubyEnumerable$s$0$0$sort_by;
import org.jruby.RubyEnumerable$s$first;
import org.jruby.RubyEnumerable$s$0$0$find_all;
import org.jruby.RubyEnumerable$s$1$0$include_p;
import org.jruby.RubyEnumerable$s$0$0$minmax_by;
import org.jruby.RubyEnumerable$s$0$0$min;
import org.jruby.RubyEnumerable$s$1$0$grep;
import org.jruby.RubyEnumerable$s$0$0$none_p;
import org.jruby.RubyEnumerable$s$0$0$drop_while;
import org.jruby.RubyEnumerable$s$0$0$all_p;
import org.jruby.RubyEnumerable$s$0$0$max;
import org.jruby.RubyEnumerable$s$0$0$minmax;
import org.jruby.RubyEnumerable$s$inject;
import org.jruby.RubyEnumerable$s$0$0$sort;
import org.jruby.RubyEnumerable$s$0$0$take_while;
import org.jruby.RubyEnumerable$s$0$0$max_by;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.Block;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyEnumerable;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyEnumerable$s$0$0$enum_with_index;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyEnumerable$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyEnumerable$s$0$0$enum_with_index(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "enum_with_index", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "enum_with_index", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("enum_with_index", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$max_by(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "max_by", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "max_by", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("max_by", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$take_while(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "take_while", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "take_while", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("take_while", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$sort(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "sort", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "sort", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("sort", javaMethod);
        javaMethod = new RubyEnumerable$s$inject(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "inject", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("inject", javaMethod);
        cls.addMethodAtBootTimeOnly("reduce", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$minmax(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "minmax", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "minmax", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("minmax", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$max(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "max", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "max", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("max", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$all_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "all_p", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "all_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("all?", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$drop_while(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "drop_while", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "drop_while", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("drop_while", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$none_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "none_p", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "none_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("none?", javaMethod);
        javaMethod = new RubyEnumerable$s$1$0$grep(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "grep", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "grep", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("grep", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$min(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "min", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "min", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("min", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$minmax_by(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "minmax_by", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "minmax_by", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("minmax_by", javaMethod);
        javaMethod = new RubyEnumerable$s$1$0$include_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "include_p", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "include_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("include?", javaMethod);
        cls.addMethodAtBootTimeOnly("member?", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$find_all(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "find_all", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "find_all", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("find_all", javaMethod);
        javaMethod = new RubyEnumerable$s$first(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "first", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("first", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$sort_by(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "sort_by", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "sort_by", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("sort_by", javaMethod);
        javaMethod = new RubyEnumerable$s$1$0$take(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "take", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "take", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("take", javaMethod);
        javaMethod = new RubyEnumerable$s$cycle(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "cycle", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("cycle", javaMethod);
        javaMethod = new RubyEnumerable$s$find_index(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "find_index", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("find_index", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$select(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "select", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "select", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("select", javaMethod);
        javaMethod = new RubyEnumerable$s$1$0$drop(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "drop", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "drop", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("drop", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$reject(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "reject", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "reject", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("reject", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$any_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "any_p", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "any_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("any?", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$one_p(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "one_p", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "one_p", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("one?", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$partition(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "partition", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "partition", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("partition", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$min_by(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "min_by", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "min_by", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("min_by", javaMethod);
        javaMethod = new RubyEnumerable$s$0$0$group_by(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "group_by", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyEnumerable.class, "group_by", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
        cls.addMethodAtBootTimeOnly("group_by", javaMethod);
        javaMethod = new RubyEnumerable$s$detect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "detect", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("detect", javaMethod);
        javaMethod = new RubyEnumerable$s$count(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "count", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("count", javaMethod);
        javaMethod = new RubyEnumerable$s$find(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "find", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("find", javaMethod);
        javaMethod = new RubyEnumerable$s$reverse_each(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "reverse_each", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("reverse_each", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyEnumerable.enum_with_index", "enum_with_index");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.max_by", "max_by");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.take_while", "take_while");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.sort", "sort");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.inject", "inject");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.minmax", "minmax");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.max", "max");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.all_p", "all?");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.drop_while", "drop_while");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.none_p", "none?");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.grep", "grep");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.min", "min");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.minmax_by", "minmax_by");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.include_p", "include?");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.find_all", "find_all");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.first", "first");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.sort_by", "sort_by");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.take", "take");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.cycle", "cycle");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.find_index", "find_index");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.select", "select");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.drop", "drop");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.reject", "reject");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.any_p", "any?");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.one_p", "one?");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.partition", "partition");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.min_by", "min_by");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.group_by", "group_by");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.detect", "detect");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.count", "count");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.find", "find");
        runtime.addBoundMethod("org.jruby.RubyEnumerable.reverse_each", "reverse_each");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyEnumerable$s$0$0$each_with_index(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "each_with_index", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "each_with_index", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("each_with_index", javaMethod);
            javaMethod = new RubyEnumerable$s$0$0$collect(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "collect", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "collect", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("collect", javaMethod);
            cls.addMethodAtBootTimeOnly("map", javaMethod);
            javaMethod = new RubyEnumerable$s$to_a(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "to_a", true, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("to_a", javaMethod);
            cls.addMethodAtBootTimeOnly("entries", javaMethod);
            javaMethod = new RubyEnumerable$s$0$0$zip(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "zip", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "zip", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("zip", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyEnumerable.each_with_index", "each_with_index");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.collect", "collect");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.to_a", "to_a");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.zip", "zip");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyEnumerable$s$0$0$flat_map19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "flat_map19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "flat_map19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("flat_map", javaMethod);
            javaMethod = new RubyEnumerable$s$0$0$each_with_index19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "each_with_index19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "each_with_index19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("each_with_index", javaMethod);
            javaMethod = new RubyEnumerable$s$0$0$collect19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "collect19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "collect19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("collect", javaMethod);
            javaMethod = new RubyEnumerable$s$to_a19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "to_a19", true, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("to_a", javaMethod);
            cls.addMethodAtBootTimeOnly("entries", javaMethod);
            javaMethod = new RubyEnumerable$s$join(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "join", true, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("join", javaMethod);
            javaMethod = new RubyEnumerable$s$0$0$collect_concat19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "collect_concat19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "collect_concat19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("collect_concat", javaMethod);
            javaMethod = new RubyEnumerable$s$0$0$map19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "map19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "map19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("map", javaMethod);
            javaMethod = new RubyEnumerable$s$0$0$zip19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "zip19", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "zip19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("zip", javaMethod);
            javaMethod = new RubyEnumerable$s$chunk(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "chunk", true, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("chunk", javaMethod);
            javaMethod = new RubyEnumerable$s$0$0$each_entry(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "each_entry", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyEnumerable.class, "each_entry", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject[].class, Block.class }, true);
            cls.addMethodAtBootTimeOnly("each_entry", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyEnumerable.flat_map19", "flat_map");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.each_with_index19", "each_with_index");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.collect19", "collect");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.to_a19", "to_a");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.join", "join");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.collect_concat19", "collect_concat");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.map19", "map");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.zip19", "zip");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.chunk", "chunk");
            runtime.addBoundMethod("org.jruby.RubyEnumerable.each_entry", "each_entry");
        }
    }
}
