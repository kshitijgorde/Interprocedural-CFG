// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyRational$i$1$0$op_divmod19;
import org.jruby.RubyRational$i$1$0$op_mod19;
import org.jruby.RubyRational$i$0$1$rationalize;
import org.jruby.RubyRational$i$1$0$op_idiv19;
import org.jruby.RubyRational$i$1$0$op_divmod;
import org.jruby.RubyRational$i$1$0$op_mod;
import org.jruby.RubyRational$i$1$0$op_idiv;
import org.jruby.RubyRational$i$0$0$denominator;
import org.jruby.RubyRational$i$1$0$op_mul;
import org.jruby.RubyRational$i$1$0$op_rem;
import org.jruby.RubyRational$i$op_truncate;
import org.jruby.RubyRational$i$0$0$to_r;
import org.jruby.RubyRational$i$1$0$op_coerce;
import org.jruby.RubyRational$i$1$0$op_cmp;
import org.jruby.RubyRational$i$1$0$op_sub;
import org.jruby.RubyRational$i$op_ceil;
import org.jruby.RubyRational$i$0$0$inspect;
import org.jruby.RubyRational$i$0$0$numerator;
import org.jruby.RubyRational$i$0$0$hash;
import org.jruby.RubyRational$i$1$0$op_equal;
import org.jruby.RubyRational$i$1$0$op_expt;
import org.jruby.RubyRational$i$0$0$to_s;
import org.jruby.RubyRational$i$op_floor;
import org.jruby.RubyRational$i$1$0$marshal_load;
import org.jruby.RubyRational$i$1$0$op_add;
import org.jruby.RubyRational$i$op_round;
import org.jruby.RubyRational$i$0$0$to_f;
import org.jruby.RubyRational$i$0$0$op_abs;
import org.jruby.RubyRational$i$0$0$marshal_dump;
import org.jruby.RubyRational$i$1$0$op_fdiv;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubyRational;
import org.jruby.RubyRational$i$1$0$op_div;
import org.jruby.RubyRational$s$newInstanceBang;
import org.jruby.CompatVersion;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubyRational$s$convert;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubyRational$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubyRational$s$convert(singletonClass, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "convert", true, CallConfiguration.FrameNoneScopeNone, false);
        singletonClass.addMethodAtBootTimeOnly("convert", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyRational.convert", "convert");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyRational$s$newInstanceBang(singletonClass, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, -1, "newInstanceBang", true, CallConfiguration.FrameNoneScopeNone, false);
            singletonClass.addMethodAtBootTimeOnly("new!", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyRational.newInstanceBang", "new!");
        }
        javaMethod = new RubyRational$i$1$0$op_div(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_div", false, CallConfiguration.FrameBacktraceScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_div", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("/", javaMethod);
        cls.addMethodAtBootTimeOnly("quo", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_fdiv(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_fdiv", false, CallConfiguration.FrameBacktraceScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_fdiv", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("fdiv", javaMethod);
        javaMethod = new RubyRational$i$0$0$marshal_dump(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "marshal_dump", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "marshal_dump", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("marshal_dump", javaMethod);
        javaMethod = new RubyRational$i$0$0$op_abs(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "op_abs", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_abs", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("abs", javaMethod);
        javaMethod = new RubyRational$i$0$0$to_f(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_f", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "to_f", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_f", javaMethod);
        javaMethod = new RubyRational$i$op_round(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "op_round", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("round", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_add(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_add", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_add", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("+", javaMethod);
        javaMethod = new RubyRational$i$1$0$marshal_load(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "marshal_load", false, CallConfiguration.FrameBacktraceScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "marshal_load", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("marshal_load", javaMethod);
        javaMethod = new RubyRational$i$op_floor(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "op_floor", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("floor", javaMethod);
        javaMethod = new RubyRational$i$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "to_s", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_expt(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_expt", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_expt", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("**", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_equal(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_equal", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_equal", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("==", javaMethod);
        javaMethod = new RubyRational$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "hash", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        javaMethod = new RubyRational$i$0$0$numerator(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "numerator", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "numerator", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("numerator", javaMethod);
        javaMethod = new RubyRational$i$0$0$inspect(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "inspect", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("inspect", javaMethod);
        javaMethod = new RubyRational$i$op_ceil(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "op_ceil", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("ceil", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_sub(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_sub", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_sub", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("-", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_cmp(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_cmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("<=>", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_coerce(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_coerce", false, CallConfiguration.FrameBacktraceScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_coerce", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("coerce", javaMethod);
        javaMethod = new RubyRational$i$0$0$to_r(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_r", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "to_r", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_r", javaMethod);
        javaMethod = new RubyRational$i$op_truncate(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, -1, "op_truncate", false, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("truncate", javaMethod);
        cls.addMethodAtBootTimeOnly("to_i", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_rem(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_rem", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_rem", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("remainder", javaMethod);
        javaMethod = new RubyRational$i$1$0$op_mul(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_mul", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "op_mul", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("*", javaMethod);
        javaMethod = new RubyRational$i$0$0$denominator(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "denominator", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubyRational.class, "denominator", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("denominator", javaMethod);
        runtime.addBoundMethod("org.jruby.RubyRational.op_div", "/");
        runtime.addBoundMethod("org.jruby.RubyRational.op_fdiv", "fdiv");
        runtime.addBoundMethod("org.jruby.RubyRational.marshal_dump", "marshal_dump");
        runtime.addBoundMethod("org.jruby.RubyRational.op_abs", "abs");
        runtime.addBoundMethod("org.jruby.RubyRational.to_f", "to_f");
        runtime.addBoundMethod("org.jruby.RubyRational.op_round", "round");
        runtime.addBoundMethod("org.jruby.RubyRational.op_add", "+");
        runtime.addBoundMethod("org.jruby.RubyRational.marshal_load", "marshal_load");
        runtime.addBoundMethod("org.jruby.RubyRational.op_floor", "floor");
        runtime.addBoundMethod("org.jruby.RubyRational.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubyRational.op_expt", "**");
        runtime.addBoundMethod("org.jruby.RubyRational.op_equal", "==");
        runtime.addBoundMethod("org.jruby.RubyRational.hash", "hash");
        runtime.addBoundMethod("org.jruby.RubyRational.numerator", "numerator");
        runtime.addBoundMethod("org.jruby.RubyRational.inspect", "inspect");
        runtime.addBoundMethod("org.jruby.RubyRational.op_ceil", "ceil");
        runtime.addBoundMethod("org.jruby.RubyRational.op_sub", "-");
        runtime.addBoundMethod("org.jruby.RubyRational.op_cmp", "<=>");
        runtime.addBoundMethod("org.jruby.RubyRational.op_coerce", "coerce");
        runtime.addBoundMethod("org.jruby.RubyRational.to_r", "to_r");
        runtime.addBoundMethod("org.jruby.RubyRational.op_truncate", "truncate");
        runtime.addBoundMethod("org.jruby.RubyRational.op_rem", "remainder");
        runtime.addBoundMethod("org.jruby.RubyRational.op_mul", "*");
        runtime.addBoundMethod("org.jruby.RubyRational.denominator", "denominator");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyRational$i$1$0$op_idiv(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_idiv", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyRational.class, "op_idiv", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("div", javaMethod);
            javaMethod = new RubyRational$i$1$0$op_mod(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_mod", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyRational.class, "op_mod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("modulo", javaMethod);
            cls.addMethodAtBootTimeOnly("%", javaMethod);
            javaMethod = new RubyRational$i$1$0$op_divmod(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_divmod", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyRational.class, "op_divmod", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("divmod", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyRational.op_idiv", "div");
            runtime.addBoundMethod("org.jruby.RubyRational.op_mod", "modulo");
            runtime.addBoundMethod("org.jruby.RubyRational.op_divmod", "divmod");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubyRational$i$1$0$op_idiv19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_idiv19", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyRational.class, "op_idiv19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("div", javaMethod);
            javaMethod = new RubyRational$i$0$1$rationalize(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "rationalize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubyRational.class, "rationalize", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject[].class }, false);
            cls.addMethodAtBootTimeOnly("rationalize", javaMethod);
            javaMethod = new RubyRational$i$1$0$op_mod19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_mod19", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyRational.class, "op_mod19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("modulo", javaMethod);
            cls.addMethodAtBootTimeOnly("%", javaMethod);
            javaMethod = new RubyRational$i$1$0$op_divmod19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_divmod19", false, CallConfiguration.FrameBacktraceScopeNone, false);
            javaMethod.setNativeCall(RubyRational.class, "op_divmod19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("divmod", javaMethod);
            runtime.addBoundMethod("org.jruby.RubyRational.op_idiv19", "div");
            runtime.addBoundMethod("org.jruby.RubyRational.rationalize", "rationalize");
            runtime.addBoundMethod("org.jruby.RubyRational.op_mod19", "modulo");
            runtime.addBoundMethod("org.jruby.RubyRational.op_divmod19", "divmod");
        }
    }
}
