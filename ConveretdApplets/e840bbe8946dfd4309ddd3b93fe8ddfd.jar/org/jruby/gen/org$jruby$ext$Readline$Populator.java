// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.compiler.ASTInspector;
import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.ext.Readline$s$1$0$setOutput;
import org.jruby.ext.Readline$s$0$0$s_get_line_buffer;
import org.jruby.ext.Readline$s$1$0$setInput;
import org.jruby.ext.Readline$s$0$0$s_get_point;
import org.jruby.ext.Readline$s$0$0$unimplemented19;
import org.jruby.ext.Readline$s$0$0$s_refresh_line;
import org.jruby.ext.Readline$s$0$0$s_get_screen_size;
import org.jruby.CompatVersion;
import org.jruby.ext.Readline$s$1$0$s_set_completion_case_fold;
import org.jruby.ext.Readline$s$1$0$s_set_completion_append_character;
import org.jruby.ext.Readline$s$0$0$unimplemented;
import org.jruby.ext.Readline$s$1$0$s_set_completion_proc;
import org.jruby.ext.Readline$s$0$0$s_get_basic_word_break_character;
import org.jruby.runtime.ThreadContext;
import org.jruby.ext.Readline$s$0$0$s_get_completion_case_fold;
import org.jruby.ext.Readline$s$s_readline;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.ext.Readline;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.ext.Readline$s$1$0$s_set_basic_word_break_character;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$ext$Readline$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new Readline$s$1$0$s_set_basic_word_break_character(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "s_set_basic_word_break_character", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(Readline.class, "s_set_basic_word_break_character", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("basic_word_break_characters=", javaMethod);
        DynamicMethod moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("basic_word_break_characters=", moduleMethod);
        javaMethod = new Readline$s$s_readline(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, -1, "s_readline", true, CallConfiguration.FrameNoneScopeNone, false);
        cls.addMethodAtBootTimeOnly("readline", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("readline", moduleMethod);
        javaMethod = new Readline$s$0$0$s_get_completion_case_fold(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "s_get_completion_case_fold", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(Readline.class, "s_get_completion_case_fold", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("completion_case_fold", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("completion_case_fold", moduleMethod);
        javaMethod = new Readline$s$0$0$s_get_basic_word_break_character(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "s_get_basic_word_break_character", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(Readline.class, "s_get_basic_word_break_character", IRubyObject.class, new Class[] { IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("basic_word_break_characters", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("basic_word_break_characters", moduleMethod);
        javaMethod = new Readline$s$1$0$s_set_completion_proc(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "s_set_completion_proc", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(Readline.class, "s_set_completion_proc", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("completion_proc=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("completion_proc=", moduleMethod);
        javaMethod = new Readline$s$0$0$unimplemented(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 0, "unimplemented", true, CallConfiguration.FrameFullScopeNone, false);
        javaMethod.setNativeCall(Readline.class, "unimplemented", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("basic_quote_characters", javaMethod);
        cls.addMethodAtBootTimeOnly("basic_quote_characters=", javaMethod);
        cls.addMethodAtBootTimeOnly("completer_quote_characters", javaMethod);
        cls.addMethodAtBootTimeOnly("completer_quote_characters=", javaMethod);
        cls.addMethodAtBootTimeOnly("completer_word_break_characters", javaMethod);
        cls.addMethodAtBootTimeOnly("completer_word_break_characters=", javaMethod);
        cls.addMethodAtBootTimeOnly("completion_append_character", javaMethod);
        cls.addMethodAtBootTimeOnly("completion_proc", javaMethod);
        cls.addMethodAtBootTimeOnly("emacs_editing_mode", javaMethod);
        cls.addMethodAtBootTimeOnly("filename_quote_characters", javaMethod);
        cls.addMethodAtBootTimeOnly("filename_quote_characters=", javaMethod);
        cls.addMethodAtBootTimeOnly("vi_editing_mode", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("basic_quote_characters", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("basic_quote_characters=", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("completer_quote_characters", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("completer_quote_characters=", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("completer_word_break_characters", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("completer_word_break_characters=", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("completion_append_character", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("completion_proc", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("emacs_editing_mode", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("filename_quote_characters", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("filename_quote_characters=", moduleMethod);
        singletonClass.addMethodAtBootTimeOnly("vi_editing_mode", moduleMethod);
        javaMethod = new Readline$s$1$0$s_set_completion_append_character(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "s_set_completion_append_character", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(Readline.class, "s_set_completion_append_character", IRubyObject.class, new Class[] { IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("completion_append_character=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("completion_append_character=", moduleMethod);
        javaMethod = new Readline$s$1$0$s_set_completion_case_fold(cls, Visibility.PRIVATE);
        TypePopulator.populateMethod(javaMethod, 1, "s_set_completion_case_fold", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(Readline.class, "s_set_completion_case_fold", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
        cls.addMethodAtBootTimeOnly("completion_case_fold=", javaMethod);
        moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
        singletonClass.addMethodAtBootTimeOnly("completion_case_fold=", moduleMethod);
        runtime.addBoundMethod("org.jruby.ext.Readline.s_set_basic_word_break_character", "basic_word_break_characters=");
        runtime.addBoundMethod("org.jruby.ext.Readline.s_readline", "readline");
        runtime.addBoundMethod("org.jruby.ext.Readline.s_get_completion_case_fold", "completion_case_fold");
        runtime.addBoundMethod("org.jruby.ext.Readline.s_get_basic_word_break_character", "basic_word_break_characters");
        runtime.addBoundMethod("org.jruby.ext.Readline.s_set_completion_proc", "completion_proc=");
        runtime.addBoundMethod("org.jruby.ext.Readline.unimplemented", "basic_quote_characters");
        runtime.addBoundMethod("org.jruby.ext.Readline.s_set_completion_append_character", "completion_append_character=");
        runtime.addBoundMethod("org.jruby.ext.Readline.s_set_completion_case_fold", "completion_case_fold=");
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new Readline$s$0$0$s_get_screen_size(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 0, "s_get_screen_size", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(Readline.class, "s_get_screen_size", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
            cls.addMethodAtBootTimeOnly("get_screen_size", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("get_screen_size", moduleMethod);
            javaMethod = new Readline$s$0$0$s_refresh_line(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 0, "s_refresh_line", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(Readline.class, "s_refresh_line", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
            cls.addMethodAtBootTimeOnly("refresh_line", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("refresh_line", moduleMethod);
            javaMethod = new Readline$s$0$0$unimplemented19(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 0, "unimplemented19", true, CallConfiguration.FrameFullScopeNone, false);
            javaMethod.setNativeCall(Readline.class, "unimplemented19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
            cls.addMethodAtBootTimeOnly("basic_quote_characters", javaMethod);
            cls.addMethodAtBootTimeOnly("basic_quote_characters=", javaMethod);
            cls.addMethodAtBootTimeOnly("completer_quote_characters", javaMethod);
            cls.addMethodAtBootTimeOnly("completer_quote_characters=", javaMethod);
            cls.addMethodAtBootTimeOnly("completer_word_break_characters", javaMethod);
            cls.addMethodAtBootTimeOnly("completer_word_break_characters=", javaMethod);
            cls.addMethodAtBootTimeOnly("completion_append_character", javaMethod);
            cls.addMethodAtBootTimeOnly("completion_proc", javaMethod);
            cls.addMethodAtBootTimeOnly("emacs_editing_mode", javaMethod);
            cls.addMethodAtBootTimeOnly("emacs_editing_mode?", javaMethod);
            cls.addMethodAtBootTimeOnly("filename_quote_characters", javaMethod);
            cls.addMethodAtBootTimeOnly("filename_quote_characters=", javaMethod);
            cls.addMethodAtBootTimeOnly("vi_editing_mode", javaMethod);
            cls.addMethodAtBootTimeOnly("vi_editing_mode?", javaMethod);
            cls.addMethodAtBootTimeOnly("set_screen_size", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("basic_quote_characters", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("basic_quote_characters=", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("completer_quote_characters", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("completer_quote_characters=", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("completer_word_break_characters", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("completer_word_break_characters=", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("completion_append_character", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("completion_proc", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("emacs_editing_mode", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("emacs_editing_mode?", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("filename_quote_characters", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("filename_quote_characters=", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("vi_editing_mode", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("vi_editing_mode?", moduleMethod);
            singletonClass.addMethodAtBootTimeOnly("set_screen_size", moduleMethod);
            javaMethod = new Readline$s$0$0$s_get_point(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 0, "s_get_point", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(Readline.class, "s_get_point", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
            cls.addMethodAtBootTimeOnly("point", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("point", moduleMethod);
            javaMethod = new Readline$s$1$0$setInput(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 1, "setInput", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(Readline.class, "setInput", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            cls.addMethodAtBootTimeOnly("input=", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("input=", moduleMethod);
            javaMethod = new Readline$s$0$0$s_get_line_buffer(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 0, "s_get_line_buffer", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(Readline.class, "s_get_line_buffer", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
            cls.addMethodAtBootTimeOnly("line_buffer", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("line_buffer", moduleMethod);
            javaMethod = new Readline$s$1$0$setOutput(cls, Visibility.PRIVATE);
            TypePopulator.populateMethod(javaMethod, 1, "setOutput", true, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(Readline.class, "setOutput", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class, IRubyObject.class }, true);
            cls.addMethodAtBootTimeOnly("output=", javaMethod);
            moduleMethod = TypePopulator.populateModuleMethod(cls, javaMethod);
            singletonClass.addMethodAtBootTimeOnly("output=", moduleMethod);
            runtime.addBoundMethod("org.jruby.ext.Readline.s_get_screen_size", "get_screen_size");
            runtime.addBoundMethod("org.jruby.ext.Readline.s_refresh_line", "refresh_line");
            runtime.addBoundMethod("org.jruby.ext.Readline.unimplemented19", "basic_quote_characters");
            runtime.addBoundMethod("org.jruby.ext.Readline.s_get_point", "point");
            runtime.addBoundMethod("org.jruby.ext.Readline.setInput", "input=");
            runtime.addBoundMethod("org.jruby.ext.Readline.s_get_line_buffer", "line_buffer");
            runtime.addBoundMethod("org.jruby.ext.Readline.setOutput", "output=");
        }
    }
    
    static {
        ASTInspector.addFrameAwareMethods("emacs_editing_mode", "completer_quote_characters", "basic_quote_characters=", "vi_editing_mode", "completer_quote_characters=", "emacs_editing_mode?", "set_screen_size", "filename_quote_characters=", "completer_word_break_characters=", "filename_quote_characters", "completion_proc", "completion_append_character", "vi_editing_mode?", "basic_quote_characters", "completer_word_break_characters");
    }
}
