// 
// Decompiled by Procyon v0.5.30
// 

package org.jruby.gen;

import org.jruby.internal.runtime.methods.JavaMethod;
import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubySymbol$i$1$0$op_match19;
import org.jruby.RubySymbol$i$0$0$succ;
import org.jruby.RubySymbol$i$0$0$swapcase;
import org.jruby.RubySymbol$i$0$0$capitalize;
import org.jruby.RubySymbol$i$0$0$empty_p;
import org.jruby.RubySymbol$i$0$0$encoding;
import org.jruby.RubySymbol$i$1$0$op_cmp;
import org.jruby.RubySymbol$i$0$0$inspect19;
import org.jruby.RubySymbol$i$0$0$upcase;
import org.jruby.RubySymbol$i$1$0$casecmp;
import org.jruby.RubySymbol$i$op_aref;
import org.jruby.RubySymbol$i$0$0$length;
import org.jruby.RubySymbol$i$0$0$downcase;
import org.jruby.RubySymbol$i$0$0$to_sym19;
import org.jruby.RubySymbol$i$0$0$to_i;
import org.jruby.RubySymbol$i$0$0$to_int;
import org.jruby.RubySymbol$i$0$0$inspect;
import org.jruby.CompatVersion;
import org.jruby.RubyFixnum;
import org.jruby.RubySymbol$i$0$0$hash;
import org.jruby.RubySymbol$i$0$0$to_s;
import org.jruby.RubySymbol$i$0$0$to_sym;
import org.jruby.RubySymbol$i$1$0$op_eqq;
import org.jruby.RubySymbol$i$0$0$id2name;
import org.jruby.RubySymbol$i$0$0$to_proc;
import org.jruby.internal.runtime.methods.DynamicMethod;
import org.jruby.runtime.ThreadContext;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.RubySymbol;
import org.jruby.internal.runtime.methods.CallConfiguration;
import org.jruby.RubySymbol$s$0$0$all_symbols;
import org.jruby.runtime.Visibility;
import org.jruby.RubyModule;
import org.jruby.anno.TypePopulator;

public class org$jruby$RubySymbol$Populator extends TypePopulator
{
    public void populate(final RubyModule cls, final Class clazz) {
        final RubyClass singletonClass = cls.getSingletonClass();
        final CompatVersion compatVersion = cls.getRuntime().getInstanceConfig().getCompatVersion();
        final Ruby runtime = cls.getRuntime();
        JavaMethod javaMethod = new RubySymbol$s$0$0$all_symbols(singletonClass, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "all_symbols", true, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubySymbol.class, "all_symbols", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, true);
        singletonClass.addMethodAtBootTimeOnly("all_symbols", javaMethod);
        runtime.addBoundMethod("org.jruby.RubySymbol.all_symbols", "all_symbols");
        javaMethod = new RubySymbol$i$0$0$to_proc(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_proc", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubySymbol.class, "to_proc", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_proc", javaMethod);
        javaMethod = new RubySymbol$i$0$0$id2name(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "id2name", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubySymbol.class, "id2name", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("id2name", javaMethod);
        javaMethod = new RubySymbol$i$1$0$op_eqq(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 1, "op_eqq", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubySymbol.class, "op_eqq", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
        cls.addMethodAtBootTimeOnly("===", javaMethod);
        javaMethod = new RubySymbol$i$0$0$to_sym(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_sym", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubySymbol.class, "to_sym", IRubyObject.class, new Class[0], false);
        cls.addMethodAtBootTimeOnly("to_sym", javaMethod);
        javaMethod = new RubySymbol$i$0$0$to_s(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "to_s", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubySymbol.class, "to_s", IRubyObject.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("to_s", javaMethod);
        javaMethod = new RubySymbol$i$0$0$hash(cls, Visibility.PUBLIC);
        TypePopulator.populateMethod(javaMethod, 0, "hash", false, CallConfiguration.FrameNoneScopeNone, false);
        javaMethod.setNativeCall(RubySymbol.class, "hash", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
        cls.addMethodAtBootTimeOnly("hash", javaMethod);
        runtime.addBoundMethod("org.jruby.RubySymbol.to_proc", "to_proc");
        runtime.addBoundMethod("org.jruby.RubySymbol.id2name", "id2name");
        runtime.addBoundMethod("org.jruby.RubySymbol.op_eqq", "===");
        runtime.addBoundMethod("org.jruby.RubySymbol.to_sym", "to_sym");
        runtime.addBoundMethod("org.jruby.RubySymbol.to_s", "to_s");
        runtime.addBoundMethod("org.jruby.RubySymbol.hash", "hash");
        if (compatVersion == CompatVersion.RUBY1_8 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubySymbol$i$0$0$inspect(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "inspect", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "inspect", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("inspect", javaMethod);
            javaMethod = new RubySymbol$i$0$0$to_int(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_int", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "to_int", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("to_int", javaMethod);
            javaMethod = new RubySymbol$i$0$0$to_i(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_i", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "to_i", RubyFixnum.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("to_i", javaMethod);
            runtime.addBoundMethod("org.jruby.RubySymbol.inspect", "inspect");
            runtime.addBoundMethod("org.jruby.RubySymbol.to_int", "to_int");
            runtime.addBoundMethod("org.jruby.RubySymbol.to_i", "to_i");
        }
        if (compatVersion == CompatVersion.RUBY1_9 || compatVersion == CompatVersion.BOTH) {
            javaMethod = new RubySymbol$i$0$0$to_sym19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "to_sym19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "to_sym19", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("intern", javaMethod);
            javaMethod = new RubySymbol$i$0$0$downcase(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "downcase", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "downcase", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("downcase", javaMethod);
            javaMethod = new RubySymbol$i$0$0$length(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "length", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "length", IRubyObject.class, new Class[0], false);
            cls.addMethodAtBootTimeOnly("length", javaMethod);
            cls.addMethodAtBootTimeOnly("size", javaMethod);
            javaMethod = new RubySymbol$i$op_aref(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, -1, "op_aref", false, CallConfiguration.FrameNoneScopeNone, false);
            cls.addMethodAtBootTimeOnly("[]", javaMethod);
            cls.addMethodAtBootTimeOnly("slice", javaMethod);
            javaMethod = new RubySymbol$i$1$0$casecmp(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "casecmp", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "casecmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("casecmp", javaMethod);
            javaMethod = new RubySymbol$i$0$0$upcase(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "upcase", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "upcase", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("upcase", javaMethod);
            javaMethod = new RubySymbol$i$0$0$inspect19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "inspect19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "inspect19", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("inspect", javaMethod);
            javaMethod = new RubySymbol$i$1$0$op_cmp(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_cmp", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "op_cmp", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("<=>", javaMethod);
            javaMethod = new RubySymbol$i$0$0$encoding(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "encoding", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "encoding", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("encoding", javaMethod);
            javaMethod = new RubySymbol$i$0$0$empty_p(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "empty_p", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "empty_p", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("empty?", javaMethod);
            javaMethod = new RubySymbol$i$0$0$capitalize(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "capitalize", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "capitalize", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("capitalize", javaMethod);
            javaMethod = new RubySymbol$i$0$0$swapcase(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "swapcase", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "swapcase", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("swapcase", javaMethod);
            javaMethod = new RubySymbol$i$0$0$succ(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 0, "succ", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "succ", IRubyObject.class, new Class[] { ThreadContext.class }, false);
            cls.addMethodAtBootTimeOnly("succ", javaMethod);
            cls.addMethodAtBootTimeOnly("next", javaMethod);
            javaMethod = new RubySymbol$i$1$0$op_match19(cls, Visibility.PUBLIC);
            TypePopulator.populateMethod(javaMethod, 1, "op_match19", false, CallConfiguration.FrameNoneScopeNone, false);
            javaMethod.setNativeCall(RubySymbol.class, "op_match19", IRubyObject.class, new Class[] { ThreadContext.class, IRubyObject.class }, false);
            cls.addMethodAtBootTimeOnly("=~", javaMethod);
            cls.addMethodAtBootTimeOnly("match", javaMethod);
            runtime.addBoundMethod("org.jruby.RubySymbol.to_sym19", "intern");
            runtime.addBoundMethod("org.jruby.RubySymbol.downcase", "downcase");
            runtime.addBoundMethod("org.jruby.RubySymbol.length", "length");
            runtime.addBoundMethod("org.jruby.RubySymbol.op_aref", "[]");
            runtime.addBoundMethod("org.jruby.RubySymbol.casecmp", "casecmp");
            runtime.addBoundMethod("org.jruby.RubySymbol.upcase", "upcase");
            runtime.addBoundMethod("org.jruby.RubySymbol.inspect19", "inspect");
            runtime.addBoundMethod("org.jruby.RubySymbol.op_cmp", "<=>");
            runtime.addBoundMethod("org.jruby.RubySymbol.encoding", "encoding");
            runtime.addBoundMethod("org.jruby.RubySymbol.empty_p", "empty?");
            runtime.addBoundMethod("org.jruby.RubySymbol.capitalize", "capitalize");
            runtime.addBoundMethod("org.jruby.RubySymbol.swapcase", "swapcase");
            runtime.addBoundMethod("org.jruby.RubySymbol.succ", "succ");
            runtime.addBoundMethod("org.jruby.RubySymbol.op_match19", "=~");
        }
    }
}
